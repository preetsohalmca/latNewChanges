<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Volvo.NVS.Persistence.NHibernate</name>
    </assembly>
    <members>
        <member name="T:Volvo.NVS.Signing.NVSLibrarySigning">
            <summary>
            Providing information about the current NVS Library signing (e.g. signing public key).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Signing.NVSLibrarySigning.PublickKey">
            <summary>
            The public key used by all the library assemblies.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.DatabaseConfigurationBuilder">
            <summary>
            The database configuration builder.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.DatabaseConfigurationBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Config.DatabaseConfigurationBuilder"/> class.
            </summary>
            <param name="configName">
            The database configuration name. Empty by default, should be used in case of configuring more than one databases.
            </param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.DatabaseConfigurationBuilder.SetProperty(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.DatabaseConfigurationBuilder.AddAssembly(System.Reflection.Assembly,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.DatabaseConfigurationBuilder.SchemaExport(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.IDatabaseConfigurationBuilder">
            <summary>
            The database configuration builder interface. Allows configuration of the database connection in a fluent way where
            configuration directives can be chained together.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.IDatabaseConfigurationBuilder.SetProperty(System.String,System.String)">
            <summary>
            Sets a value for the configuration property.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The value to set.</param>
            <returns>The database configuration builder instance.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.IDatabaseConfigurationBuilder.AddAssembly(System.Reflection.Assembly,System.Nullable{System.Boolean})">
            <summary>
            Adds all mapping classes found in the given assembly into the configuration.
            </summary>
            <param name="assembly">The assembly to scan.</param>
            <param name="autoImport">
            Specifies whether the unqualified class names should be used for the classes in mappings.
            </param>
            <returns>The database configuration builder instance.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.IDatabaseConfigurationBuilder.SchemaExport(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes the schema export, which can either output the schema or execute the Data Definition Language (DDL) against
            the database, depending on the configuration set.
            </summary>
            <param name="useStandardOutput">
            If set to <see langword="true"/> indicates that the generated schema should be print to standard output (console).
            </param>
            <param name="execute">
            If set to <see langword="true"/> indicates that the generated schema DDL should be executed.
            </param>
            <param name="executeOnlyDrops">
            If set to <see langword="true"/> indicates that only the <c>DROP</c> statements of the generated schema should be
            executed.</param>
            <returns>The database configuration builder instance.</returns>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.INHibernateMappingConfiguration">
            <summary>
            The NHibernate mapping configuration interface.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Config.INHibernateMappingConfiguration.MappingElements">
            <summary>
            Gets the list of mapping elements.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceConfigurationData">
            <summary>
            The persistence configuration data interface.
            </summary>
            <remarks>
            <para>
            The Persistence Library allows multiple databases configurations to be set, one for each database connection.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceConfigurationData"/> interface implementation holds all configuration objects set via the
            persistence library configurator (<see cref="T:Volvo.NVS.Core.Configuration.PersistenceLibraryConfigurator"/>).
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceConfigurationData.GetConfiguration(System.String)">
            <summary>
            Gets the NHibernate configuration identified by the given name.
            </summary>
            <param name="configName">
            The database configuration name. Empty by default, should be used in case of configuring more than one databases.
            </param>
            <returns>The NHibernate configuration.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceConfigurationData.SetProperty(System.String,System.String,System.String)">
            <summary>
            Sets a value for the configuration property.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The value to set.</param>
            <param name="configName">
            The database configuration name. Empty by default, should be used in case of configuring more than one databases.
            </param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceConfigurationData.AddAssembly(System.Reflection.Assembly,System.Nullable{System.Boolean},System.String)">
            <summary>
            Adds all mapping classes found in the given assembly into the configuration.
            </summary>
            <param name="assembly">The assembly to scan.</param>
            <param name="autoImport">
            Specifies whether the unqualified class names should be used for the classes in mappings.
            </param>
            <param name="configName">
            The database configuration name. Empty by default, should be used in case of configuring more than one databases.
            </param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceConfigurationData.SchemaExport(System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Executes the schema export, which can either output the schema or execute the Data Definition Language (DDL) against
            the database, depending on the configuration set.
            </summary>
            <param name="useStandardOutput">
            If set to <see langword="true"/> indicates that the generated schema should be print to standard output (console).
            </param>
            <param name="execute">
            If set to <see langword="true"/> indicates that the generated schema DDL should be executed.
            </param>
            <param name="executeOnlyDrops">
            If set to <see langword="true"/> indicates that only the <c>DROP</c> statements of the generated schema should be
            executed.</param>
            <param name="configName">
            The database configuration name. Empty by default, should be used in case of configuring more than one databases.
            </param>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceLibraryConfigurationBuilder">
            <summary>
            The persistence library configuration builder interface.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceLibraryConfigurationBuilder.ConfigureDatabase(System.Action{Volvo.NVS.Persistence.NHibernate.Config.IDatabaseConfigurationBuilder},System.String)">
            <summary>
            Configures settings for the given database.
            </summary>
            <param name="builder">The builder responsible for setting the database configurations.</param>
            <param name="configName">
            The database configuration name. Empty by default, should be used in case of configuring more than one databases.
            </param>
            <returns>The persistence library configuration builder instance.</returns>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingCollection">
            <summary>
            Managing and mapping elements.
            </summary>
            <seealso cref="T:System.Configuration.ConfigurationElementCollection" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingCollection.CreateNewElement">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingConfiguration">
            <summary>
            The NHibernate mapping configuration.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingConfiguration.MappingElements">
            <summary>
            Gets the mapping elements.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingConfiguration.Volvo#NVS#Persistence#NHibernate#Config#INHibernateMappingConfiguration#MappingElements">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingElement">
            <summary>
            The NHibernate mapping element.
            </summary>
            <seealso cref="T:System.Configuration.ConfigurationElement" />
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingElement.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingElement.Name">
            <summary>
            Gets or sets the name of the session into which the configuration applies. Empty when it is for the default session
            factory.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingSection">
            <summary>
            The NHibernate mapping section.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Config.NHibernateMappingSection.MappingCollection">
            <summary>
            Gets the mapping collection.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationContext">
            <summary>
            The persistent configuration context.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationContext.Current">
            <summary>
            Gets the persistence configuration data or <see langword="null"/> when no data has been configured.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationContext.EnsureCurrent">
            <summary>
            Creates current instance of <see cref="T:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationData"/> if it not exists.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationData">
            <summary>
            The persistence configuration data.
            </summary>
            <remarks>
            <para>
            The Persistence Library allows multiple databases configurations to be set, one for each database connection.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Persistence.NHibernate.Config.IPersistenceConfigurationData"/> interface implementation holds all configuration objects set via the
            persistence library configurator (<see cref="T:Volvo.NVS.Core.Configuration.PersistenceLibraryConfigurator"/>).
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationData.GetConfiguration(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationData.SetProperty(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationData.AddAssembly(System.Reflection.Assembly,System.Nullable{System.Boolean},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.PersistenceConfigurationData.SchemaExport(System.Boolean,System.Boolean,System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Config.PersistenceLibraryConfigurationBuilder">
            <summary>
            Builder responsible for configuring the persistence library.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Config.PersistenceLibraryConfigurationBuilder.ConfigureDatabase(System.Action{Volvo.NVS.Persistence.NHibernate.Config.IDatabaseConfigurationBuilder},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Entities.EventListener">
            <summary>
            Actions to be taken on specific NHibernate events.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.EventListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Entities.EventListener"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.EventListener.#ctor(Volvo.NVS.Persistence.NHibernate.Entities.IStamper)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Entities.EventListener" /> class.
            </summary>
            <param name="stamper">The stamper.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.EventListener.OnPreInsert(NHibernate.Event.PreInsertEvent)">
            <summary>
            Calls stamp methods to auto stamp feature in the insert data in database.
            </summary>
            <param name="event">The <see cref="T:NHibernate.Event.PreInsertEvent"/> event.</param>
            <returns>
            Auto-stamp result or <see langword="false"/> if entity is not <see cref="T:Volvo.NVS.Persistence.Entities.IStampedEntity"/> or
            <see cref="T:Volvo.NVS.Persistence.Entities.IExpireEntity"/>.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.EventListener.OnPreUpdate(NHibernate.Event.PreUpdateEvent)">
            <summary>
            Calls stamp methods to auto stamp feature in the update data in database.
            </summary>
            <param name="event">The <see cref="T:NHibernate.Event.PreUpdateEvent"/> event.</param>
            <returns>
            Auto-stamp result or <see langword="false"/> if entity is not <see cref="T:Volvo.NVS.Persistence.Entities.IStampedEntity"/> or
            <see cref="T:Volvo.NVS.Persistence.Entities.IExpireEntity"/>.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1">
            <summary>
            Provides a generic base class for your objects which will be persisted to the database.
            Benefits include the addition of an Id property along with a consistent manner for comparing
            entities. All properties are virtual to allow NHibernate-backed objects to be lazily loaded.
            </summary>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <seealso cref="T:System.Int64" />
        </member>
        <member name="F:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1.cachedHashcode">
            <summary>
            The cached hash code.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1.Id">
            <inheritdoc/>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1.Version">
            <summary>
            Gets or sets the version of the entity, used for concurrency control.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1.IsTransient">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1.GetTypeSpecificSignatureProperties">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1.HasSameNonDefaultIdAs(Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity{`0})">
            <summary>
            Returns <see langword="true"/> if self and the provided entity have the same ID values and the IDs are not of the
            default ID value.
            </summary>
            <param name="compareTo">The entity to compare to.</param>
            <returns><see langword="true"/> if has same non default ID; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity">
            <summary>
            Provides a base class for your objects which will be persisted to the database.
            Benefits include the addition of an Id property along with a consistent manner for comparing
            entities. All properties are virtual to allow NHibernate-backed objects to be lazily loaded.
            </summary>
            <seealso cref="T:Volvo.NVS.Persistence.NHibernate.Entities.GenericEntity`1" />
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Entities.IStamper">
            <summary>
            Interface for stamping feature.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.IStamper.Insert(Volvo.NVS.Persistence.Entities.IStampedEntity,System.Collections.Generic.IList{System.Object},NHibernate.Persister.Entity.IEntityPersister)">
            <summary>
            Sets data in the variables in an insert operation.
            </summary>
            <param name="entity">The entity.</param>
            <param name="state">The state.</param>
            <param name="persister">The persister.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.IStamper.Update(Volvo.NVS.Persistence.Entities.IStampedEntity,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object},NHibernate.Persister.Entity.IEntityPersister)">
            <summary>
            Sets data in the variables in an update operation.
            </summary>
            <param name="entity">The entity.</param>
            <param name="oldState">The old state.</param>
            <param name="state">The state.</param>
            <param name="persister">The persister.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.IStamper.Insert(Volvo.NVS.Persistence.Entities.IExpireEntity,System.Collections.Generic.IList{System.Object},NHibernate.Persister.Entity.IEntityPersister)">
            <summary>
            Set data in the variables in an update operation.
            </summary>
            <param name="entity">The entity.</param>
            <param name="state">The state.</param>
            <param name="persister">The persister.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.IStamper.Update(Volvo.NVS.Persistence.Entities.IExpireEntity,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object},NHibernate.Persister.Entity.IEntityPersister)">
            <summary>
            Set data in the variables in an update operation.
            </summary>
            <param name="entity">The entity.</param>
            <param name="oldState">The old state.</param>
            <param name="state">The state.</param>
            <param name="persister">The persister.</param>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Entities.Stamper">
            <summary>
            Class responsible for the stamp feature.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.Stamper.Insert(Volvo.NVS.Persistence.Entities.IStampedEntity,System.Collections.Generic.IList{System.Object},NHibernate.Persister.Entity.IEntityPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.Stamper.Update(Volvo.NVS.Persistence.Entities.IStampedEntity,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object},NHibernate.Persister.Entity.IEntityPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.Stamper.Insert(Volvo.NVS.Persistence.Entities.IExpireEntity,System.Collections.Generic.IList{System.Object},NHibernate.Persister.Entity.IEntityPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Entities.Stamper.Update(Volvo.NVS.Persistence.Entities.IExpireEntity,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object},NHibernate.Persister.Entity.IEntityPersister)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Extensions.PredicateExtensions">
            <summary>
            The predicate extensions.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Extensions.PredicateExtensions.ToFunc``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Converts predicate expression to function expression.
            </summary>
            <typeparam name="TEntity">The type of the predicate.</typeparam>
            <param name="predicate">The predicate expression to convert.</param>
            <returns>The function expression.</returns>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Log.NHLogHandlerEventArgs">
            <summary>
            NHibernate Log Handler class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Log.NHLogHandlerEventArgs.#ctor(NHibernate.SqlCommand.SqlString)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Log.NHLogHandlerEventArgs"/> class.
            </summary>
            <param name="sql">The SQL string.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Log.NHLogHandlerEventArgs.SqlString">
            <summary>
            Gets the new status of the channel.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Log.NHSqlInterceptor">
            <summary>
            SQL Interceptor class to generate NHibernate based SQL queries.
            </summary>
        </member>
        <member name="E:Volvo.NVS.Persistence.NHibernate.Log.NHSqlInterceptor.LogHandler">
            <summary>
            Handler for NHibernate generated SQL queries.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Log.NHSqlInterceptor.IsSqlLoggerEnabled">
            <summary>
            Gets a value indicating whether SQL logger is enabled.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Log.NHSqlInterceptor.OnNHGeneratedSqlLogHandler(NHibernate.SqlCommand.SqlString)">
            <summary>
            Event for NHibernate generated SQL queries.
            </summary>
            <param name="sql">The SQL string.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Log.NHSqlInterceptor.OnPrepareStatement(NHibernate.SqlCommand.SqlString)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryAutoSetParameters`1">
            <summary>
            Helper class that sets the parameters for a named query with reflection.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1" />
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryAutoSetParameters`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryAutoSetParameters`1"/> class.
            </summary>
            <param name="name">The unique name of the session.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryAutoSetParameters`1.SetParameters(NHibernate.IQuery)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryListResult`1">
            <summary>
            Helper class that executes a query that is expected to return a list of items.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryListResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryListResult`1"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryListResult`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryListResult`1"/> class.
            </summary>
            <param name="name">The unique session name.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryListResult`1.Execute(NHibernate.IQuery)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryUniqueResult`1">
            <summary>
            Helper class that executes a query that is expected to return a single item.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryUniqueResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryUniqueResult`1"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryUniqueResult`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryUniqueResult`1"/> class.
            </summary>
            <param name="name">The unique session name.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryUniqueResult`1.Execute(NHibernate.IQuery)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1">
            <summary>
            The basic abstract Query Object that wraps a named query.
            When creating a Query Object for a named query, you can inherit from this base class. You must override the methods
            Execute and SetParameters. An easier alternative is to use one of the helper classes, NamedQueryUniqueResult or
            NamedQueryListResult, depending on the result set of the query.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="F:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.session">
            <summary>
            The associated session with the query.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1"/> class.
            </summary>
            <param name="name">The unique name of the session.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.MaxResult">
            <summary>
            Gets or sets the maximum result.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.QueryName">
            <summary>
            Gets the name of the query. The convention is that the Query Object and the Named Query share the same name.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.Execute">
            <summary>
            Coordinates the execution flow.
            </summary>
            <returns>
            The result of the activity’s execution.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.Execute(NHibernate.IQuery)">
            <summary>
            Override to execute the query. Often just a call to query.List() or query.UniqueResult().
            </summary>
            <param name="query">The query.</param>
            <returns>
            The result of the activity’s execution.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.GetNamedQuery">
            <summary>
            Returns the query.
            </summary>
            <returns> An <see cref="T:NHibernate.IQuery"/> from a named query string.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.SetMaxResult(NHibernate.IQuery)">
            <summary>
            Sets the maximum number of records to retrieve.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.NamedQuery.NamedQueryBase`1.SetParameters(NHibernate.IQuery)">
            <summary>
            Override to set the parameters in the query.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.Constants">
            <summary>
            The repositories constants.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Persistence.NHibernate.Repositories.Constants.DefaultBatchSize">
            <summary>
            The default batch size.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Persistence.NHibernate.Repositories.Constants.EagerLoadFetchSingleInitialMethodName">
            <summary>
            The eager-load fetch single method name (initial fetch).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Persistence.NHibernate.Repositories.Constants.EagerLoadFetchManyInitialMethodName">
            <summary>
            The eager-load fetch many method name (initial fetch).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Persistence.NHibernate.Repositories.Constants.EagerLoadFetchSingleSubsequentMethodName">
            <summary>
            The eager-load fetch single method name (subsequent fetch).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Persistence.NHibernate.Repositories.Constants.EagerLoadFetchManySubsequentMethodName">
            <summary>
            The eager-load fetch many method name (subsequent fetch).
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2">
            <summary>
            Generic implementation of the CRUD methods using NHibernate.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the ID of <typeparamref name="TEntity"/>.</typeparam>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2"/> class.
            </summary>
            <param name="name">The name of the session.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.Session">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.Save(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.Save(System.Collections.Generic.IList{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.Merge(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.Remove(System.Collections.Generic.IList{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.BulkInsert(System.Collections.Generic.IList{`0},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.BulkUpdate(System.Collections.Generic.IList{`0},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`2.BulkDelete(System.Collections.Generic.IList{`0},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`1">
            <summary>
            Specialized implementation using <see cref="T:System.Int64"/> as ID type (as it is the most common id type).
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`1" /> class.
            </summary>
            <param name="name">The session name.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericRepository`1"/> class.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSetType`1">
            <summary>
            The generic set type that maps an <see cref="T:System.Collections.Generic.ISet`1" /> collection to the database.
            </summary>
            <typeparam name="TEntity">The type of set set entity.</typeparam>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSetType`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSetType`1"/> class.
            </summary>
            <param name="role">The role the persistent collection is in.</param>
            <param name="propertyRef">
            The name of the property in the owner object containing the collection ID, or <see langword="null" /> if it is the
            primary key.
            </param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSetType`1.ReturnedClass">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSetType`1.Instantiate(NHibernate.Engine.ISessionImplementor,NHibernate.Persister.Collection.ICollectionPersister,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSetType`1.Wrap(NHibernate.Engine.ISessionImplementor,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSetType`1.Instantiate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSortedSetType`1">
            <summary>
            Helps to sort a set.
            </summary>
            <typeparam name="TEntity">The type of the set entity.</typeparam>
            <seealso cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSetType`1" />
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSortedSetType`1.#ctor(System.String,System.String,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSortedSetType`1" /> class.
            </summary>
            <param name="role">The role the persistent collection is in.</param>
            <param name="propertyRef">The property reference.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSortedSetType`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.GenericSortedSetType`1.Instantiate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.Net4CollectionTypeFactory">
            <summary>
            Inherits class <see cref="T:NHibernate.Type.DefaultCollectionTypeFactory" /> and overrides <see cref="M:Volvo.NVS.Persistence.NHibernate.Repositories.Net4CollectionTypeFactory.Set``1(System.String,System.String,System.Boolean)"/> and
            <see cref="M:Volvo.NVS.Persistence.NHibernate.Repositories.Net4CollectionTypeFactory.SortedSet``1(System.String,System.String,System.Boolean,System.Collections.Generic.IComparer{``0})"/> methods.
            </summary>
            <seealso cref="T:NHibernate.Type.DefaultCollectionTypeFactory" />
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.Net4CollectionTypeFactory.Set``1(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.Net4CollectionTypeFactory.SortedSet``1(System.String,System.String,System.Boolean,System.Collections.Generic.IComparer{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1">
            <summary>
            A persistent wrapper for an <see cref="T:System.Collections.Generic.ISet`1" />
            </summary>
            <typeparam name="TEntity">The type of the set entity.</typeparam>
            <seealso cref="T:System.Collections.Generic.ISet`1" />
        </member>
        <member name="F:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.tempList">
            <summary>
            A temporary list that holds the objects while the PersistentSet is being populated from the database.
            </summary>
            <remarks>
            This is necessary to ensure that the object being added to the PersistentSet doesn't have its
            <see cref="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetHashCode"/> and <see cref="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Equals(System.Object)"/> methods called during the load.
            process.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.#ctor(NHibernate.Engine.ISessionImplementor)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1"/> class.
            </summary>
            <param name="session">The session to which this set will belong. </param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.#ctor(NHibernate.Engine.ISessionImplementor,System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1"/> class.
            </summary>
            <param name="session">The session to which this set will belong. </param>
            <param name="original">The underlying set data. </param>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ISetSnapshot`1">
            <summary>
            The set snapshot interface.
            </summary>
            <typeparam name="TSnapshotEntity">The type of set snapshot entity.</typeparam>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ISetSnapshot`1.Item(`1)">
            <summary>
            Gets the snapshot.
            </summary>
            <param name="element">The shapshot entity.</param>
            <returns>The snapshot for the given entity.</returns>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.RowUpdatePossible">
            <inheritdoc/>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Empty">
            <inheritdoc/>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SyncRoot">
            <summary>
            Gets the synchronize root.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Set">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.ISet`1"/> that NHibernate is wrapping.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Contains(`0)">
            <summary>
            Determines whether the set contains given object.
            </summary>
            <param name="item">The object to test.</param>
            <returns>A flag indicating whether the object is contained within the set.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Add(`0)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="item">The object to add.</param>
            <returns><see langword="true"/> if added; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Unions the with.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Intersects the with.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Excepts the with.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Symmetric the except with.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the enumerable is a subset of the set.
            </summary>
            <param name="other">The enumerable to check.</param>
            <returns><see langword="true"/> if enumerable is a subset; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the enumerable is a superset of the set.
            </summary>
            <param name="other">The enumerable to check.</param>
            <returns><see langword="true"/> if enumerable is a superset; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the enumerable is a proper superset of the set.
            </summary>
            <param name="other">The enumerable to check.</param>
            <returns><see langword="true"/> if enumerable is a proper superset; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the enumerable is a proper subset of the set.
            </summary>
            <param name="other">The enumerable to check.</param>
            <returns><see langword="true"/> if enumerable is a proper subset; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if the given enumerable is overlapping the set.
            </summary>
            <param name="other">The enumerable to check.</param>
            <returns><see langword="true"/> if enumerable is overlapping; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the equals.
            </summary>
            <param name="other">The enumerable to check.</param>
            <returns><see langword="true"/> if the current set is equal to other; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Remove(`0)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="item">The object to remove.</param>
            <returns>Removal status.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.System#Collections#Generic#ICollection{TEntity}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetSnapshot(NHibernate.Persister.Collection.ICollectionPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetOrphans(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.EqualsSnapshot(NHibernate.Persister.Collection.ICollectionPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsSnapshotEmpty(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.BeforeInitialize(NHibernate.Persister.Collection.ICollectionPersister,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.InitializeFromCache(NHibernate.Persister.Collection.ICollectionPersister,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ReadFrom(System.Data.IDataReader,NHibernate.Persister.Collection.ICollectionPersister,NHibernate.Loader.ICollectionAliases,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.BeginRead">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.EndRead(NHibernate.Persister.Collection.ICollectionPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Entries(NHibernate.Persister.Collection.ICollectionPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Disassemble(NHibernate.Persister.Collection.ICollectionPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetDeletes(NHibernate.Persister.Collection.ICollectionPersister,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.NeedsInserting(System.Object,System.Int32,NHibernate.Type.IType)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.NeedsUpdating(System.Object,System.Int32,NHibernate.Type.IType)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetIndex(System.Object,System.Int32,NHibernate.Persister.Collection.ICollectionPersister)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetElement(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetSnapshotElement(System.Object,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Read">
            <summary>
            Called by any read-only method of the collection interface.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.EntryExists(System.Object,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.IsWrapper(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleRemoveDelayedOperation">
            <summary>
            The delayed removal operations and initializations.
            </summary>
            <seealso cref="T:NHibernate.Collection.AbstractPersistentCollection" />
            <seealso cref="T:System.Collections.Generic.ISet`1" />
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleRemoveDelayedOperation.#ctor(Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleRemoveDelayedOperation"/> class.
            </summary>
            <param name="enclosingInstance">The enclosing instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleRemoveDelayedOperation.AddedInstance">
            <summary>
            Gets the added instance.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleRemoveDelayedOperation.Orphan">
            <summary>
            Gets the orphan.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleRemoveDelayedOperation.Operate">
            <summary>
            Operates this instance.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleAddDelayedOperation">
            <summary>
            The delayed operations and initializations.
            </summary>
            <seealso cref="T:NHibernate.Collection.AbstractPersistentCollection" />
            <seealso cref="T:System.Collections.Generic.ISet`1" />
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleAddDelayedOperation.#ctor(Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleAddDelayedOperation"/> class.
            </summary>
            <param name="enclosingInstance">The enclosing instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleAddDelayedOperation.AddedInstance">
            <summary>
            Gets the added instance.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleAddDelayedOperation.Orphan">
            <summary>
            Gets the orphan.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SimpleAddDelayedOperation.Operate">
            <summary>
            Operates this instance.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ClearDelayedOperation">
            <summary>
            The appropriate initializations.
            </summary>
            <seealso cref="T:NHibernate.Collection.AbstractPersistentCollection" />
            <seealso cref="T:System.Collections.Generic.ISet`1" />
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ClearDelayedOperation.#ctor(Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ClearDelayedOperation"/> class.
            </summary>
            <param name="enclosingInstance">The enclosing instance.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ClearDelayedOperation.AddedInstance">
            <summary>
            Gets the added instance.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ClearDelayedOperation.Orphan">
            <summary>
            Gets the orphan.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.ClearDelayedOperation.Operate">
            <summary>
            Operates this instance.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized
            (thread safe).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.System#Collections#Generic#ICollection{TSetType}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.Item(`1)">
            <summary>
            Gets the set type with the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>The set type.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.Add(`1)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            <see langword="true"/> if <paramref name="item" /> is found in the
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.CopyTo(`1[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.Remove(`1)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="item" /> was successfully removed from the
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false"/>. This method also
            returns <see langword="false"/> if <paramref name="item" /> is not found in the original
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.PersistentGenericSet`1.SetSnapShot`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />,
            starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from
            <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`1">
            <summary>
            The read-only repository. This is a specialized implementation, using <see cref="T:System.Int64"/> as ID.
            </summary>
            <typeparam name="TEntity">The type of the entity for which specification is given.</typeparam>
            <seealso cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2"/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`1"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`1"/> class.
            </summary>
            <param name="name">The name of the session. </param>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2">
            <summary>
            The read-only repository. This is a specialized implementation, using <see cref="T:System.Int64"/> as ID.
            </summary>
            <typeparam name="TEntity">The type of the entity for which specification is given.</typeparam>
            <typeparam name="TId">The type of the ID of <typeparamref name="TEntity"/>.</typeparam>
            <seealso cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`1"/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2"/> class.
            </summary>
            <param name="name">The name of the session.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Session">
            <summary>
            Gets the NHibernate session.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.SessionName">
            <summary>
            Gets or sets the name of the session when multiple sessions are in use.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Refresh(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Evict(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Evict(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove a list of entities from the session cache.
            </summary>
            <param name="entities">List of entities.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(`1,NHibernate.LockMode)">
            <summary>
            Finds the entity based on its ID. Returns <see langword="null"/> if the entity could not be found.
            </summary>
            <param name="entityId">The ID of the entity.</param>
            <param name="lockMode">The lock mode.</param>
            <returns>The entity with the given ID.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Load(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Load(`1,NHibernate.LockMode)">
            <summary>
            Loads the entity based on its ID. Throws an exception if the entity is not found.
            </summary>
            <param name="entityId">The ID of the entity.</param>
            <param name="lockMode">The lock mode.</param>
            <returns>The entity with the given ID.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.FindAll">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.FindAll(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.FindUnique(Volvo.NVS.Persistence.Specifications.ISpecification{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},System.Int32,System.Int32,Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},System.Int32,System.Int32,Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},System.Int32,System.Int32,Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},System.Int32,System.Int32,Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},System.Int32,System.Int32,Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Find``1(Volvo.NVS.Persistence.Specifications.ISpecification{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0},Volvo.NVS.Persistence.Specifications.ISortSpecification{`0},System.Int32,System.Int32,Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Count">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Count(Volvo.NVS.Persistence.Specifications.ISpecification{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Retrieve(Volvo.NVS.Persistence.Specifications.ISpecification{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Query(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Builds the query and evaluates it.
            </summary>
            <param name="specification">The filter specification.</param>
            <param name="fetchSpecifications">
            The enumerable of fetch specification describing which data should be eagerly loaded.
            </param>
            <param name="sortSpecifications">The enumerable of sort specification describing how data should be sorted.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>The data for the query.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.Group``1(System.Collections.Generic.IEnumerable{`0},Volvo.NVS.Persistence.Specifications.IGroupSpecification{`0,``0})">
            <summary>
            Builds the query and evaluates it.
            </summary>
            <typeparam name="TGroup">The type of the group.</typeparam>
            <param name="data">The data to be grouped.</param>
            <param name="groupSpecification">The group specification describing how data should be grouped.</param>
            <returns>The grouped data.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.BuildQuery(Volvo.NVS.Persistence.Specifications.ISpecification{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Builds the query based on filter specification data and eager loading specification data.
            </summary>
            <param name="specification">The filter specification.</param>
            <param name="fetchSpecifications">
            The enumerable of fetch specification describing which data should be eagerly loaded.
            </param>
            <param name="sortSpecifications">The enumerable of sort specification describing how data should be sorted.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>The query to get the data matching filter and eager loading specifications.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.ApplyFiltering(System.Linq.IQueryable{`0},Volvo.NVS.Persistence.Specifications.ISpecification{`0})">
            <summary>
            Applies the filtering on the query data.
            </summary>
            <param name="data">The query data.</param>
            <param name="filterSpecification">The filter specification describing how data should be filtered.</param>
            <returns>The query data with filtering applied.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.ApplyEagerLoading(System.Linq.IQueryable{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0}})">
            <summary>
            Applies eager loading on the query data.
            </summary>
            <param name="data">The query data.</param>
            <param name="fetchSpecifications">
            The enumerable of fetch specification describing which data should be eagerly loaded.
            </param>
            <returns>The query data with eager loading applied.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.ApplyNestedEagerLoading(System.Linq.IQueryable{`0},Volvo.NVS.Persistence.Specifications.IFetchSpecification{`0})">
            <summary>
            Applies nested eager loading on the query data.
            </summary>
            <param name="data">The query data.</param>
            <param name="fetchSpecification">The fetch specification describing which data should be eagerly loaded.</param>
            <returns>The query data with eager loading applied.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.ApplyPaging(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            Applies the paging.
            </summary>
            <param name="data">The query data.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>The query data with paging applied.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.ReadOnlyRepository`2.ApplySorting(System.Linq.IQueryable{`0},System.Collections.Generic.IEnumerable{Volvo.NVS.Persistence.Specifications.ISortSpecification{`0}})">
            <summary>
            Applies the sorting.
            </summary>
            <param name="data">The query data.</param>
            <param name="sortSpecifications">The enumerable of sort specification describing how data should be sorted.</param>
            <returns>The query data with sorting applied.</returns>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration">
            <summary>
            Extends the NHibernate configuration so one may use multiple configuration nodes in the single configuration file.
            Each configuration node will have its unique name which maps into the named session factory, named session. That
            way it is possible to configure multiple session factories for multiple databases.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration"/> class.
            </summary>
            <param name="name">The name of the session.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.Name">
            <summary>
            Gets the unique name of the configuration node or empty when default one should be used.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.op_Equality(Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration,Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration)">
            <summary>
            Compares two session configurations for equality.
            </summary>
            <param name="left">The first session configuration.</param>
            <param name="right">The second session configuration.</param>
            <returns>
            <see langword="true"/> if the configuration are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.op_Inequality(Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration,Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration)">
            <summary>
            Compares two session configurations for inequality.
            </summary>
            <param name="left">The first session configuration.</param>
            <param name="right">The second session configuration.</param>
            <returns>
            <see langword="true"/> if the configuration are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.ConfigureFromNamedNode">
            <summary>
            Perform the configuration using the node from the application configuration file with the provided name.
            </summary>
            <returns>Initialized configuration.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.Equals(Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionConfiguration.InitializeConfiguration(NHibernate.Cfg.Configuration)">
            <summary>
            Initialize the given configuration adding code based mappings and setting cache defaults.
            </summary>
            <param name="configuration">The configuration to be initialized and loaded.</param>
            <returns>Initialized configuration.</returns>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider">
            <summary>
            The NHibernate session provider managing session factories and delivering sessions.
            </summary>
            <remarks>
            <para>
            The session provider manages from 0-N session factories which are later used in order to create sessions. Multiple
            session factories are used so one may use multiple database in the project when this is required.
            </para>
            <para>
            Each session factory is identified by its name. By default the empty string is used as the name. This is in case where
            the single session factory is used in the solution meaning there is only one database and a single database connection
            can be used.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.GetOrAddSessionFactory(System.String,NHibernate.Cfg.Configuration)">
            <summary>
            Gets the existing session factory or creates a new one when it is not created yet.
            Note the configuration priority: specified by parameter, by code, by XML.
            </summary>
            <param name="name">The name of the session factory to be created.</param>
            <param name="existingConfiguration">
            The existing NHibernate configuration to be used to created the session factory when it does not exist.
            </param>
            <returns>The named session factory object.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.GetExistingSessionFactory(System.String)">
            <summary>
            Gets the existing session factory.
            </summary>
            <param name="name">The name of the session factory to be created.</param>
            <returns>The named session factory object.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.InitializeFactory">
            <summary>
            Force initialization of the default (not named) session factory.
            </summary>
            <returns>The named session factory object.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.InitializeFactory(NHibernate.Cfg.Configuration,System.String)">
            <summary>
            Force initialization of the default (not named) session factory.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="name">The name of the session.</param>
            <returns>The named session factory object.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.InitializeFactory(NHibernate.ISessionFactory,System.String)">
            <summary>
            Force initialization of the default (not named) session factory.
            </summary>
            <param name="sessionFactory">The session factory.</param>
            <param name="name">The name of the session.</param>
            <returns>The named session factory object.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.GetSessionFactory(System.String)">
            <summary>
            Provides the named session factory.
            </summary>
            <param name="name">The name of the session for which the factory should be provided.</param>
            <returns>The named session factory object.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.ValidateCurrentSessionContext(NHibernate.ISessionFactory,System.String)">
            <summary>
            Validate the currently configured and used session context in relation to the name of the session factory.
            </summary>
            <param name="factory">The current session factory.</param>
            <param name="name">The name of the session factory.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.GetNewOrCurrentSession(System.String)">
            <summary>
            Returns the existing named and bound session or creates a new one and binds it in
            <see cref="T:NHibernate.Context.CurrentSessionContext"/>.
            </summary>
            <param name="name">Name of the session.</param>
            <returns>The current session.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.DisposeSession(System.String)">
            <summary>
            Returns the existing session, closes the session and unbind it from <see cref="T:NHibernate.Context.CurrentSessionContext"/>.
            </summary>
            <param name="sessionName">Name of the session.</param>
            <exception cref="T:System.InvalidOperationException">Session Name is null.</exception>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.GetNewSession(System.String)">
            <summary>
            Creates a new named session with out-binding in <see cref="T:NHibernate.Context.CurrentSessionContext"/>.
            </summary>
            <param name="name">Name of the session.</param>
            <returns>The named session factory object.</returns>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.Repositories.SessionProvider.GetNewStatelessSession(System.String)">
            <summary>
            Creates a new named stateless session without binding in <see cref="T:NHibernate.Context.CurrentSessionContext"/>.
            </summary>
            <param name="name">Name of the session.</param>
            <returns>The named session factory object.</returns>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession">
            <summary>
            The NHibernate session context object that opens a NHibernate session and closes it when instance of
            <see cref="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession"/> is disposed. This class is obsolete. <see cref="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext"/> should
            be used instead.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession.#ctor(System.String,System.Nullable{System.Transactions.TransactionScopeOption})">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession"/> class.
            </summary>
            <param name="sessionName">The name of the session.</param>
            <param name="option">The transaction scope option.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateNonGuiSession.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> if disposing has been invoked by using clause; <see langword="false"/> if disposing has been
            invoked by destructor.
            </param>
        </member>
        <member name="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext">
            <summary>
            The NHibernate session context object that opens a NHibernate session and closes it when instance of
            <see cref="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext"/> is disposed.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext"/> class.
            </summary>
            <param name="sessionName">The name of the session.</param>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Volvo.NVS.Persistence.NHibernate.SessionHandling.NHibernateSessionContext.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> if disposing has been invoked by using clause; <see langword="false"/> if disposing has been
            invoked by destructor.
            </param>
        </member>
        <member name="T:Volvo.NVS.Core.Configuration.PersistenceLibraryConfigurator">
            <summary>
            Extends the common <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/> interface with the NVS Persistence Library configuration methods.
            </summary>
            <remarks>
            You never use this type directly. You use extensions methods provided by this class via types implementing the
            <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/> which is extended by the <see cref="T:Volvo.NVS.Core.Configuration.PersistenceLibraryConfigurator"/>.
            </remarks>
            <seealso cref="T:Volvo.NVS.Core.Configuration.LibraryConfigurator"/>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.PersistenceLibraryConfigurator.ConfigurePersistence(Volvo.NVS.Core.Configuration.ILibraryConfigurator,System.Action{Volvo.NVS.Persistence.NHibernate.Config.IPersistenceLibraryConfigurationBuilder})">
            <summary>
            Applies settings to persistence configuration.
            </summary>
            <param name="configurator">The configurator.</param>
            <param name="builder">The builder that will apply settings to the persistence configuration.</param>
            <returns>The library configurator instance.</returns>
        </member>
    </members>
</doc>
