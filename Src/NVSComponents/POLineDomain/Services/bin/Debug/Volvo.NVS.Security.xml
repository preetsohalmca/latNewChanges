<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Volvo.NVS.Security</name>
    </assembly>
    <members>
        <member name="T:Volvo.NVS.Signing.NVSLibrarySigning">
            <summary>
            Providing information about the current NVS Library signing (e.g. signing public key).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Signing.NVSLibrarySigning.PublickKey">
            <summary>
            The public key used by all the library assemblies.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute">
            <summary>
            The Unity based authorization attribute that verifies the current <see cref="T:System.Security.Principal.IPrincipal"/> resolved from the current <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/>.
            </summary>
            <remarks>
            <para>
            This attribute is commonly applied onto domain service methods in order to secure domains.
            </para>
            <para>
            The attribute is the Unity dependent one and is requiring the Unity interception to be configured and used. The attribute 
            will never be executed when Unity is <b>NOT</b> used or when a type on which it is applied is <b>NOT</b> resolved via the Unity.
            </para>
            <para>
            The attribute can be applied to a method (from an interface or from a class). It is recommended to decorate methods with this CheckAccess
            attribute on the class level in order to keep consistency with other CheckAccess attributes (e.g. MVC Check Access attributes, Net Http 
            CheckAccess attributes) which are directly applied on class methods as well.
            </para>
            <para>
            When this <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> is applied onto domain service methods then it is the domain service class which must be 
            registered and resolved via the Unity. One may use the available helper automating the Unity configuration for CheckAccess attributes 
            applied on the class level. See the <see cref="T:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations"/> for details about the automated Unity 
            configuration and requirements on the class and its methods.
            </para>
            <para>
            For MVC authorization see a specialized attribute from the Security.SystemWeb.Mvc.
            </para>
            <para>
            For Web API authorization a different CheckAccess attribute exists. See the Volvo.Security.NetHttp related assembly for details.
            </para>
            <example>
            <para>
            This sample configures the unity container and setups virtual method interception for all mapped classes having methods decorated with 
            the CheckAccess attribute. The domain service interface is already mapped into the domain class in the unity configuration file:
            </para>
            <code>
            <![CDATA[
            public static class LibraryConfig
            {
               public static void Configure(ILibraryConfigurator configurator)
               {
                  configurator
            
                  // Configure the Container from the current application configuration file which itself is redirecting
                  // into the Unity.config file having all the sample application type mappings defined.
                  .ConfigureContainer(container => container.FromApplicationConfigurationFile())
               
                  // Configure the Security Library
                  .ConfigureSecurity(security =>
                  {
                  
                     // Claims service must be configured for the Security Library. As we are running console
                     // application the Thread Claims Service will be set and used to manage the context. In
                     // web application a different claims service should be used.
                     security.SetClaimsService(service => service.UseThreadClaimsService());
            
                    // We decorate domain service methods with the CheckAccess attributes. Those domain 
                    // service classes are registered within the unity but for the CheckAccess attributes 
                    // to be execute the unity interception for all such classes must be setup.
                    security.SetupUnityInterceptionForCheckAccess();
            
                  });
            
               }
            }
            ]]>
            </code>
            <para>
            The domain service class is decorated with various check access attributes. For example:
            </para>
            <code>
            public class SecuredDomainService : ISecuredDomainService
            {
                  [CheckAccess]
                  public virtual void Action()
                  {
                  }
            }
            </code>
            <para>
            The domain service is always resolved via unity. The virtual method interception (proxy) is generated by the Unity:
            </para>
            <code>
            ISecuredDomainService service = Container.Resolve&lt;ISecuredDomainService&gt;();
            // The call to this action will also execute the CheckAccess attribute logic as the interception is configured
            service.Action();
            </code>
            <para>
            When the Action is called the CheckAccess attribute applied on the method is run. The attribute verifies the authorization.
            The <see cref="T:Volvo.NVS.Security.Exceptions.NotAuthorizedException"/> is thrown when the access is not granted.
            </para>
            </example>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Attributes.CheckAccessAttribute.operation">
            <summary>
            The authorization operation which has been requested (wraps from 0-N operations).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Attributes.CheckAccessAttribute.caller">
            <summary>
            The caller which is used to perform the physical call on the CheckAccess method.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessAttribute.#ctor">
            <summary>
            Specifies that access to a method is restricted to users who meet the authorization requirement.
            </summary>
            <remarks>
            This is the most relaxed check as the system only verifies if there is an authenticated user. No CheckAccess
            method calls are made as the interface implementing the access check is not provided.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessAttribute.#ctor(System.Type)">
            <summary>
            Specifies that access to an action method is restricted to users who meet the authorization requirement.
            </summary>
            <remarks>
            The authorization requirement is examined by the CheckAccess methods implemented on the provided interface type.
            The interface type with the CheckAccess method is specified on the <paramref name="checkAccessType"/>. The attribute will
            create an instance of that type using the Unity Container. It means the unity must be configured and the <paramref name="checkAccessType"/>
            must be correctly registered within the unity container.
            </remarks>
            <param name="checkAccessType">
            The interface type having the CheckAccess method to be executed during the authorization check.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessAttribute.#ctor(System.String,System.Type)">
            <summary>
            Specifies that access to an action method is restricted to users who meet the authorization requirement.
            </summary>
            <remarks>
            The authorization requirement is examined by the CheckAccess methods implemented on the provided interface type.
            The interface type with the CheckAccess method is specified on the <paramref name="checkAccessType"/>. The attribute will
            create an instance of that type using the Unity Container. It means the unity must be configured and the <paramref name="checkAccessType"/>
            must be correctly registered within the unity container.
            </remarks>
            <param name="operation">
            Name of the authorization operation.
            </param>
            <param name="checkAccessType">
            The interface type having the CheckAccess method to be executed during the authorization check.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            Specifies that access to an action method is restricted to users who meet the authorization requirement.
            </summary>
            <remarks>
            The authorization requirement is examined by the CheckAccess methods implemented on the provided interface type.
            The interface type with the CheckAccess method is specified on the <paramref name="checkAccessType"/>. The attribute will
            create an instance of that type using the Unity Container. It means the unity must be configured and the <paramref name="checkAccessType"/>
            must be correctly registered within the unity container.
            </remarks>
            <param name="operation1">
            Name of the first authorization operation.
            </param>
            <param name="operation2">
            Name of the second authorization operation.
            </param>
            <param name="checkAccessType">
            The interface type having the CheckAccess method to be executed during the authorization check.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessAttribute.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>
            Specifies that access to an action method is restricted to users who meet the authorization requirement.
            </summary>
            <remarks>
            The authorization requirement is examined by the CheckAccess methods implemented on the provided interface type.
            The interface type with the CheckAccess method is specified on the <paramref name="checkAccessType"/>. The attribute will
            create an instance of that type using the Unity Container. It means the unity must be configured and the <paramref name="checkAccessType"/>
            must be correctly registered within the unity container.
            </remarks>
            <param name="operation1">
            Name of the first authorization operation.
            </param>
            <param name="operation2">
            Name of the second authorization operation.
            </param>
            <param name="operation3">
            Name of the third authorization operation.
            </param>
            <param name="checkAccessType">
            The interface type having the CheckAccess method to be executed during the authorization check.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessAttribute.Initialize(System.Type,Volvo.NVS.Security.Authorization.ICheckAccessOperation)">
            <summary>
            Initialize the current instance for the given check access type and authorization operation.
            </summary>
            <param name="checkAccessType">
            The interface type having the CheckAccess method to be executed during the authorization check.
            </param>
            <param name="authorizationOperation">
            The operation for which the access has been requested.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessAttribute.CreateHandler(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Creates the handler performing the authorization checks for all the involved calls.
            </summary>
            <param name="container">The current Unity container.</param>
            <returns>The handler performing authorization checks.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Attributes.CheckAccessCallHandler">
            <summary>
            The check access unity call handler participating in the invocation pipeline and adding authorization checks 
            into the current call chain. Check the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> for details.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.Order">
            <summary>
            Gets or sets order in which the handler will be executed.
            </summary>
            <value>Order in which the handler will be executed</value>
        </member>
        <member name="F:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.operation">
            <summary>
            The authorization operation which has been requested (wraps from 0-N operations).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.caller">
            <summary>
            The caller which is used to perform the physical call on the CheckAccess method.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.claimsService">
            <summary>
            The injected claims service to be used.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.#ctor(Volvo.NVS.Security.Authorization.ICheckAccessOperation,Volvo.NVS.Security.Authorization.ICheckAccessCaller)">
            <summary>
            Create the call handler guarding access into the current method.
            </summary>
            <param name="operation">The authorization operation which has been requested (wraps from 0-N operations).</param>
            <param name="caller">The caller which is used to perform the physical call on the CheckAccess method.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.#ctor(Volvo.NVS.Security.Authorization.ICheckAccessOperation,Volvo.NVS.Security.Authorization.ICheckAccessCaller,Volvo.NVS.Security.Claims.IClaimsService)">
            <summary>
            Create the call handler guarding access into the current method.
            </summary>
            <param name="operation">The authorization operation which has been requested (wraps from 0-N operations).</param>
            <param name="caller">The caller which is used to perform the physical call on the CheckAccess method.</param>
            <param name="service">The claims service to be used.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.CreateClaimsService">
            <summary>
            Provide an instance of the claims service.
            </summary>
            <returns>A claims service.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.IsAuthorized(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation)">
            <summary>
            Determines if a user is authorized into the given method invocation.
            </summary>
            <param name="input">The current input, method invocation.</param>
            <returns>True if authorized to perform the call otherwise false.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Attributes.CheckAccessCallHandler.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            The invoke method checking the authorization.
            </summary>
            <param name="input">The current method invocation.</param>
            <param name="getNext">The next handler in the pipeline to be called.</param>
            <returns>The result from the method call.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters">
            <summary>
            Provides configuration for the CheckAccess method parameter type converters which are used by the selected CheckAccess method binders.
            </summary>
            <remarks>
            <para>
            The Security library is delegating authorization checks into the CheckAccess methods. Various authorization CheckAccess
            attributes take a type of the interface on which the CheckAccess method is expected. The attributes construct instances 
            implementing the provided interfaces by usage of the Unity. The attributes run the authorization checks executing the 
            CheckAccess methods on the created instances.
            </para>
            <para>
            The Security library uses the CheckAccess binders in order to bind the arguments from the currently executing method 
            (source, a method on which the CheckAccess attribute is applied) into the CheckAccess method defined on the interface
            (destination, passed as the parameter into the authorization attribute). The binding  between the two occurs and is 
            setup and realized by usage of the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinders"/> class.
            </para>
            <para>
            By default the <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/> binder is used when no custom one is configured.
            </para>
            <para>
            The binder is defined for the complete type, interface on which the CheckAccess method is declared. It means
            a single binder binds arguments from the currently executing method into the given CheckAccess method on the
            specific interface type. All parameters from such interface type must be bound by a single binder and from the
            current method arguments (source).
            </para>
            <para>
            Some of the binders accept and use additional binder converters (when they are configured). The binding converters
            operate on a single argument, parameter type and specify if the two types match, can be converted, translated. It 
            is opposite to the binder itself which operates on the collection of arguments for a specific interface having the
            CheckAccess method.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters"/> class provides configuration for the type converters used by the
            binders. By default no custom converters are defined so when binding occurs the exact match between argument 
            types must be met (between source and destination).
            </para>
            <para>
            The custom converts can be used when for example a translation between the UI model into the domain model is needed or
            when a translation between the two simple types is required.
            </para>
            <para>
            The converters are not used by all the binders. In order to ensure that the current binder uses converters please
            refer into the specific binder class documentation. It is up to the binder to decide if type converters should be called.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters"/> class is not fully thread safe. You should not add any converters while
            other threads are already obtaining and using them.
            </para>
            <para>
            Custom binders can be added using the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters"/> class directly. It is also possible to configure
            and add them using one on the Security Library fluent method configurations. <b>Configuration by usage of the fluent methods and
            a common, cross library configuration interface is recommended.</b> See also the <see cref="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurator"/>.
            </para>
            <example>
            <para>
            The sample adds a custom converter knowing how to translate the SampleModel into the Sample type. When such a converter
            is defined the CheckAccess method from the authorization related interface may take parameter of type Sample even if
            the currently executing method on which the CheckAccess attribute is applied takes it as SampleModel. The binder will
            do the translation using the configured converter: SampleModel -> Sample:
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters"/> class can be used directly in order to add a converted:
            </para>
            <code>
            // Define the converter, translation from SampleModel to Sample
            CheckAccessBinderConverters.Add(typeof(SampleModel), typeof(Sample), new SampleModelConverter());
            </code>
            <para>
            The fluent library configuration can also be used (recommended) to perform the same configuration:
            </para>
            <code>
            <![CDATA[
            public static class LibraryConfig
            {
               public static void Configure(ILibraryConfigurator configurator)
               {
                  configurator
               
                  // Configure the Security Library
                  .ConfigureSecurity(security =>
                 {
                  
                     ...
                     // Some configuration code of other library settings 
                     ...
            
                     // Define the converter, translation from SampleModel to Sample
                     security.RegisterConverter(typeof(SampleModel), typeof(Sample), new SampleModelConverter());
            
                  });
               }
            }
            ]]>
            </code>
            <para>
            Even if the method on which the CheckAccess attribute is applied takes the SampleModel type:
            </para>
            <code>
            public class SecuredDomainService : ISecuredDomainService
            {
                  [CheckAccess]
                  public virtual void Action(SampleModel sample)
                  {
                  }
            }
            </code>
            <para>
            The CheckAccess method on the authorization related interface may take the Sample type as the translation is defined:
            </para>
            <code>
            public interface ISampleAuthorization
            {
                  bool CheckAccess(Sample sample);
            }
            </code>
            <para>
            Please note, that even if the translation is provided the parameter names must still match between the source and destination.
            </para>
            </example>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters.converters">
            <summary>
            The collection of custom converters which can be used during the binding process by
            selected binders supporting the type conversion. The dictionary holds all the source
            types where a value is the next dictionary with all destination types and a converter 
            to be used during the translation from source into the destination.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters.sync">
            <summary>
            Synchronization, mem barrier for all the add actions.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters.Add(System.Type,System.Type,Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter)">
            <summary>
            Add a custom converter which is able to translate an instance of <paramref name="source"/> parameter type
            into the instance of the <paramref name="destination"/> parameter type.
            </summary>
            <remarks>
            The <paramref name="source"/> type is always coming from the current method arguments in the binding process
            (e.g. MVC action method, WebApi action method) while the <paramref name="destination"/> is always a type of
            the CheckAccess method parameter into which the translation occurs during the binding.
            </remarks>
            <param name="source">The source type (translation from).</param>
            <param name="destination">The CheckAccess method parameter type (translation to)</param>
            <param name="converter">The converter used to perform the translation between the source and destination type instances.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters.Get(System.Type,System.Type)">
            <summary>
            Get the converting object performing the translation from the source into destination.
            </summary>
            <param name="source">The source type (translation from).</param>
            <param name="destination">The CheckAccess method parameter type (translation to)</param>
            <returns>The converting object or null when no converter is defined.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessContext">
            <summary>
            The current authorization, check access context.
            </summary>
            <remarks>
            <para>
            The context is provided into every CheckAccess method defined on the authorization related interface.
            When any parameter on such method is of type <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessContext"/> is will automatically
            receive the current context.
            </para>
            <example>
            <para>
            The CheckAccess method from the IAuthorizationService will always receive the context object. The context
            does not participate in binding so the context parameter does not have to be present on the source method
            on which the CheckAccess attribute is applied.
            </para>
            <code>
            public interface IAuthorizationService
            {
                  bool CheckAccess(CheckAccessContext context, int number);
            }
            </code>
            <para>
            The context is not present on the Action method as it will always be provided into the IAuthorizationService
            where a parameter of type CheckAccessContext is specified.
            </para>
            <code>
            public class SecuredDomainService : ISecuredDomainService
            {
                  [CheckAccess(typeof(IAuthorizationService))]
                  public virtual void Action(int number)
                  {
                  }
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.CheckAccessContext.Operation">
            <summary>
            The requested operation(s).
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessContext.#ctor(Volvo.NVS.Security.Authorization.ICheckAccessOperation)">
            <summary>
            Creates an instance of the authorization context.
            </summary>
            <param name="operation">The requested operation(s).</param>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessBinders">
            <summary>
            Provides configuration of the CheckAccess method binding.
            </summary>
            <remarks>
            <para>
            Users may define interfaces containing the CheckAccess methods and then pass such interface types
            into one or more authorization related attributes, CheckAccess attributes. Those attributes will 
            create instances implementing the provided interfaces (involving the Unity container) and execute 
            the CheckAccess methods on the resolved implementation.
            </para>
            <para>
            In order to execute a single CheckAccess method all parameters into the method must be supplied. The authorization
            CheckAccess attributes will bind arguments of the currently executing method (Domain service method, MVC Action method etc.)
            into the CheckAccess method parameters.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinders"/> defines the binding objects to be used in order to bind arguments from the
            currently executing method (source) into the CheckAccess method parameters (target).
            </para>
            <para>
            One does not have to define custom binders if default ones are sufficient. The default binder will server all 
            the types for which the custom binders have not been specified. The system uses the <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/>
            as the default binder.
            </para>
            <para>
            The binding is defined for the complete interface containing the CheckAccess method and not for individual CheckAccess
            method parameters.
            </para>
            <para>
            One may define conversions between individual CheckAccess method parameter types and arguments of the currently executing
            method by usage of the check access converters. For details refer into the <see cref="T:Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter"/> and
            the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters"/> configuration class.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/> default binding implementation.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinders"/> class is not fully thread safe and custom binders should be configured once per
            application domain. You should not add any binders while other threads are already obtaining and using them.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinders"/> class can be used directly in order to a configured custom binders. It is also possible to configure
            and add them using one on the Security Library fluent method configurations. <b>Configuration by usage of the fluent methods and
            a common, cross library configuration interface is recommended.</b> See also the <see cref="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurator"/>.
            </para>
            <example>
            <para>
            The sample adds a new binder for the IAuthorizationService. The IAuthorizationService contains the CheckAccess method
            and the custom binder will be used to fill this method parameters.
            </para>
            <para>
            The custom binder can be added by usage of the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinders"/> class directly:
            </para>
            <code>
            CheckAccessBinders.Add(typeof(IAuthorizationService), new SampleCustomBinder());
            </code>
            <para>
            The fluent library configuration can also be used (recommended) to perform the same configuration:
            </para>
            <code>
            <![CDATA[
            public static class LibraryConfig
            {
               public static void Configure(ILibraryConfigurator configurator)
               {
                  configurator
               
                  // Configure the Security Library
                  .ConfigureSecurity(security =>
                 {
                  
                     ...
                     // Some configuration code of other 
                     ...
            
                     security.RegisterBinder<IAuthorizationService>(new SampleCustomBinder());
            
                  });
               }
            }
            ]]>
            </code>
            <code>
            public interface IAuthorizationService
            {
                  bool CheckAccess(SomeType sample, int number, SomeType2 sample2);
            }
            </code>
            <para>
            It is the SampleCustomBinder which will know how to provide all IAuthorizationService.CheckAccess parameters from any source
            (any method on which the CheckAccess attribute is applied and the IAuthorizationService is specified to be used).
            </para>
            </example>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessBinders.binders">
            <summary>
            The collection of currently configured CheckAccess binders for the given interface types.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessBinders.defaultBinder">
            <summary>
            The default CheckAccess binder used when no custom binder is defined on <see cref="F:Volvo.NVS.Security.Authorization.CheckAccessBinders.binders"/>.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessBinders.sync">
            <summary>
            Synchronization, mem barrier for all the add actions.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessBinders.Add(System.Type,Volvo.NVS.Security.Authorization.ICheckAccessBinder)">
            <summary>
            Adds a new binder executed for an interface containing the CheckAccess method.
            </summary>
            <remarks>
            The binder is added for a complete interface, type on which the CheckAccess method is defined. The binder is NOT
            for individual types of the CheckAccess method arguments.
            </remarks>
            <param name="checkAccessType">
            The interface type containing the CheckAccess method for which a new binder should be defined.
            </param>
            <param name="binder">
            The binder to be used for the provided <paramref name="checkAccessType"/> where the CheckAccess method is defined.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessBinders.Get(System.Type)">
            <summary>
            Returns the binder for the given interface type on which the CheckAccess method is defined.
            </summary>
            <param name="checkAccessType">
            The interface type containing the CheckAccess method for which a binder should be returned.
            </param>
            <returns>
            The binder which will be executed for the complete CheckAccess method defined for the given type.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessBinders.SetDefault(Volvo.NVS.Security.Authorization.ICheckAccessBinder)">
            <summary>
            Sets a default CheckAccess method binder which will be used when no type specific binders are configured.
            </summary>
            <remarks>
            The default binder used by the Security Library is the <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/>. One should not change
            a default binder without a reason. In most of the cases a default binder is sufficient and should be used. You do not
            have to use this method when a default one is about to be used.
            </remarks>
            <param name="binder">The binder to be used as a default one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoCacheKey">
            <summary>
            The key used in the CheckAccess method info cache when multiple CheckAccess method can be
            applied on a single interface type. In such a case the cache is for that interface type
            and the arguments from the secured method (for which the CheckAccess method has been found).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoCacheKey.Type">
            <summary>
            The type of the interface on which the CheckAccess method is expected.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoCacheKey.ArgumentNames">
            <summary>
            The collection of argument names from the secured method for which the 
            CheckAccess method has been located on the given interface type.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoCacheKey.#ctor(System.Type,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Create the object representing the CheckAccess method cache key for the interface
            type on which the method is declared and the argument names from the secured method
            used to locate the CheckAccess.
            </summary>
            <param name="type">
            The type of the interface on which the CheckAccess method is expected.
            </param>
            <param name="argumentNames">
            The collection of argument names from the secured method for which the 
            CheckAccess method has been located on the given interface type.
            </param>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoProvider">
            <summary>
            Locates and provides information about the CheckAccess method which is used during the authorization process.
            Multiple CheckAccess methods are allowed on a single interface when this provider class is used.
            </summary>
            <remarks>
            <para>
            One may define a custom interface with the CheckAccess methods. Such an interface can be passed into one of
            the authorization attributes so the attribute is able to look for an implementation of such interface and
            is able to run the CheckAccess on the initiated instance.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider"/> supports multiple CheckAccess methods on the given interface
            type. The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider"/> helps in the CheckAccess method validation, localization 
            and caching.
            </para>
            <para>
            In contrast the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider"/> supports only one CheckAccess method on the interface type.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider"/> looks for the CheckAccess method on the given type, validates
            it and provides information about it on the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfo"/> object. It finds the CheckAccess method
            by comparing its parameter names with the secured method argument names. When match by names is found the CheckAccess
            method is selected. The search starts with the CheckAccess methods with the largest number of parameters. Special parameters
            (e.g. of <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessContext"/> type) are not included in the comparison.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoProvider.CheckAccessMethodName">
            <summary>
            Name of the method which should be executed in order to check the access.
            The method should be declared on the provided interface type.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoProvider.checkAccessReturnType">
            <summary>
            The required return type of the Check Access method.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoProvider.checkAccessMethodCache">
            <summary>
            The already resolved, verified and recognized check access methods are cached.
            The cache is introduced in order to increase the performance and reduce usage of reflection.
            It is for interface type and a collection of secured method arguments.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoProvider.FindCheckAccessMethod(System.Type,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Find the CheckAccess method on the given interface type and according to the secured method argument names.
            </summary>
            <param name="type">The interface type on which the CheckAccess method should be found.</param>
            <param name="argumentNames">The collection of argument names from the secured method.</param>
            <returns>The found CheckAccess method info object.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoProvider.ValidateCheckAccessCandiate(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Validate a single CheckAccess method.
            </summary>
            <param name="method">The method to be validated.</param>
            <param name="type">The type on which the CheckAccess method has been located.</param>
            <returns>The method itself.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessMultiMethodInfoProvider.GetCheckAccessMethod(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the CheckAccess method from a given type and for a given set of arguments.
            </summary>
            <remarks>
            The method uses the cache so the already recognized methods are resolved from it. This reduces
            the use of reflection and improves the performance of the CheckAccess calls.
            </remarks>
            <param name="type">
            The type on which the CheckAccess method is expected.
            Multiple CheckAccess methods on the given type are acceptable.
            </param>
            <param name="arguments">
            The current method arguments for which the CheckAccess method should be found.
            </param>
            <returns>The object representing information about the CheckAccess method.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinder">
            <summary>
            The CheckAccess binder binding by parameter names and types. This is <b>not</b> the default binder in the Security library.
            It accepts only <b>one</b> CheckAccess method on a single authorization related interface type.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinder"/> accepts only one CheckAccess method on the authorization related
            interface types. When multiple methods are found an exception will be created and binding will not be possible.
            The single method is forced by the implementation given by the <see cref="M:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinder.GetCheckAccessMethodProvider"/> method.
            </para>
            <para>
            One may define an interface having the CheckAccess method and pass type of this interface into
            one of the CheckAccess attributes. The CheckAccess method defined on such interface must return
            a boolean type but can take any number of arguments which can be of any type.
            </para>
            <para>
            When the CheckAccess method (defined on the interface) is called (for example: by one of the CheckAccess 
            attributes) there is a need to bind current method parameter values (e.g. MVC Action method parameters, 
            Domain method parameters, Web API method parameters) into the CheckAccess method arguments.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinder"/> is a binder used to bind arguments from the currently 
            executing method into the CheckAccess function. It matches the parameters by their names and types.
            </para>
            <para>
            When there is a match between parameter names but not between their types then a binder looks for a 
            type converter. If the converter is defined it is used to perform the translation of the source type
            into the correct, destination CheckAccess method parameter type. See the <see cref="T:Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter"/>.
            </para>
            <para>
            When no CheckAccess method parameter type can be resolved in any of the ways the binding is not possible and
            an exception is thrown.
            </para>
            <para>
            When a parameter is of type <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessContext"/> then it will always receive the current authorization
            context object as a value.
            </para>
            <para>
            When any of the parameters required by the CheckAccess method are not bound then call will not be possible
            and an exception will be created. In such a case it is required to check the authorization manually (e.g.
            without using the check access attributes) or define a custom binding which will be able to bind all the
            parameters for our CheckAccess method signature. A custom type converter may also be used.
            </para>
            <para>
            For more information about the custom binding configuration refer into the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinders"/>
            binding configuration class. It is possible to use the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinder"/> as the base
            class for a new binder when a new binder will still use parameter name and its type.
            </para>
            <example>
            <para>
            We have the CheckAccess method which requires some parameters:
            </para>
            <code>
            public interface IAuthorizationService
            {
                  bool CheckAccess(int number, string text);
            }
            </code>
            <para>
            We use the IAuthorizationService for authorization checks:
            </para>
            <code>
            public class SecuredDomainService : ISecuredDomainService
            {
                  [CheckAccess(typeof(IAuthorizationService))]
                  public virtual void Action(int number, string text)
                  {
                  }
            }
            </code>
            <para>
            When the CheckAccessNameTypeBinder is used the arguments from the Action are passed into the IAuthorizationService
            CheckAccess method. They are passed because the parameter names and parameter types between the two are exactly the same.
            </para>
            <para>
            If some parameter could not be bound then an exception would be created. All parameters must be provided into the CheckAccess
            method in order to perform the call.
            </para>
            <para>
            The Action may contain more parameters than the CheckAccess method. In that case all the redundant parameters will be skipped.
            </para>
            </example>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinder.GetCheckAccessMethodProvider">
            <summary>
            Resolves the CheckAccess method info provider object which will locate the CheckAccess method
            which should be called during the binding process. This is the method into which the arguments
            from the secured action should be bound.
            </summary>
            <returns>The CheckAccess method info provider.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider">
            <summary>
            Locates and provides information about the CheckAccess method which is used during the authorization process.
            Allows only <b>one</b> CheckAccess method to be defined on a single interface.
            </summary>
            <remarks>
            <para>
            One may define a custom interface with the CheckAccess method. Such an interface can be passed into one of
            the authorization attributes so the attribute is able to look for an implementation of such interface and
            is able to run the CheckAccess on the initiated instance.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider"/> supports a single CheckAccess method on the given interface
            type. The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider"/> helps in the CheckAccess method validation, localization 
            and caching.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider"/> looks for the CheckAccess method on the given type, validates
            it and provides information about it on the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfo"/> object.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider.CheckAccessMethodName">
            <summary>
            Name of the method which should be executed in order to check the access.
            The method should be declared on the provided interface type.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider.checkAccessReturnType">
            <summary>
            The required return type of the Check Access method.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider.checkAccessMethodCache">
            <summary>
            The already resolved, verified and recognized check access methods are cached.
            The cache is introduced in order to increase the performance and reduce usage of reflection.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider.FindCheckAccessMethod(System.Type)">
            <summary>
            Find the CheckAccess method on the given type, validate it and prepare information object for this method.
            </summary>
            <param name="type">
            The type on which the CheckAccess method is expected.
            </param>
            <returns>The object representing information about the CheckAccess method.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider.GetCheckAccessMethod(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the check access method from a given type and set of arguments.
            </summary>
            <remarks>
            The method uses the cache so the already recognized methods are resolved from it. This reduces
            the use of reflection and improves the performance of the CheckAccess calls.
            </remarks>
            <param name="type">
            The type on which the CheckAccess method is expected. 
            Only a single Check Access method on a given type is acceptable.
            </param>
            <param name="arguments">
            The current method arguments for which the CheckAccess method should be found.
            </param>
            <returns>The object representing information about the CheckAccess method.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessCaller">
            <summary>
            Helps in the CheckAccess method execution (call).
            </summary>
            <remarks>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessCaller"/> executes the CheckAccess methods on the given types.
            It forces binding of CheckAccess method arguments. It resolves and creates instances of
            the types where the CheckAccess method is implemented (involving the unity container).
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessCaller.binder">
            <summary>
            The binder used to bind arguments from the currently executing method into the CheckAccess function parameters.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessCaller.type">
            <summary>
            The type holding the CheckAccess method to be executed (interface with the CheckAccess method).
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessCaller.#ctor(System.Type,Volvo.NVS.Security.Authorization.ICheckAccessBinder)">
            <summary>
            Create an instance of the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessCaller"/>.
            </summary>
            <param name="type">The interface type holding the CheckAccess method.</param>
            <param name="binder">The binder used for the CheckAccess parameter binding.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessCaller.ResolveTarget">
            <summary>
            Resolve the provided type from the Unity creating an instance of it.
            </summary>
            <returns>The instance of the resolved type.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessCaller.Execute(Volvo.NVS.Security.Authorization.CheckAccessContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Run the check access method from the given type passing (binding) the given arguments.
            </summary>
            <param name="context">The current authorization context.</param>
            <param name="arguments">The arguments of the currently executing method (source) used during the binding.</param>
            <returns>Result from the CheckAccess function execution.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessCaller.Create(System.Type)">
            <summary>
            Create the CheckAccess method caller using configured binder and default method info provider.
            </summary>
            <param name="type">
            The interface type with the CheckAccess method for which the caller should be created.
            </param>
            <returns>The caller instance used to run the CheckAccess methods.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfo">
            <summary>
            Represents the method to be called when the authorization check should be made (the CheckAccess method).
            </summary>
            <remarks>
            The class is the CheckAccess method definition used by the authorization method binder.
            It acts like a wrapper for the reflection given method information.
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessMethodInfo.method">
            <summary>
            The method used to execute the access check operation.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessMethodInfo.parameters">
            <summary>
            The ordered list of method parameters.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Create an instance of the authorization method information.
            </summary>
            <param name="method">
            The method for which the information object should be constructed.
            </param>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.CheckAccessMethodInfo.Parameters">
            <summary>
            Provides information about the CheckAccess method parameters.
            </summary>
            <remarks>
            The parameters are always provided on the ordered list and are given in the order of required invocation.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessMethodInfo.CheckAccess(System.Object,System.Object[])">
            <summary>
            Invoke the CheckAccess method on the given target and with the given parameters.
            </summary>
            <param name="target">The object on which the method should be invoked.</param>
            <param name="targetParameters">The parameters which should be passed into the method.</param>
            <returns>Result from the CheckAccess method saying if access is granted or denied.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase">
            <summary>
            The CheckAccess abstract binder binding by parameter names and types. The base implementation which does not specify
            how the CheckAccess method is located and how many CheckAccess methods are acceptable on a single interface.
            </summary>
            <remarks>
            <para>
            One may define an interface having the CheckAccess method and pass type of this interface into
            one of the CheckAccess attributes. The CheckAccess method defined on such interface must return
            a boolean type but can take any number of arguments which can be of any type.
            </para>
            <para>
            When the CheckAccess method (defined on the interface) is called (for example: by one of the CheckAccess 
            attributes) there is a need to bind current method parameter values (e.g. MVC Action method parameters, 
            Domain method parameters, Web API method parameters) into the CheckAccess method arguments.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase"/> is a binder base used to bind arguments from the currently 
            executing method into the selected CheckAccess function. It matches the parameters by their names and types.
            </para>
            <para>
            When there is a match between parameter names but not between their types then a binder looks for a 
            type converter. If the converter is defined it is used to perform the translation of the source type
            into the correct, destination CheckAccess method parameter type. See the <see cref="T:Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter"/>.
            </para>
            <para>
            When no CheckAccess method parameter type can be resolved in any of the ways the binding is not possible and
            an exception is thrown.
            </para>
            <para>
            When a parameter is of type <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessContext"/> then it will always receive the current authorization
            context object as a value and it does not bind into the secured method arguments.
            </para>
            <para>
            When any of the parameters required by the CheckAccess method are not bound then call will not be possible
            and an exception will be created. In such a case it is required to check the authorization manually (e.g.
            without using the check access attributes) or define a custom binding which will be able to bind all the
            parameters for our CheckAccess method signature. A custom type converter may also be used.
            </para>
            <para>
            For more information about the custom binding configuration refer into the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinders"/>
            binding configuration class. It is possible to use the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase"/> as the base
            class for a new binder when a new binder will still use parameter name and its type.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/> is a default binder used for all types for which custom binders 
            have not been defined.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase.authorizationContextType">
            <summary>
            The type of the authorization context.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase.GetCheckAccessMethodProvider">
            <summary>
            Resolves the CheckAccess method info provider object which will locate the CheckAccess method
            which should be called during the binding process. This is the method into which the arguments
            from the secured action should be bound.
            </summary>
            <returns>The CheckAccess method info provider.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase.BindToArgumentValue(System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Bind a single parameter (CheckAccess method parameter) into the argument from the currently executing method.
            </summary>
            <remarks>
            The function finds the item on the <paramref name="arguments"/> which should be bound into the current parameter.
            It returns the value of the argument which should be used during the next phase of the binding process. The type
            of the value returned does not have to match the type of the parameter. The method only finds the corresponding
            argument and returns its value.
            </remarks>
            <param name="name">The current CheckAccess method parameter name to be bound.</param>
            <param name="parameterType">The type of the CheckAccess parameter to be bound.</param>
            <param name="arguments">The arguments to be bound into the CheckAccess method parameters.</param>
            <returns>
            The value from the <paramref name="arguments"/> which is matching the current parameter.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase.PrepareValue(System.Object,System.Type,System.String)">
            <summary>
            Convert the currently bound argument value into the destination (CheckAcceess method) parameter type value.
            </summary>
            <param name="value">The currently bound, secured method argument value.</param>
            <param name="parameterType">The type of the CheckAccess method parameter.</param>
            <param name="name">The name of the CheckAccess method parameter.</param>
            <returns>The value which should be of type <paramref name="parameterType"/>.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase.BindParameter(System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Bind a single CheckAccess method parameter according to the given arguments.
            </summary>
            <param name="name">The current CheckAccess method parameter name to be bound.</param>
            <param name="parameterType">The type of the CheckAccess parameter to be bound.</param>
            <param name="arguments">The arguments to be bound into the CheckAccess method parameters.</param>
            <returns>The bound value for the current CheckAccess method parameter.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase.BindParameter(System.Reflection.ParameterInfo,System.Collections.Generic.IDictionary{System.String,System.Object},Volvo.NVS.Security.Authorization.CheckAccessContext)">
            <summary>
            Bind a single CheckAccess method parameter according to the given arguments.
            </summary>
            <param name="parameter">The current CheckAccess method parameter to be bound.</param>
            <param name="arguments">The arguments to be bound into the CheckAccess method parameters.</param>
            <param name="context">The current authorization context.</param>
            <returns>The bound value for the CheckAccess method parameter.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinderBase.Bind(Volvo.NVS.Security.Authorization.ICheckAccessMethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object},Volvo.NVS.Security.Authorization.CheckAccessContext)">
            <summary>
            Bind the parameters for the current CheckAccess method using the arguments.
            </summary>
            <param name="method">The CheckAccess method into which the arguments should be bound.</param>
            <param name="arguments">The arguments to be bound into the CheckAccess method parameters.</param>
            <param name="context">The current authorization context.</param>
            <returns>The values, parameters which should be passed into the invocation of the CheckAccess method.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter">
            <summary>
            Defines behaviours for the custom CheckAccess binder type converters.
            </summary>
            <remarks>
            <para>
            A custom CheckAccess binder converter can be implemented when an additional translation is needed
            between the current method argument types (source) and the CheckAccess method argument types. Custom
            converters are supported by selected binders and are used by them during the binding process.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinderConverters"/> configuration class for more information about
            the binding and custom converters.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter.Convert(System.Type,System.Object,System.Type)">
            <summary>
            Converts the source instance into the instance of the destination type.
            </summary>
            <param name="sourceType">The source type of the conversion.</param>
            <param name="source">The source used to produce the converted result.</param>
            <param name="destinationType">The destination type (result from the conversion).</param>
            <returns>A destination instance.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.ICheckAccessMethodInfo">
            <summary>
            Describes behaviours for the CheckAccess method information objects.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.ICheckAccessMethodInfo.Parameters">
            <summary>
            Provides information about the CheckAccess method parameters.
            </summary>
            <remarks>
            The parameters are always provided on the ordered list and are given in the order of required invocation.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessMethodInfo.CheckAccess(System.Object,System.Object[])">
            <summary>
            Invoke the CheckAccess method on the given target and with the given parameters.
            </summary>
            <param name="target">The object on which the method should be invoked.</param>
            <param name="targetParameters">The parameters which should be passed into the CheckAccess method.</param>
            <returns>Result from the CheckAccess method saying if access is granted or denied.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.ICheckAccessOperation">
            <summary>
            Defines behaviours for the authorization operation.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.ICheckAccessOperation"/> defines contract for objects providing access into 
            0 - N authorization operations requested during the authorization process. The operation name(s)
            can for example be passed as the parameter into one of the authorization, check access attributes.
            </para>
            <para>
            See also the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessOperation"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.ICheckAccessOperation.IsEmpty">
            <summary>
            Tells if the current instance represents an empty operation set.
            </summary>
            <remarks>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessOperation"/> can represent from 0 to N
            operation names. The check for an empty set can be performed in order
            to ensure that we have 0 operation names provided.
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.ICheckAccessOperation.IsSingle">
            <summary>
            Determines if the authorization operation contains exactly one operation name.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessOperation.First">
            <summary>
            Returns the first operation name from all of the provided operation names.
            </summary>
            <remarks>
            <para>
            The operation name returned by this method is the first given when constructing the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessOperation"/>.
            </para>
            <para>
            The method throws an exception when there are no operation names in the current instance. See also the <see cref="P:Volvo.NVS.Security.Authorization.ICheckAccessOperation.IsEmpty"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The exception created when there are no operation names provided.</exception>
            <returns>The name of the first operation.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessOperation.FirstOrDefault">
            <summary>
            Return the name of the first operation from all the provided operation names or default
            value when no operation names have been provided at all.
            </summary>
            <returns>The name of the first operation or default when no operation names were provided.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessOperation.Is(System.String)">
            <summary>
            Checks if the current instance contains operation with the given name.
            </summary>
            <remarks>
            The method checks if the current instance contains the operation with the given name. When the
            instance has multiple operation names then all are checked for the match.
            </remarks>
            <param name="operation">Name of the operation to be checked.</param>
            <returns>True if the current instance contains operation with the given name.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.ICheckAccessBinder">
            <summary>
            Declares requirements for the CheckAccess method parameters binder.
            </summary>
            <remarks>
            <para>
            One may define an interface having the CheckAccess method and pass type of this interface into
            one of the CheckAccess attributes. The CheckAccess method on such an interface must return a boolean
            type but can take any number and any types of arguments.
            </para>
            <para>
            When the CheckAccess method (defined on the interface) is called (for example: by one of the CheckAccess 
            attributes) there is a need to bind current method parameters (e.g. MVC Action method parameters, 
            Domain method parameters, Web API method parameters) into the CheckAccess method arguments.
            </para>
            <para>
            All the binders performing the binding from the currently executing method arguments into the CheckAccess
            method parameters must fulfill the contract described by the <see cref="T:Volvo.NVS.Security.Authorization.ICheckAccessBinder"/> interface.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinder"/> for a sample binder implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessBinder.GetCheckAccessMethodProvider">
            <summary>
            Locate the provider which will enable us to find the CheckAccess method which should be called.
            </summary>
            <remarks>
            Before the binding occurs a method for which it should be run must be found. The <see cref="T:Volvo.NVS.Security.Authorization.ICheckAccessMethodInfoProvider"/>
            locates the CheckAccess methods for given interface types on which the binding should be executed.
            </remarks>
            <returns>The CheckAccess method provider. The method resolved from the provider will be called.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessBinder.Bind(Volvo.NVS.Security.Authorization.ICheckAccessMethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object},Volvo.NVS.Security.Authorization.CheckAccessContext)">
            <summary>
            Bind the parameters for the current CheckAccess method using the arguments.
            </summary>
            <param name="method">The CheckAccess method into which the arguments should be bound.</param>
            <param name="arguments">The arguments to be bound into the CheckAccess method parameters.</param>
            <param name="context">The current authorization context.</param>
            <returns>The values, parameters which should be passed into the invocation of the CheckAccess method.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.ICheckAccessCaller">
            <summary>
            Defines behaviours for the CheckAccess callers. The CheckAccess callers are executing (calling)
            the authorization related CheckAccess methods on the provided interface types.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessCaller.Execute(Volvo.NVS.Security.Authorization.CheckAccessContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Run the CheckAccess function from the given type passing (binding) the given arguments.
            </summary>
            <param name="context">The current authorization context.</param>
            <param name="arguments">The arguments of the currently executing method used in the binding.</param>
            <returns>Result from the CheckAccess execution.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.ICheckAccessMethodInfoProvider">
            <summary>
            Defines behaviours for objects providing information about the CheckAccess methods which should be called
            by the Security Library when an access check should be executed.
            </summary>
            <remarks>
            <para>
            The CheckAccess methods are called on the given types. The Security Library runs the binding on those methods
            but it must locate and have information about the target CheckAccess method first. This class represents information
            about such an CheckAccess method.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessMethodInfoProvider"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.ICheckAccessMethodInfoProvider.GetCheckAccessMethod(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the check access method from a given type and set of arguments.
            </summary>
            <param name="type">
            The type on which the CheckAccess method is expected to be found.
            </param>
            <param name="arguments">
            The current method arguments for which the CheckAccess method should be found.
            Those are arguments of the secured method where CheckAccess attribute is put.
            </param>
            <returns>The object representing information about the found CheckAccess method.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder">
            <summary>
            The CheckAccess binder binding by parameter names and types. The default binder in the Security library.
            It accepts <b>multiple</b> CheckAccess methods on a single authorization related interface type. See also the 
            <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessNameTypeBinder"/> which is a binder accepting a single CheckAccess method on the interface.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/> accepts multiple CheckAccess methods on the authorization related
            interface types. When multiple methods are found the binder scans all the methods starting with the ones having the
            largest number of parameters.
            </para>
            <para>
            The binder is looking for the CheckAccess method where all its parameter names match the current, secured method
            argument names. The method with the match is selected for the binding process.
            </para>
            <para>
            When multiple CheckAccess methods with the same parameter names are detected the selection of the one to be used during the
            binding might not be possible and an exception is created.
            </para>
            <para>
            The binder does not check the current, secured method argument types. It also does not check the CheckAccess method parameter
            types while looking for the CheckAccess method to be called. The types are not examined at this stage so the binding converters
            can be used for not matching types at later stage.
            </para>
            <para>
            Once the selection of the CheckAccess method is possible the binding of the current, secured method arguments into the CheckAccess
            method parameters can be started.
            </para>
            <para>
            When the CheckAccess method (defined on the interface) is called (for example: by one of the CheckAccess 
            attributes) there is a need to bind current method parameter values (e.g. MVC Action method parameters, 
            Domain method parameters, Web API method parameters) into the CheckAccess method arguments.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/> matches the parameters by their names and types.
            </para>
            <para>
            When there is a match between parameter names but not between their types then a binder looks for a 
            type converter. If the converter is defined it is used to perform the translation of the source type
            into the correct, destination CheckAccess method parameter type. See the <see cref="T:Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter"/>.
            </para>
            <para>
            When no CheckAccess method parameter type can be resolved in any of the ways the binding is not possible and
            an exception is thrown.
            </para>
            <para>
            When a parameter is of type <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessContext"/> then it will always receive the current authorization
            context object as a value.
            </para>
            <para>
            When any of the parameters required by the CheckAccess method are not bound then the call will not be possible
            and an exception will be created. In such a case it is required to check the authorization manually (e.g.
            without using the check access attributes) or define a custom binding which will be able to bind all the
            parameters for our CheckAccess method signature. A custom type converter may also be used.
            </para>
            <para>
            For more information about the custom binding configuration refer into the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessBinders"/>
            binding configuration class. It is possible to use the <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/> as the base
            class for a new binder when a new binder will still use parameter name and its type and multiple CheckAccess methods
            on a single interface.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder"/> is a default binder used for all types for which custom binders 
            have not been defined.
            </para>
            <example>
            <para>
            We have the CheckAccess methods defined on a single interface:
            </para>
            <code>
            public interface IAuthorizationService
            {
                  bool CheckAccess(int number);
                  bool CheckAccess(int number, string text);
            }
            </code>
            <para>
            We use the IAuthorizationService for authorization checks:
            </para>
            <code>
            public class SecuredDomainService : ISecuredDomainService
            {
                  [CheckAccess(typeof(IAuthorizationService))]
                  public virtual void Action(int number, string text)
                  {
                  }
            }
            </code>
            <para>
            When the MultiCheckAccessNameTypeBinder is used the arguments from the Action are passed into the IAuthorizationService
            CheckAccess method. The CheckAccess(int, text) is selected as this is the method matching the parameter names and with the largest
            number of parameters still with the match.
            </para>
            <para>
            If some parameter could not be bound for the selected CheckAccess method then an exception would be created. All parameter values must 
            be provided into the CheckAccess method in order to perform the call.
            </para>
            <para>
            The Action may contain more parameters than the CheckAccess method. In that case all the redundant parameters will be skipped.
            </para>
            </example>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.MultiCheckAccessNameTypeBinder.GetCheckAccessMethodProvider">
            <summary>
            Resolves the CheckAccess method info provider object which will locate the CheckAccess method
            which should be called during the binding process. This is the method into which the arguments
            from the secured action should be bound.
            </summary>
            <returns>The CheckAccess method info provider.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Authorization.CheckAccessOperation">
             <summary>
             Represents the access check, authorization operation(s).
             </summary>
             <remarks>
             <para>
             An instance of the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessOperation"/> can represent from 0 to N
             authorization operations against which a user wants to authorize, check access.
             </para>
             <para>
             The class provides methods allowing a user to check if the given operation has been 
             provided, requested or not.
             </para>
             <example>
             <para>
             Having the CheckAccess method which receives the context:
             </para>
             <code>
             public interface IAuthorizationService
             {
                   bool CheckAccess(CheckAccessContext context);
             }
             </code>
             <para>
             One may refer into the operation:
             </para>
             <code>
             public class AuthorizationService : IAuthorizationService
             {
                 public bool CheckAccess(CheckAccessContext context)
                 {
                     ICheckAccessOperation operation = context.Operation;
                     // We grant access if and only if 1 operation name is given
                     // The sample does not accept multiple operations to be combined
                     if (!operation.IsSingle)
                     {
                         return false;
                     }
            
                     // The sample allows access if and only if the current operation is Read
                     return operation.Is(Operations.Read);
                 }
             }
             </code>
             <para>
             The operation can be given as a parameter into the CheckAccess attribute:
             </para>
             <code>
             public class SecuredDomainService : ISecuredDomainService
             {
                   [CheckAccess(Operations.Read, typeof(IAuthorizationService))]
                   public virtual void Action()
                   {
                   }
             }
             </code>
             </example>
             </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessOperation.isEmpty">
            <summary>
            Determines if the operation is an empty one (no operation names have been specified at all).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessOperation.isSingle">
            <summary>
            Determines if only one operation has been specified.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessOperation.firstOperationName">
            <summary>
            The name of the first operation from the collection of all provided operations.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Authorization.CheckAccessOperation.set">
            <summary>
            The collection of all provided operation names. Due to performance reasons the 
            collection is initialized and used if and only if we have more than one operation
            name specified.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessOperation.#ctor(System.String)">
            <summary>
            Create an instance of the object representing the authorization operation(s).
            </summary>
            <param name="operation">
            The operation name to be represented by the instance.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessOperation.#ctor(System.String[])">
            <summary>
            Create an instance of the object representing the authorization operation(s).
            </summary>
            <param name="operations">
            The collection of operation names to be represented by the instance.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessOperation.Validate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validate provided operation names.
            </summary>
            <param name="operations">
            The collection of operation names to be validated.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessOperation.Initialize(System.String[])">
            <summary>
            Initialize the authorization operation instance with the given operations.
            </summary>
            <param name="operations">
            The collection of operation names to be represented by the instance.
            </param>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.CheckAccessOperation.IsEmpty">
            <summary>
            Tells if the current instance represents an empty operation set.
            </summary>
            <remarks>
            The <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessOperation"/> can represent from 0 to N
            operation names. The check for an empty set can be performed in order
            to ensure that we have 0 operation names provided.
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Authorization.CheckAccessOperation.IsSingle">
            <summary>
            Determines if the authorization operation contains exactly one operation name.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessOperation.First">
            <summary>
            Returns the first operation name from all of the provided operation names.
            </summary>
            <remarks>
            <para>
            The operation name returned by this method is the first given when constructing the <see cref="T:Volvo.NVS.Security.Authorization.CheckAccessOperation"/>.
            </para>
            <para>
            The method throws an exception when there are no operation names in the current instance. See also the <see cref="P:Volvo.NVS.Security.Authorization.CheckAccessOperation.IsEmpty"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The exception created when there are no operation names provided.</exception>
            <returns>The name of the first operation.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessOperation.FirstOrDefault">
            <summary>
            Return the name of the first operation from all the provided operation names or default
            value when no operation names have been provided at all.
            </summary>
            <returns>The name of the first operation or default when no operation names were provided.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Authorization.CheckAccessOperation.Is(System.String)">
            <summary>
            Checks if the current instance contains operation with the given name.
            </summary>
            <remarks>
            The method checks if the current instance contains the operation with the given name. When the
            instance has multiple operation names then all are checked for the match.
            </remarks>
            <param name="operation">Name of the operation to be checked.</param>
            <returns>True if the current instance contains operation with the given name.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Claims.ClaimTypes">
            <summary>
            Provides common claim types which are not given as constants by the framework.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Claims.ClaimTypes.IdentityProviderClaimType">
            <summary>
            An identity name claim type. A sample claim value: Google, uri:WindowsLiveId.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Claims.SiteMinderClaimsIdentity">
            <summary>
            The SiteMinder claims identity. Established by the SiteMinder authentication handlers.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.SiteMinderClaimsIdentity.#ctor">
            <summary>
            Creates an instance of the SiteMinder claims identity.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.SiteMinderClaimsIdentity.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Creates an instance of the SiteMinder claims identity.
            </summary>
            <param name="identity">An identity.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.SiteMinderClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Creates an instance of the SiteMinder claims identity.
            </summary>
            <param name="claims">A collection of claims.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.SiteMinderClaimsIdentity.#ctor(System.String)">
            <summary>
            Creates an instance of the SiteMinder claims identity.
            </summary>
            <param name="authenticationType">A type of the authentication.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.SiteMinderClaimsIdentity.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the SiteMinder claims identity.
            </summary>
            <param name="authenticationType">A type of the authentication,</param>
            <param name="nameClaimType">A claim type name.</param>
            <param name="roleClaimType">A role claim type name.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.SiteMinderClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)">
            <summary>
            Creates an instance of the SiteMinder claims identity.
            </summary>
            <param name="claims">A collection of claims.</param>
            <param name="authenticationType">A type of the authentication,</param>
            <param name="nameClaimType">A claim type name.</param>
            <param name="roleClaimType">A role claim type name.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.SiteMinderClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the SiteMinder claims identity.
            </summary>
            <param name="info">A serialization info.</param>
            <param name="context">A streaming context.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Claims.IClaimsProvider">
            <summary>
            Defines behaviours for the claim providers which can supply additional claims for the already authenticated users, identities.
            </summary>
            <remarks>
            <para>
            During the authentication process an identity is obtained and the claim based identity, claim based principal is established.
            The identity contains claims given by the authentication handler (e.g. SiteMinder handler, Windows handler). When an application
            needs to add additional claims into obtained identities this can be achieved by implementing the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/>.
            </para>
            <para>
            The implementation of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> must be registered in order to be used. The registration can be performed using
            the Security Library, code-base, fluent configuration (recommended) or by directly defining correct type mapping in the Unity. Once the
            <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> is setup it will be resolved by the authentication handler and called when an identity is established. 
            Registration of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> is optional and should be done only when needed by the application (when there is a need 
            to add additional claims into the list of already existing ones).
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> should only complete, add claims which could not be created and are not given by the authentication handlers
            (e.g. SiteMinder, Windows Active Directory).
            </para>
            <para>
            A claim is a statement that one subject (e.g. identity, user) makes about itself. Claims are not what the subject can and cannot do. They are
            what the subject is or is not. Claims decouple authentication from authorization so that the application doesn't need to include the logic for
            a specific authentication. They also decouple roles from authorization logic and allow you to use more granular permissions.
            </para>
            <para>
            You should always consider what should be added as the claim and what is the granularity of the claim stored information. Think about claims
            as about attributes over which you have little or no control. You may also ask yourself "Would I add such a claims into the Active Directory"?
            The role can be a claim but an application specific operation, access, authorization resource should not.
            </para>
            <para>
            When you decide what kind of claims to issue, ask yourself how hard is it to convince the IT department to extend the Active Directory schema. 
            They have good reasons for staying with what they already have. Keep this in mind when you choose which attributes to use as claims. 
            </para>
            <para>
            Only 'real' claims, on the correct level of granularity can be added by the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/>. Never try to add everything from
            your User or Authorization domains as claims, claims attributes. Consider also that claims can be transferred on the cookie in the web applications. 
            Do not overload the list of claims.
            </para>
            <para>
            It is up to the application receiving the incoming claim to map it into the granted / denied authorization rules of the application. When something
            in your application in application specific, cannot be added as a claim, it is on the lowest granularity then it should be verified by the claim 
            mapping, authorization check code. The claim mapping code can be implemented on the domain level. It always receives information about the current 
            identity, its claims and the operation which the user want to perform.
            </para>
            <para>
            Check the NVS authorization CheckAccess attributes for more details about the authorization and access control.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsProvider.CompleteClaims(Volvo.NVS.Security.Claims.IClaimsService,System.DateTime)">
            <summary>
            Update, complete the list of claims for the currently authenticated identity. 
            Read description of <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> for details.
            </summary>
            <param name="service">
            <para>
            The claims service which can be used to add additional claims into the authenticated identity.
            </para>
            <para>
            The service provides also information about currently existing claims and identity details (e.g. user name).
            </para>
            </param>
            <param name="contextTimestamp">
            The timestamp given by the current application context. For example: for web applications hosted under IIS
            it can be the current web request timestamp (different for every request made) while for desktop applications
            it can be the unique timestamp for the complete application domain. This value can be used by the cache 
            mechanism in order to verify if the current cache is valid or not. 
            </param>
        </member>
        <member name="T:Volvo.NVS.Security.Claims.ThreadClaimsService">
            <summary>
            The Claims Service managing the ClaimsPrincipal within the current thread. See also other types of claim services e.g. the WebClaimsService
            from the Security.SystemWeb.
            </summary>
            <remarks>
            <para>
            This ClaimsService class manages the principal object in the current thread. It means it is mainly designed to be used in the 
            non-web applications for example: desktop applications. For web applications the Claims Service available in the Security.SystemWeb
            library should be used instead. For example: WebClaimsService. All these claim classes implement the same contract, interface
            but manage the lifetime, store the claim identity in a different way.
            </para>
            <para>
            You should always decide which type of the Claims Service should be used in your application. Once it is decided you must register the 
            type of the Claims Service to be used so the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/> can be Resolved at any point in the application.
            </para>
            <para>
            Registration of the claims service can be performed by usage of the Security Library fluent configuration (recommended) or by defining
            a correct type mapping in the unity configuration. See the <see cref="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurator"/> for details.
            </para>
            </remarks>
            <example>
            One may obtain information about the current principal, user, identity via the Claims Service.
            <code>
            IClaimsService service = Container.Resolve&lt;IClaimsService&gt;();
            var roles = service.Roles;
            // Do something with roles
            </code>
            </example>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ThreadClaimsService.Assign(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Assigns the claims-based principal object and stores, manages it in the current thread.
            This object can later be retrieved using the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> property.
            </summary>
            <param name="principal">The claims principal to be assigned and managed by the service.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ThreadClaimsService.Resolve">
            <summary>
            Resolves the currently assigned claims-based principal object from the service using the current thread.
            The method returns the object assigned by the <see cref="M:Volvo.NVS.Security.Claims.ThreadClaimsService.Assign(System.Security.Claims.ClaimsPrincipal)"/>.
            </summary>
            <returns>The currently assigned claims-based principal object.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Claims.ClaimsService">
            <summary>
            The base and abstract implementation of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/> managing the <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
            <remarks>
            <para>
            Each Claims Service class is responsible for managing the lifetime of the claim-based principal object. Managing the lifetime means preserving
            the principal object assigned via the <see cref="M:Volvo.NVS.Security.Claims.ClaimsService.Assign(System.Security.Claims.ClaimsPrincipal)"/> for the complete execution code path and providing it on demand when the 
            <see cref="M:Volvo.NVS.Security.Claims.ClaimsService.Resolve"/> method is called.
            </para>
            <para>
            Different Claims Service classes can be used depending on the type of the application and application requirements. For example: web applications 
            may store claim-based principal objects in the HttpContext while for the desktop applications it might be enough to just store it under the 
            currently executing thread.
            </para>
            <para>
            The claim service classes should guarantee the correct propagation of the claim principal objects between threads, calls, contexts. These 
            requirements still depend on the type of the claims service itself and the type of the application.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Claims.ClaimsService"/> class provides base implementation for all Claim Service classes.
            </para>
            <para>
            Every application using the Security library must decide on the type of the ClaimService to be used and must register the claim service
            (e.g. using the Security Library code-based, fluent configuration). The CORRECT claim service should be setup depending on the type of 
            the application. For example: we have the <see cref="T:Volvo.NVS.Security.Claims.ThreadClaimsService"/> and the <b>WebClaimsService</b> (in the Security.SystemWeb).
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.Assign(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Assigns the claims-based principal object and stores, manages it in the current claims service.
            </summary>
            <param name="principal">The claims principal to be assigned and managed by the service.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.Resolve">
            <summary>
            Resolves the currently assigned claims-based principal object from the service.
            It is up to the service to decide on the strategy storing, assigning, managing and resolving this object.
            The method returns the object assigned by the <see cref="M:Volvo.NVS.Security.Claims.ClaimsService.Assign(System.Security.Claims.ClaimsPrincipal)"/>.
            </summary>
            <returns>
            The currently assigned claims-based principal object.
            Null when the object has not been assigned yet or it is not the claim based principal.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.ResolveAndCheck">
            <summary>
            Resolve the currently stored and assigned principal object checking if the object has been assigned.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The exception is thrown when the principal object has not been assigned or it is not claim based principal.
            </exception>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.ClaimsService.IsPrincipal">
            <summary>
            Determines if the current instance of the claims service has the assigned claim based principal.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.ClaimsService.Principal">
            <summary>
            The property gets the instance of the claims-based principal object which is currently assigned into the Claims Service.
            The object itself provides data and behavior of the identities associated with the current execution context.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The exception is thrown when the principal object has not been assigned first and is not available.
            </exception>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.ClaimsService.Identity">
            <summary>
            The current claims identity is exposed via this property. This is the primary identity.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The exception is thrown when the claim based principal object has not been assigned first and is not available.
            In order to check if the Principal has been assigned you may use the <see cref="P:Volvo.NVS.Security.Claims.ClaimsService.IsPrincipal"/> property.
            </exception>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.ClaimsService.Claims">
            <summary>
            Gets the claims as <see cref="T:System.Collections.Generic.IEnumerable`1"/>, associated with this <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.FindAll(System.Predicate{System.Security.Claims.Claim})">
            <summary>
            Retrieves a <see cref="T:System.Collections.Generic.IEnumerable`1"/> where each claim is matched by <paramref name="match"/>.
            </summary>
            <param name="match">The predicate that performs the matching logic.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of matched claims.</returns>  
            <remarks>Returns claims from all Identities</remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.FindAll(System.String)">
            <summary>
            Retrieves a <see cref="T:System.Collections.Generic.IEnumerable`1"/> where each Claim.Type equals <paramref name="type"/>.
            </summary>
            <param name="type">The type of the claim to match.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of matched claims.</returns>   
            <remarks>Comparison is made using Ordinal case in-sensitive on type.</remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.HasClaim(System.Predicate{System.Security.Claims.Claim})">
            <summary>
            Determines if a claim is contained within this ClaimsIdentity.
            </summary>
            <param name="match">The function that performs the matching logic.</param>
            <returns>true if a claim is found, false otherwise.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.HasClaim(System.String,System.String)">
            <summary>
            Determines if a claim with type AND value is contained in the claims within this ClaimsIdentity.
            </summary>
            <param name="type"> the type of the claim to match.</param>
            <param name="value"> the value of the claim to match.</param>
            <returns>true if a claim is matched, false otherwise.</returns>
            <remarks>Does not check Issuer or OriginalIssuer.  Comparison is made using Ordinal, case sensitive on value, case in-sensitive on type.</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.ClaimsService.Roles">
            <summary>
            Returns all the roles (role claim values) currently assigned into the principal.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.IsInRole(System.String)">
            <summary>
            Determines if the principal has the given role.
            </summary>
            <param name="value">Claim role value to be checked.</param>
            <returns>True if role is located.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.AddClaim(System.Security.Claims.Claim)">
            <summary>
            Add a claim into the primary principal identity.
            </summary>
            <param name="claim">The claim to be added.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.AddClaim(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Add claims into the primary principal identity.
            </summary>
            <param name="claims">Claims to be added. Null collections are ignored and no exception is thrown.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.AddRole(System.String)">
            <summary>
            Add a role claim into the primary identity of the current principal.
            </summary>
            <param name="value">The role claim value, role name.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.AddRole(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add role claims into the primary identity of the current principal.
            </summary>
            <param name="values">The role claim values, role names.</param>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.ClaimsService.UserName">
            <summary>
            Returns the user name which is the main identity name.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.GetUserNameWithoutDomain">
            <summary>
            Returns the user name which is the main identity name and removed the domain name from it.
            If domain name is not included the user name without any modifications is returned.
            </summary>
            <returns>The name of the user without the domain name part.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.FirstOrDefault(System.Func{System.Security.Claims.Claim,System.Boolean})">
            <summary>
            First a first claim matching a given predicate and returns its value.
            </summary>
            <param name="predicate">A predicate used to find a claim.</param>
            <returns>A claim value or null when no claim has been found.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.GetClaimDateTime(System.String)">
            <summary>
            Gets the date and time value from the claim holding the IntDate.
            </summary>
            <remarks>
            The IndDate holds the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the desired date/time. 
            See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.
            </remarks>
            <param name="claimType">A claim type from which the date and time value should be read.</param>
            <returns>Read date and time or null when no claim of the given type has been found.</returns>
        </member>
        <member name="F:Volvo.NVS.Security.Claims.ClaimsService.DefaultClockSkew">
            <remarks>
            <para>
            A maximum allowed difference in time when checking identity lifetime (e.g. expiration date and time claims).
            This time is needed in order to minimize effect of clock and time differences on various machines.
            </para>
            <para>
            Check the <see cref="M:Volvo.NVS.Security.Claims.ClaimsService.HasExpired"/> method for details.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.ClaimsService.HasExpired">
            <summary>
            Determines if the current identity has expired checking its lifetime claims (nbf and exp claims).
            The function is useful if an identity has been created from a token with expiration or not before claims.
            </summary>
            <remarks>
            <para>
            The method looks for the "exp" and "nbf" claims and use them if they are available for the current identity.
            These claims are mentioned in the OpenID Connect standard as well as in the JSON Web Token standard description.
            Both claims are optional and if not present the identity is recognized as not expired at all.
            </para>
            <para>
            Both claims (exp and nbf) should represent the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the 
            desired date/time. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Security.Claims.IClaimsService">
            <summary>
            Defines behaviours for the Claim Services.
            </summary>
            <remarks>
            <para>
            Each Claims Service is responsible for managing the lifetime of the claim-based principal object and resolving, providing this object
            when requested by the caller (e.g. the Domain Service). Every time you want to obtain information about identities and claims you 
            should use one of the available implementations of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/>.
            </para>
            <para>
            For details about the claim services take also a look at the base class <see cref="T:Volvo.NVS.Security.Claims.ClaimsService"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.Assign(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Assigns the claims-based principal object and stores, manages it in the current claims service.
            </summary>
            <param name="principal">The claims principal to be assigned and managed by the service.</param>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.IClaimsService.IsPrincipal">
            <summary>
            Determines if the current instance of the claims service has the assigned claim based principal.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.IClaimsService.Principal">
            <summary>
            The property gets the instance of the claims-based principal object which is currently assigned into the Claims Service.
            The object itself provides data and behavior of the identities associated with the current execution context.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The exception is thrown when the principal object has not been assigned first and is not available.
            </exception>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.IClaimsService.Identity">
            <summary>
            The current claims identity is exposed via this property. This is the primary identity.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The exception is thrown when the claim based principal object has not been assigned first and is not available.
            In order to check if the Principal has been assigned you may use the <see cref="P:Volvo.NVS.Security.Claims.IClaimsService.IsPrincipal"/> property.
            </exception>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.IClaimsService.Claims">
            <summary>
            Gets the claims as <see cref="T:System.Collections.Generic.IEnumerable`1"/>, associated with this <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.FindAll(System.Predicate{System.Security.Claims.Claim})">
            <summary>
            Retrieves a <see cref="T:System.Collections.Generic.IEnumerable`1"/> where each claim is matched by <paramref name="match"/>.
            </summary>
            <param name="match">The predicate that performs the matching logic.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of matched claims.</returns>  
            <remarks>Returns claims from all Identities</remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.FindAll(System.String)">
            <summary>
            Retrieves a <see cref="T:System.Collections.Generic.IEnumerable`1"/> where each Claim.Type equals <paramref name="type"/>.
            </summary>
            <param name="type">The type of the claim to match.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of matched claims.</returns>   
            <remarks>Comparison is made using Ordinal case in-sensitive on type.</remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.HasClaim(System.Predicate{System.Security.Claims.Claim})">
            <summary>
            Determines if a claim is contained within this ClaimsIdentity.
            </summary>
            <param name="match">The function that performs the matching logic.</param>
            <returns>true if a claim is found, false otherwise.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.HasClaim(System.String,System.String)">
            <summary>
            Determines if a claim with type AND value is contained in the claims within this ClaimsIdentity.
            </summary>
            <param name="type"> the type of the claim to match.</param>
            <param name="value"> the value of the claim to match.</param>
            <returns>true if a claim is matched, false otherwise.</returns>
            <remarks>Does not check Issuer or OriginalIssuer.  Comparison is made using Ordinal, case sensitive on value, case in-sensitive on type.</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.IClaimsService.Roles">
            <summary>
            Returns all the roles (role claim values) currently assigned into the principal.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.IsInRole(System.String)">
            <summary>
            Determines if the principal has the given role.
            </summary>
            <param name="value">Claim role value to be checked.</param>
            <returns>True if role is located.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.AddClaim(System.Security.Claims.Claim)">
            <summary>
            Add a claim into the primary principal identity.
            </summary>
            <param name="claim">The claim to be added.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.AddClaim(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Add claims into the primary principal identity.
            </summary>
            <param name="claims">Claims to be added.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.AddRole(System.String)">
            <summary>
            Add a role claim into the primary identity of the current principal.
            </summary>
            <param name="value">The role claim value, role name.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.AddRole(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add role claims into the primary identity of the current principal.
            </summary>
            <param name="values">The role claim values, role names.</param>
        </member>
        <member name="P:Volvo.NVS.Security.Claims.IClaimsService.UserName">
            <summary>
            Returns the user name which is the main identity name.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.GetUserNameWithoutDomain">
            <summary>
            Returns the user name which is the main identity name and removed the domain name from it.
            If domain name is not included the user name without any modifications is returned.
            </summary>
            <returns>The name of the user without the domain name part.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.FirstOrDefault(System.Func{System.Security.Claims.Claim,System.Boolean})">
            <summary>
            First a first claim matching a given predicate and returns its value.
            </summary>
            <param name="predicate">A predicate used to find a claim.</param>
            <returns>A claim value or null when no claim has been found.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Claims.IClaimsService.HasExpired">
            <summary>
            Determines if the current identity has expired checking its lifetime claims (nbf and exp claims).
            </summary>
            <remarks>
            <para>
            The method looks for the "exp" and "nbf" claims and use them if they are available for the current identity.
            These claims are mentioned in the OpenID Connect standard as well as in the JSON Web Token standard description.
            Both claims are optional and if not present the identity is recognized as not expired at all.
            </para>
            <para>
            Both claims (exp and nbf) should represent the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the 
            desired date/time. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Security.Configuration.ClaimMappings">
            <summary>
            Provides configuration for mapping of various claim types.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Configuration.ClaimMappings.DefaultClaimTypeMappings">
            <summary>
            Defines a map of known claim types which can be translated into other claim types.
            </summary>
            <remarks>
            <para>
            When an identity is establish it may contain a list of claims which are known but are at the same time
            not following what is expected by the .NET Framework. It may also often be necessary to map one claim
            type into other claim type due to various reasons. This dictionary defines a map where a source claim
            type (a key) is mapped into the other claim type (a value).
            </para>
            <para>
            Some of the Security Library authentication handlers may use this map out of the box. See the documentation
            of the handler for details as not all of the handlers do the mapping.
            </para>
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Configuration.ConfigurationConstants">
            <summary>
            Contains constants for the security library configuration node names and attribute names.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Configuration.ConfigurationConstants.MainConfigurationNodeName">
            <summary>
            Name of the root security library configuration node expected in the application configuration file.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Configuration.ConfigurationConstants.WebConfigurationNodeName">
            <summary>
            Name of the web related security library configuration node (sub node for the root node).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Configuration.ConfigurationConstants.WebIsAutomaticAppStartupEnabled">
            <summary>
            Name of the attribute enabling or disabling the automated startup and registration of web components.
            </summary>
            <remarks>
            The automated startup is executed when the security library is referenced and may for example force
            automated registration and initialization of HttpModules.
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Configuration.ConfigurationSectionProvider">
            <summary>
            Provides security library configuration section objects.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Configuration.ConfigurationSectionProvider.GetSection``1(System.String)">
            <summary>
            Returns the configuration section with a given name.
            </summary>
            <param name="sectionName">Name of the configuration section.</param>
            <returns>Configuration section or null if not found and not configured.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Configuration.ConfigurationSectionProvider.GetRootNode">
            <summary>
            Returns the configuration root node.
            </summary>
            <returns>A root configuration section.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Configuration.Sections.IWebElement">
            <summary>
            Declares properties of the web related security library configuration section.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Configuration.Sections.IWebElement.IsAutomaticAppStartupEnabled">
            <summary>
            Determines if the automated startup and registration of web components should be enabled or not.
            </summary>
            <remarks>
            The automated startup is executed when the security library is referenced and the web activation happens.
            During this stage the security library may force automated registration and initialization of HttpModules 
            or other components. It allows the library to be initialized with no custom code in the client (library 
            consumer) application. No entires in any configuration files are also required.
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Configuration.Sections.RootSection">
            <summary>
            Represents the root node of the Security Library configuration, settings.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Configuration.Sections.RootSection.Web">
            <summary>
            Gives access into the web related Security Library Settings.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Configuration.Sections.WebElement">
            <summary>
            The class gives access into the web related security library settings.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Configuration.Sections.WebElement.IsAutomaticAppStartupEnabled">
            <summary>
            Determines if the automated startup and registration of web components should be enabled or not.
            </summary>
            <remarks>
            The automated startup is executed when the security library is referenced and the web activation happens.
            During this stage the security library may force automated registration and initialization of HttpModules 
            or other components. It allows the library to be initialized with no custom code in the client (library 
            consumer) application. No entires in any configuration files are also required.
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Configuration.SecuritySettings">
            <summary>
            Gives access into the Security Library settings.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Configuration.SecuritySettings.Web">
            <summary>
            Gives access into the web related security library settings.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Configuration.SecuritySettings.#cctor">
            <summary>
            Initializes and loads security library configuration sections.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.CertificateFactory">
            <summary>
            Gives access into certificates which can be used by Volvo applications.
            </summary>
            <remarks>
            <para>
            One should <b>never</b> obtain and read certificates from untrusted sources. For example never read certificates from
            files and unprotected locations. It is recommended to store and take certificates from secured certificate stores e.g. 
            those built into the Windows operating system.
            </para>
            <para>
            Certificates are saved in stores. Two major store locations exist that are further divided into sub-stores. E.g. you may find
            a Local Computer store or a Current User store. If you are the administrator on a computer, you can view both major stores 
            by using the MMC snap-in tool (mmc.exe). Non-administrators can view only the current user store.
            </para>
            <para>
            A store from which the certificate should be read is determined by the <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation"/>. Use local machine store if
            your application is hosted under a process which itself does not run under a specific identity, user. For example: it runs under
            a Local System.
            </para>
            <para>
            Use the <see cref="M:Volvo.NVS.Security.Cryptography.CertificateFactory.CreateFromStore(System.String,System.String)"/> or the <see cref="M:Volvo.NVS.Security.Cryptography.CertificateFactory.CreateFromStore(System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String)"/> function
            in order to read a certificate object from the certificate store. It is also possible to use the <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"/> in place
            of the certification store name passed in <see cref="T:System.String"/>. Check those methods for details and samples.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CertificateFactory.CreateFromStore(System.Security.Cryptography.X509Certificates.StoreName,System.String)">
            <summary>
            Creates a certificate object reading it from the Local Machine certificate store and looking for it by the subject (including all the 
            distinguished certificate names).
            </summary>
            <remarks>
            <para>
            The functions looks for a certificate in a given certificate store using the certificate's subject.
            </para>
            <para>
            A certificate's subject may contain from 1 to many distinguished names. All those names are key value
            pairs in the form of 'Name=Value'. Multiple pairs can be specified for example: 'Name=Value, Name2=Value2' 
            and all are separated using a comma.
            </para>
            <para>
            When giving a subject of a certificate to be found you must provided all of the certificates distinguished names.
            If not all are given a certificate will not be located. In order to check a full certificate subject and all its
            distinguished names you may use the mmc.exe and the Certificates snap-in. Locate the given certificate, go to its
            Properties, Details and check the Subject filed. All the pairs from this subject filed must be given and all must
            be separated by a comma.
            </para>
            <para>
            When using the Certificates snap-in and coping all the subject parts from there one must also include a space after the
            comma in order to find the certificate. For example: if we have following subject string "CN=server-12345678.volvo.com, O=Volvo Information Technology AB, C=SE"
            spaces are important and when not given the certificate will not be found.
            </para>
            <para>
            When only a common name is in the subject field of the certificate (CN) then one may use a shorten form of the subject
            and provide the name itself. For example: instead of writing "CN=My Name" one may use a shorten form "My Name" which would
            be internally converted to "CN=My Name". It shorten form work only for Common Names (CN) and if and only if no other pairs
            are specified in the certificate's subject.
            </para>
            <example>
            <para>
            The sample reads a certificate from the local machine store. A certificate with the PingSampleApp name (CN name) and with 
            other certificate distinguished name attributes is located in the WebHosting certificate store.
            </para>
            <code>
            private const string CertificateStoreName = "WebHosting";
            private const string CertificateName = "CN=PingSampleApp, O=Volvo Information Technology AB, C=SE";
            
            ...
            
            X509Certificate2 certificate = CertificateFactory.CreateFromStore(CertificateStoreName, CertificateName);
            </code>
            </example>
            </remarks>
            <param name="storeName">A name of the store from which the certificate should be read.</param>
            <param name="subject">A full subject of a certificate or a certificate common name if subject is built from than name only.</param>
            <returns>A certificate instance or null when not found.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CertificateFactory.CreateFromStore(System.String,System.String)">
            <summary>
            Creates a certificate object reading it from the Local Machine certificate store and looking for it by the subject (including all the 
            distinguished certificate names).
            </summary>
            <remarks>
            <para>
            The functions looks for a certificate in a given certificate store using the certificate's subject.
            </para>
            <para>
            A certificate's subject may contain from 1 to many distinguished names. All those names are key value
            pairs in the form of 'Name=Value'. Multiple pairs can be specified for example: 'Name=Value, Name2=Value2' 
            and all are separated using a comma.
            </para>
            <para>
            When giving a subject of a certificate to be found you must provided all of the certificates distinguished names.
            If not all are given a certificate will not be located. In order to check a full certificate subject and all its
            distinguished names you may use the mmc.exe and the Certificates snap-in. Locate the given certificate, go to its
            Properties, Details and check the Subject filed. All the pairs from this subject filed must be given and all must
            be separated by a comma.
            </para>
            <para>
            When using the Certificates snap-in and coping all the subject parts from there one must also include a space after the
            comma in order to find the certificate. For example: if we have following subject string "CN=server-12345678.volvo.com, O=Volvo Information Technology AB, C=SE"
            spaces are important and when not given the certificate will not be found.
            </para>
            <para>
            When only a common name is in the subject field of the certificate (CN) then one may use a shorten form of the subject
            and provide the name itself. For example: instead of writing "CN=My Name" one may use a shorten form "My Name" which would
            be internally converted to "CN=My Name". It shorten form work only for Common Names (CN) and if and only if no other pairs
            are specified in the certificate's subject.
            </para>
            <example>
            <para>
            The sample reads a certificate from the local machine store. A certificate with the PingSampleApp name (CN name) and with 
            other certificate distinguished name attributes is located in the WebHosting certificate store.
            </para>
            <code>
            private const string CertificateStoreName = "WebHosting";
            private const string CertificateName = "CN=PingSampleApp, O=Volvo Information Technology AB, C=SE";
            
            ...
            
            X509Certificate2 certificate = CertificateFactory.CreateFromStore(CertificateStoreName, CertificateName);
            </code>
            </example>
            </remarks>
            <param name="storeName">A name of the store from which the certificate should be read.</param>
            <param name="subject">A full subject of a certificate or a certificate common name if subject is built from than name only.</param>
            <returns>A certificate instance or null when not found.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CertificateFactory.CreateFromStore(System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.String)">
            <summary>
            Creates a certificate object reading it from the given certificate store and looking for it by the subject (including all the 
            distinguished certificate names).
            </summary>
            <remarks>
            <para>
            The functions looks for a certificate in a given certificate store using the certificate's subject.
            </para>
            <para>
            A certificate's subject may contain from 1 to many distinguished names. All those names are key value
            pairs in the form of 'Name=Value'. Multiple pairs can be specified for example: 'Name=Value, Name2=Value2' 
            and all are separated using a comma.
            </para>
            <para>
            When giving a subject of a certificate to be found you must provided all of the certificates distinguished names.
            If not all are given a certificate will not be located. In order to check a full certificate subject and all its
            distinguished names you may use the mmc.exe and the Certificates snap-in. Locate the given certificate, go to its
            Properties, Details and check the Subject filed. All the pairs from this subject filed must be given and all must
            be separated by a comma.
            </para>
            <para>
            When using the Certificates snap-in and coping all the subject parts from there one must also include a space after the
            comma in order to find the certificate. For example: if we have following subject string "CN=server-12345678.volvo.com, O=Volvo Information Technology AB, C=SE"
            spaces are important and when not given the certificate will not be found.
            </para>
            <para>
            When only a common name is in the subject field of the certificate (CN) then one may use a shorten form of the subject
            and provide the name itself. For example: instead of writing "CN=My Name" one may use a shorten form "My Name" which would
            be internally converted to "CN=My Name". It shorten form work only for Common Names (CN) and if and only if no other pairs
            are specified in the certificate's subject.
            </para>
            <example>
            <para>
            The sample reads a certificate from the local machine store. A certificate with the PingSampleApp name (CN name) and with 
            other certificate distinguished name attributes is located in the WebHosting certificate store.
            </para>
            <code>
            private const string CertificateStoreName = "WebHosting";
            private const string CertificateName = "CN=PingSampleApp, O=Volvo Information Technology AB, C=SE";
            
            ...
            
            X509Certificate2 certificate = CertificateFactory.CreateFromStore(StoreLocation.LocalMachine, CertificateStoreName, CertificateName);
            </code>
            </example>
            </remarks>
            <param name="storeLocation">A store location from which the certificate should be read.</param>
            <param name="storeName">A name of the store from which the certificate should be read.</param>
            <param name="subject">A full subject of a certificate or a certificate common name if subject is built from than name only.</param>
            <returns>A certificate instance or null when not found.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CertificateFactory.CreateFromStore(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.String)">
            <summary>
            Creates a certificate object reading it from the given certificate store and looking for it by the subject (including all the 
            distinguished certificate names).
            </summary>
            <remarks>
            <para>
            The functions looks for a certificate in a given certificate store using the certificate's subject.
            </para>
            <para>
            A certificate's subject may contain from 1 to many distinguished names. All those names are key value
            pairs in the form of 'Name=Value'. Multiple pairs can be specified for example: 'Name=Value, Name2=Value2' 
            and all are separated using a comma.
            </para>
            <para>
            When giving a subject of a certificate to be found you must provided all of the certificates distinguished names.
            If not all are given a certificate will not be located. In order to check a full certificate subject and all its
            distinguished names you may use the mmc.exe and the Certificates snap-in. Locate the given certificate, go to its
            Properties, Details and check the Subject filed. All the pairs from this subject filed must be given and all must
            be separated by a comma.
            </para>
            <para>
            When using the Certificates snap-in and coping all the subject parts from there one must also include a space after the
            comma in order to find the certificate. For example: if we have following subject string "CN=server-12345678.volvo.com, O=Volvo Information Technology AB, C=SE"
            spaces are important and when not given the certificate will not be found.
            </para>
            <para>
            When only a common name is in the subject field of the certificate (CN) then one may use a shorten form of the subject
            and provide the name itself. For example: instead of writing "CN=My Name" one may use a shorten form "My Name" which would
            be internally converted to "CN=My Name". It shorten form work only for Common Names (CN) and if and only if no other pairs
            are specified in the certificate's subject.
            </para>
            <example>
            <para>
            The sample reads a certificate from the local machine store. A certificate with the PingSampleApp name (CN name) and with 
            other certificate distinguished name attributes is located in the WebHosting certificate store.
            </para>
            <code>
            private const string CertificateStoreName = "WebHosting";
            private const string CertificateName = "CN=PingSampleApp, O=Volvo Information Technology AB, C=SE";
            
            ...
            
            X509Certificate2 certificate = CertificateFactory.CreateFromStore(StoreLocation.LocalMachine, CertificateStoreName, CertificateName);
            </code>
            </example>
            </remarks>
            <param name="storeLocation">A store location from which the certificate should be read.</param>
            <param name="storeName">A name of the store from which the certificate should be read.</param>
            <param name="subject">A full subject of a certificate or a certificate common name if subject is built from than name only.</param>
            <returns>A certificate instance or null when not found.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CertificateFactory.CreateFromStore(System.Security.Cryptography.X509Certificates.X509Store,System.String)">
            <summary>
            Creates a certificate object reading it from the given certificate store and looking for it by the subject (including all the 
            distinguished certificate names).
            </summary>
            <param name="store">A store from which the certificate should be read.</param>
            <param name="subject">A full subject of a certificate or a certificate common name if subject is built from than name only.</param>
            <returns>A certificate instance or null when not found.</returns>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.CertificateFactory.CommonNamePrefix">
            <summary>
            A common name prefix (CN) for the certificate search.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CertificateFactory.HasDistinguishedNames(System.String)">
            <summary>
            Determines if a give certificate's subject contains any distinguished certificate names.
            </summary>
            <param name="subject">A certificate subject to be checked for distinguished names.</param>
            <remarks>
            <para>
            A certificate's subject can contains from 1 to many distinguished names. All those names are key value
            pairs in the form of 'Name=Value'. This function checks if the subject contains distinguished names, meaning
            it checks if we have key value pairs or just a simple text.
            </para>
            <para>
            The function returns true for 'CN = My Name' or for 'CN = My Name, O = Volvo It'.
            </para>
            <para>
            It returns false for 'My Name'.
            </para>
            </remarks>
            <returns>True if certificate's subject contains any distinguished names.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CertificateFactory.ToSubjectWithDistinguishedNames(System.String)">
            <summary>
            Converts a given certificate's subject into the one with distinguished names. Assumes value is the common name
            when no distinguished names are explicitly given.
            </summary>
            <param name="subject">A subject of the certificate to be converted into certificate distinguished name.</param>
            <remarks>
            <para>
            A certificate's subject may contain from 1 to many distinguished names. All those names are key value
            pairs in the form of 'Name=Value'. For example a certificate's subject may contain 'CN = My Name' or 
            'CN = My Name, O = Volvo It'. Various values and key names are allowed and defined by the standard.
            </para>
            <para>
            This method checks wherever the key value pairs are given in the subject. In other words it checks if the subject
            is built from the certificate distinguished names. If that is true then the given subject value is not modified and 
            it is returned as passed into the function argument. For example: when giving 'CN = My Name' then 'CN = My Name' is
            returned by the function.
            </para>
            <para>
            When no distinguished names are detected by the function then a given subject is assumed to be a common name (CN).
            The CN is then appended into a value. For example: when passing 'My Name' the returned value would be 'CN = My Name'.
            </para>
            </remarks>
            <returns>A subject with distinguished names.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.CngKeyFactory">
            <summary>
            Helps in the creation of <see cref="T:System.Security.Cryptography.CngKey"/> keys which can be used in the Elliptic Curve algorithms.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.CngKeyFactory.KeyBlobMagicNumber">
            <summary>
            Magic numbers identifying blob types.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.CngKeyFactory.KeyBlobMagicNumber.ECDsaPublicP256">
            <summary>
            BCRYPT_ECDSA_PUBLIC_P256_MAGIC
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.CngKeyFactory.KeyBlobMagicNumber.ECDsaPublicP384">
            <summary>
            BCRYPT_ECDSA_PUBLIC_P384_MAGIC
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.CngKeyFactory.KeyBlobMagicNumber.ECDsaPublicP521">
            <summary>
            BCRYPT_ECDSA_PUBLIC_P521_MAGIC
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CngKeyFactory.Concat(System.Byte[][])">
            <summary>
            Merges multiple byte arrays into a single one.
            </summary>
            <param name="arrays">Byte arrays to be merged.</param>
            <returns>A single byte array having content of all the arrays.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CngKeyFactory.CreateKey(System.Byte[],System.Byte[])">
            <summary>
            Creates a key applicable for the Elliptic Curve algorithm from the x and y coordinates.
            </summary>
            <param name="x">An x coordinate.</param>
            <param name="y">An y coordinate.</param>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.CngNamedKey">
            <summary>
            Represents a <see cref="T:System.Security.Cryptography.CngKey"/> together with its name, identifier.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.CngNamedKey.Key">
            <summary>
            A key.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.CngNamedKey.Kid">
            <summary>
            A key name, identifier.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CngNamedKey.#ctor(System.Security.Cryptography.CngKey,System.String)">
            <summary>
            Creates an instance of the named <see cref="T:System.Security.Cryptography.CngKey"/>.
            </summary>
            <param name="key">A key.</param>
            <param name="kid">A key name, identifier.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CngNamedKey.Dispose">
            <summary>
            Disposes the current instance.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.CngNamedKey.Dispose(System.Boolean)">
            <summary>
            Disposes the current instance.
            </summary>
            <param name="disposing">True if already disposing.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.IJsonWebKey">
            <summary>
            Represents a contract which is fulfilled by types providing information about JSON Web Keys (JWK).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.Alg">
            <summary>
            The 'alg' (KeyType).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.Crv">
            <summary>
            The 'crv' (ECC - Curve).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.D">
            <summary>
            The 'd' (ECC - Private Key OR RSA - Private Exponent).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.DP">
            <summary>
            The 'dp' (RSA - First Factor CRT Exponent).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.DQ">
            <summary>
            The 'dq' (RSA - Second Factor CRT Exponent).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.E">
            <summary>
            The 'e' (RSA - Exponent).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.K">
            <summary>
            The 'k' (Symmetric - Key Value).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.KeyOps">
            <summary>
            The 'key_ops' (Key Operations).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.Kid">
            <summary>
            The 'kid' (Key ID).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.Kty">
            <summary>
            The 'kty' (Key Type).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.N">
            <summary>
            The 'n' (RSA - Modulus).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.Oth">
            <summary>
            The 'oth' (RSA - Other Primes Info).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.P">
            <summary>
            The 'p' (RSA - First Prime Factor).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.Q">
            <summary>
            The 'q' (RSA - Second  Prime Factor).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.QI">
            <summary>
            The 'qi' (RSA - First CRT Coefficient).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.Use">
            <summary>
            The 'use' (Public Key Use).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.X">
            <summary>
            The 'x' (ECC - X Coordinate).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.X5c">
            <summary>
            Gets the 'x5c' collection (X.509 Certificate Chain).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.X5t">
            <summary>
            The 'k5t' (X.509 Certificate SHA-1 thumb-print)..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.X5tS256">
            <summary>
            The 'k5t#S256' (X.509 Certificate SHA-1 thumb-print)..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.X5u">
            <summary>
            The 'x5u' (X.509 URL)..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJsonWebKey.Y">
            <summary>
            The 'y' (ECC - Y Coordinate)..
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.INonceProvider">
            <summary>
            Provides cryptographic nonce values.
            </summary>
            <remarks>
            Nonce values are random or pseudo-random values used by authentication protocols.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.INonceProvider.CreateNonce">
            <summary>
            Creates a nonce value.
            </summary>
            <returns>A new, random nonce value.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.JsonWebKey">
            <summary>
            Represents a single JSON Web Key (JWK).
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKey"/> implementation is based on a new version of the <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKey"/> class given by the Microsoft.IdentityModel.Protocols.
            We cannot use the Microsoft.IdentityModel.Protocols in it's current production version as it loads the System.Web and it does not correctly expose all
            of the JSON Web Key properties (not all fields are parsed). The main NVS Security library cannot depend on the System.Web and it needs additional key 
            properties such as X and Y to be on place and to be used.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKey"/> is internal as the plan it to replace it with an updated version given by the Microsoft.IdentityModel.Protocols. An updated 
            version should be cut from the System.Web off and should add all JWK properties.
            </para>
            <para>
            TODO: The <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKey"/> is about to be replaced by a type given in the updated Microsoft.IdentityModel.Protocols library (updated for .NET Core)
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JsonWebKey.#ctor">
            <summary>
            Initializes an new instance of <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKey"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JsonWebKey.#ctor(System.String)">
            <summary>
            Initializes an new instance of <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKey"/> from a json string.
            </summary>
            <param name="json">A string that contains JSON Web Key parameters in JSON format.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JsonWebKey.Copy(Volvo.NVS.Security.Cryptography.JsonWebKey)">
            <summary>
            Fills the JSON Web key with data from another JSON Web Key object.
            </summary>
            <param name="key">A source object from which data should be copied.</param>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.Alg">
            <summary>
            Gets or sets the 'alg' (KeyType).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.Crv">
            <summary>
            Gets or sets the 'crv' (ECC - Curve).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.D">
            <summary>
            Gets or sets the 'd' (ECC - Private Key OR RSA - Private Exponent).
            </summary>
            <remarks> value is formated as: Base64urlUInt</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.DP">
            <summary>
            Gets or sets the 'dp' (RSA - First Factor CRT Exponent).
            </summary>
            <remarks> value is formated as: Base64urlUInt</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.DQ">
            <summary>
            Gets or sets the 'dq' (RSA - Second Factor CRT Exponent).
            </summary>
            <remarks> value is formated as: Base64urlUInt</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.E">
            <summary>
            Gets or sets the 'e' (RSA - Exponent).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.K">
            <summary>
            Gets or sets the 'k' (Symmetric - Key Value).
            </summary>
            Base64urlEncoding
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.KeyOps">
            <summary>
            Gets or sets the 'key_ops' (Key Operations)..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.Kid">
            <summary>
            Gets or sets the 'kid' (Key ID).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.Kty">
            <summary>
            Gets or sets the 'kty' (Key Type).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.N">
            <summary>
            Gets or sets the 'n' (RSA - Modulus).
            </summary>
            <remarks> value is formated as: Base64urlEncoding</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.Oth">
            <summary>
            Gets or sets the 'oth' (RSA - Other Primes Info).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.P">
            <summary>
            Gets or sets the 'p' (RSA - First Prime Factor).
            </summary>
            <remarks> value is formated as: Base64urlUInt</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.Q">
            <summary>
            Gets or sets the 'q' (RSA - Second  Prime Factor).
            </summary>
            <remarks> value is formated as: Base64urlUInt</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.QI">
            <summary>
            Gets or sets the 'qi' (RSA - First CRT Coefficient).
            </summary>
            <remarks> value is formated as: Base64urlUInt</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.Use">
            <summary>
            Gets or sets the 'use' (Public Key Use).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.X">
            <summary>
            Gets or sets the 'x' (ECC - X Coordinate).
            </summary>
            <remarks> value is formated as: Base64urlEncoding</remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.X5c">
            <summary>
            Gets the 'x5c' collection (X.509 Certificate Chain).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.X5t">
            <summary>
            Gets or sets the 'k5t' (X.509 Certificate SHA-1 thumb-print)..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.X5tS256">
            <summary>
            Gets or sets the 'k5t#S256' (X.509 Certificate SHA-1 thumb-print)..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.X5u">
            <summary>
            Gets or sets the 'x5u' (X.509 URL)..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKey.Y">
            <summary>
            Gets or sets the 'y' (ECC - Y Coordinate)..
            </summary>
            <remarks> value is formated as: Base64urlEncoding</remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.JsonWebKeySet">
            <summary>
            Provides a collection of <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKey"/> keys that can be filled from a JSON Web Key (JWKs) string.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.JsonWebKeySet.keys">
            <summary>
            A collection of currently added JSON Web Keys.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JsonWebKeySet.#ctor">
            <summary>
            Initializes an new instance of <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKeySet"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JsonWebKeySet.#ctor(System.String)">
            <summary>
            Initializes an new instance of <see cref="T:Volvo.NVS.Security.Cryptography.JsonWebKeySet"/> from a json string.
            </summary>
            <param name="json">a json string containing values.</param>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JsonWebKeySet.Keys">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>       
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.RandomCryptoNonceProvider">
            <summary>
            Provides nonce values with help of a cryptographic Random Number Generator.
            </summary>
            <remarks>
            The <see cref="T:Volvo.NVS.Security.Cryptography.RandomCryptoNonceProvider"/> provides nonce values by creating 256 random bytes and then by doing 64 bit url encoding on the result.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.RandomCryptoNonceProvider.CreateNonce">
            <summary>
            Creates a nonce value.
            </summary>
            <returns>A new, random nonce value.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider">
            <summary>
            Defines a contract for types providing keys to be used during the JSON Web Token signature (JWS) verification.
            </summary>
            <remarks>
            See for example the <see cref="T:Volvo.NVS.Security.Cryptography.JwsKeyProvider"/> which is reading keys in the JSON Web Key format from the given JWK http endpoint.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.IJwsKeyProvider.GetKeys">
            <summary>
            Provides a collection of keys which should be included by the JWT token validation mechanism. It is the current and latest collection of keys.
            </summary>
            <returns>A collection of keys to be included in the JWT token validation.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.IJwsKeyProvider.CheckAndRefreshKeys(Volvo.NVS.Security.Cryptography.JwsKeyRefreshReason)">
            <summary>
            Checks the currently downloaded keys and decides if the refresh operation is needed. Performs the key refresh operation when this is decided.
            </summary>
            <param name="reason">A reason because of which the request to refresh keys has been made.</param>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.IJwsKeyProvider.UpdateId">
            <summary>
            A unique identifier describing the current collection of keys available at the key provider. The id should change every time
            a new set of keys is available at the provider.
            </summary>
            <remarks>
            Callers of the key provider may use optimization and cache based on this value. The value must change every time a collection
            returned by the <see cref="M:Volvo.NVS.Security.Cryptography.IJwsKeyProvider.GetKeys"/> is also modified. The value can be used in order to identify changes of the keys.
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.JwsKeyProvider">
            <summary>
            Acts like a default JSON Web Token key provider which is downloading keys exposed through the JSON Web Key (JWK) format on a specified JWK endpoint.
            </summary>
            <remarks>
            <para>
            Authentication handlers using JSON Web Tokens need to validate those tokens before they are consumed. This is for example true for the server
            side Ping authentication handlers. In order to validate JSON Web Tokens handlers may use the <see cref="T:Volvo.NVS.Security.Tokens.IJwtSignedValidator"/> validators. Those
            validators verify JSON Web Tokens together with their signatures (JWS).
            </para>
            <para>
            Verification of a token signature requires a key which should be used for the check. You may use constant keys: keys which never change over
            time and are for example represented by a single, constant certificate installed on the server. It is however often required to have the key
            rollover strategy: the keys change overtime and new keys should are obtained from predefined key endpoints.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Cryptography.JwsKeyProvider"/> downloads keys from a specified key endpoint. All the keys downloaded should be in the JSON Web Key (JWK) 
            format. The provider can be passed on options to various authentication handlers (e.g. Ping). It's usage may however still depend on the 
            token validator configured and used by the authentication handler itself.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JwsKeyProvider.UpdateId">
            <summary>
            A unique identifier describing the current collection of keys available at the key provider. The id should change every time
            a new set of keys is available at the provider.
            </summary>
            <remarks>
            Callers of the key provider may use optimization and cache based on this value. The value must change every time a collection
            returned by the <see cref="M:Volvo.NVS.Security.Cryptography.JwsKeyProvider.GetKeys"/> is also modified. The value can be used in order to identify changes of the keys.
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JwsKeyProvider.Keys">
            <summary>
            A collection of currently downloaded keys from the key endpoint.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JwsKeyProvider.Client">
            <summary>
            A http client used in order to communicate with the key endpoint.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JwsKeyProvider.Endpoint">
            <summary>
            A key endpoint address from which JWK keys should be downloaded.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.JwsKeyProvider.sync">
            <summary>
            A synchronization and memory barrier object.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JwsKeyProvider.#ctor(System.Uri)">
            <summary>
            Creates an instance of the JSON Web Key provider.
            </summary>
            <param name="endpoint">A key endpoint address from which JWK keys should be downloaded.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JwsKeyProvider.#ctor(System.Net.WebClient,System.Uri)">
            <summary>
            Creates an instance of the JSON Web Key provider.
            </summary>
            <param name="endpoint">A key endpoint address from which JWK keys should be downloaded.</param>
            <param name="client">A http client used in order to communicate with the key endpoint.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JwsKeyProvider.GetKeys">
            <summary>
            Provides a collection of keys which should be included by the JWT token validation mechanism. It is the current and latest collection of keys.
            </summary>
            <returns>A collection of keys to be included in the JWT token validation.</returns>
        </member>
        <member name="P:Volvo.NVS.Security.Cryptography.JwsKeyProvider.RefreshKeyBeforeValidation">
            <summary>
            Determines if keys should be refreshed before the JSON Web token validation is run.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JwsKeyProvider.IsUpdateNeeded(Volvo.NVS.Security.Cryptography.JwsKeyRefreshReason)">
            <summary>
            Determines if the key endpoint should be asked for a collection of keys.
            </summary>
            <returns>True if the key endpoint should be asked for a collection of keys.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JwsKeyProvider.DownloadKeys">
            <summary>
            Downloads a JSON Web Key message having all of the keys to be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Security.Cryptography.JwsKeyProvider.CheckAndRefreshKeys(Volvo.NVS.Security.Cryptography.JwsKeyRefreshReason)">
            <summary>
            Checks the currently downloaded keys and decides if the refresh operation is needed. Performs the key refresh operation when this is decided.
            </summary>
            <param name="reason">A reason because of which the request to refresh keys has been made.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Cryptography.JwsKeyRefreshReason">
            <summary>
            Describes a reason, a stage at which a request to refresh the JWT signature keys is performed.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.JwsKeyRefreshReason.Force">
            <summary>
            A refresh reason is application specific and we want to force it to happen.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.JwsKeyRefreshReason.BeforeValidation">
            <summary>
            A request executed before JSON Web Token validation. This request can be performed for every single token received (every web request)
            thus it may have significant influence on the application performance. At this stage we do not know if the current keys are valid or not. 
            We do not have results from the token validation as we are before that token validation.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Cryptography.JwsKeyRefreshReason.ValidationFailed">
            <summary>
            A request executed when the JSON Web Token could not be validated. At this stage we know that have validation errors and we want to refresh
            JSON Web Token signature keys because of those errors. The request is made after token is validated. The token will however be validated
            again if the keys are successfully reloaded.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.AuthenticationTicketException">
            <summary>
            The exception that is thrown when it is not possible to create or initialize authentication ticket, its state is invalid.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.AuthenticationTicketException.#ctor">
            <summary>
            Creates an authentication ticket exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.AuthenticationTicketException.#ctor(System.String)">
            <summary>
            Creates an authentication ticket exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.AuthenticationTicketException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an authentication ticket exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.CertificateNotFoundException">
            <summary>
            An exception thrown when a certificate cannot be found or its location cannot be determined.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CertificateNotFoundException.#ctor">
            <summary>
            Creates the check access attribute exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CertificateNotFoundException.#ctor(System.String)">
            <summary>
            Creates the check access attribute exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CertificateNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the check access attribute exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.CheckAccessAttributeUsageException">
            <summary>
            The exception thrown when the usage of the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> is incorrect.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CheckAccessAttributeUsageException.#ctor">
            <summary>
            Creates the check access attribute exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CheckAccessAttributeUsageException.#ctor(System.String)">
            <summary>
            Creates the check access attribute exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CheckAccessAttributeUsageException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the check access attribute exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.ConfigurationException">
            <summary>
            Thrown when it is not possible to configure the Security Library.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.ConfigurationException.#ctor">
            <summary>
            Creates an instance of the security library configuration exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
            Creates an instance of the security library configuration exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the security library configuration exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.MissingJwsKeyException">
            <summary>
            The exception throw when it is not possible to validate a JSON Web Token because of a missing key.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.MissingJwsKeyException.#ctor">
            <summary>
            Creates the missing key exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.MissingJwsKeyException.#ctor(System.String)">
            <summary>
            Creates the missing key exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.MissingJwsKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the missing key exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.MissingJwtOptionException">
            <summary>
            The exception throw when any of the options required in order to process JSON Web Tokens is not specified.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.MissingJwtOptionException.#ctor">
            <summary>
            Creates the JWT options exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.MissingJwtOptionException.#ctor(System.String)">
            <summary>
            Creates the JWT options exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.MissingJwtOptionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the JWT options exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.NotAllowedJwsAlgorithmException">
            <summary>
            The exception throw when a received token specifies a signature algorithm which is not allowed.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.NotAllowedJwsAlgorithmException.#ctor">
            <summary>
            Creates the not allowed algorithm exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.NotAllowedJwsAlgorithmException.#ctor(System.String)">
            <summary>
            Creates the not allowed algorithm exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.NotAllowedJwsAlgorithmException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the not allowed algorithm exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.SiteMinderWindowsAuthenticationException">
            <summary>
            The exception thrown when authentication is not possible or not allowed by usage of the <see cref="T:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.SiteMinderWindowsAuthenticationException.#ctor">
            <summary>
            Creates an SiteMinder Windows authentication exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.SiteMinderWindowsAuthenticationException.#ctor(System.String)">
            <summary>
            Creates an SiteMinder Windows authentication exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.SiteMinderWindowsAuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an SiteMinder Windows authentication exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.CheckAccessBindingException">
            <summary>
            The exception that is thrown when it is not possible to bind the current arguments
            into the CheckAccess method parameters.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CheckAccessBindingException.#ctor">
            <summary>
            Creates the not check access binding exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CheckAccessBindingException.#ctor(System.String)">
            <summary>
            Creates the not check access binding exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.CheckAccessBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the not check access binding exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.ClaimsServiceInitializationException">
            <summary>
            The exception used by the security library in order to notify the caller about the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/>
            initialization, registration problems.
            </summary>
            <remarks>
            <para>
            The implementation of <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/> is responsible for managing the current principal (user) for
            the current type of the application. Different implementations can be used for different application types (e.g. web, desktop).
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/> should be registered within the Unity. It means the Unity must be configured for the
            application at first place. Check also the <see cref="T:Volvo.NVS.Core.Unity.Container"/> for more information about Unity configuration.
            </para>
            <para>
            When the Unity is configured for the current application the implementation of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/> should
            be registered within the Container.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Exceptions.ClaimsServiceInitializationException"/> is used when no Unity is properly configured, no <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/>
            is registered within the current Container. The exception is used when it is not possible to resolve the service implementation for
            any reason. It acts like a wrapper for unity exceptions so the source of the problem can be easily recognized by the library consumer.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.ClaimsServiceInitializationException.#ctor">
            <summary>
            Creates the claims service initialization exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.ClaimsServiceInitializationException.#ctor(System.String)">
            <summary>
            Creates the claims service initialization exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.ClaimsServiceInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the claims service initialization exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.NotAuthorizedException">
            <summary>
            The exception used when a principal (user) is not authorized.
            </summary>
            <remarks>
            <para>
            The NVS applications may use security exceptions in order to notify the caller about the authorization results.
            It includes the NVS authorization attributes which may throw instead of redirecting. This is different when
            comparing into the approach taken by the standard .NET authorization check mechanism (for example: .NET Authorize
            attribute). The built in .NET attributes are UI, host related and are only resulting in the 401 (unauthorized) responses.
            </para>
            <para>
            The NVS applications may use authorization on domains, domain services. Domains are never aware of the clients consuming 
            them and are also not aware about the UI, processing requests. Domain authorization cannot simply redirect as it is not
            aware of any web request being in process. Domain services can also be used from applications not related to any web 
            processing (e.g. desktop applications) or not related to any UI at all.
            </para>
            <para>
            As domains are not aware about their consumers they need a way to notify about authorization check issues. They
            use the <see cref="T:Volvo.NVS.Security.Exceptions.NotAuthorizedException"/> exceptions to notify callers. Using the exception ensures any type
            of the client, application may simply react on this.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.NotAuthorizedException.#ctor">
            <summary>
            Creates the not authorized exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.NotAuthorizedException.#ctor(System.String)">
            <summary>
            Creates the not authorized exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.NotAuthorizedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the not authorized exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Exceptions.UnityConfigurationException">
            <summary>
            The exception wrapping original unity exceptions. It is used to simplify tracing of unity configuration problems.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.UnityConfigurationException.#ctor">
            <summary>
            Creates the unity initialization exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.UnityConfigurationException.#ctor(System.String)">
            <summary>
            Creates the unity initialization exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Exceptions.UnityConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the unity initialization exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.ClaimExtensions">
            <summary>
            Provides extension methods into the <see cref="T:System.Security.Claims.Claim"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.ClaimExtensions.IsOfTheSameTypeAndValue(System.Security.Claims.Claim,System.Security.Claims.Claim)">
            <summary>
            Determines if the current claim is the same as a given one checking type, value and issuer but
            not checking into which identity two claims belong.
            </summary>
            <remarks>
            The method compares all claim fields which have influence on the claim type and a claim value
            but does not compare the <see cref="P:System.Security.Claims.Claim.Subject"/>. In other words it does not care what is the
            owner of the claim or into which identity the claim belongs.
            </remarks>
            <param name="current">The current claim to compare from.</param>
            <param name="claim">The claim into which we should compare.</param>
            <returns>True if claims are recognized as having the same types and values.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.ClaimsIdentityExtensions">
            <summary>
            Provides extension method for the <see cref="T:System.Security.Claims.ClaimsIdentity"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.ClaimsIdentityExtensions.MapKnownClaims(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Maps the known claim types into new ones. No old claims are removed but new ones are created.
            </summary>
            <param name="identity">An identity for which the claims should be checked and mapped.</param>
            <param name="map">A dictionary mapping source claim types (key) into destination claim types (value).</param>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.ClaimsPrincipalExtensions">
            <summary>
            Provides extension method into the <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.ClaimsPrincipalExtensions.SyncFrom(System.Security.Claims.ClaimsPrincipal,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Synchronizes the current principal with identities from the updated one.
            </summary>
            <remarks>
            The synchronization method is needed in cases when the complete principal cannot be replaced. It is for example true
            when one sets the principal as the default one for the complete application domain. In most of the cases this happens
            when there is an re-authentication process performed when the application is already running.
            </remarks>
            <param name="currentPrincipal">A principal to be synchronized.</param>
            <param name="updatedPrincipal">An updated principal which act like a source of latest data.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.DictionaryExtensions">
            <summary>
            Provides extensions method to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.DictionaryExtensions.Dump``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Dumps the complete dictionary into a string having all the keys and values.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary">A dictionary from which all the values should be added into a string.</param>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.JwtSecurityTokenExtensions">
            <summary>
            Provides extensions methods into the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.JwtSecurityTokenExtensions.ToClaimsIdentity(System.IdentityModel.Tokens.JwtSecurityToken,System.String,System.Collections.Generic.IList{System.Security.Claims.Claim})">
            <summary>
            Converts a JSON Web Token into a <see cref="T:System.Security.Claims.ClaimsIdentity"/>.
            </summary>
            <param name="jwt">A JSON Web token </param>
            <param name="authenticationType"></param>
            <param name="additionalClaims">A collection of additional claims to be added into the claims identity.</param>
            <returns>A claims identity.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.ParameterCollectionExtensions">
            <summary>
            Extension methods into the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.ParameterCollectionExtensions.ToDictionary(Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection)">
            <summary>
            Converts the collection of parameters into the dictionary where key is the parameter name and value is the parameter value.
            </summary>
            <param name="parameters">The collection of parameter to be converted.</param>
            <returns>The dictionary containing parameters.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.QueryStringExtensions">
            <summary>
            Provides extension methods allowing to easily build query strings and complete urls.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.QueryStringExtensions.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Converts a dictionary holding query parameter names (keys) and parameter values into a query string and appends the query string into the given base uri.
            </summary>
            <param name="queryStrings">A collection of key and value pair where key is a query string parameter name and value is a query string value.</param>
            <param name="baseUri">A base uri holding the scheme, authority and absolute path into which the query parameters should be added.</param>
            <returns>A query string constructed from the provided dictionary and appended into the given base uri.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.QueryStringExtensions.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary holding query parameter names (keys) and parameter values into a query string.
            </summary>
            <param name="queryStrings">A collection of key and value pair where key is a query string parameter name and value is a query string value.</param>
            <returns>A query string constructed according to the provided dictionary values.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.UriExtensions">
            <summary>
            Provides extension method to the <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.UriExtensions.GetQueryWithFragment(System.Uri)">
            <summary>
            Combines the uri Query and Fragment into a single string.
            </summary>
            <param name="uri">An uri from which a query and fragment should be read.</param>
            <returns>A combined parameters string containing both Query and Fragment part.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.UriExtensions.RemoveStartingMarker(System.String,System.String)">
            <summary>
            Removes the starting marker (first character) from the given string if the marker is found.
            </summary>
            <param name="value">A value from which the marker should be removed.</param>
            <param name="marker">A marker to be removed.</param>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.IdentityExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Security.Principal.IIdentity"/> and the <see cref="T:System.Security.Claims.ClaimsIdentity"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.IdentityExtensions.ToClaimsIdentity(System.Security.Principal.IIdentity)">
            <summary>
            Creates the <see cref="T:System.Security.Claims.ClaimsIdentity"/> from the given <see cref="T:System.Security.Principal.IIdentity"/> if it is not already the <see cref="T:System.Security.Claims.ClaimsIdentity"/>.
            </summary>
            <remarks>
            All applications should use the claim based identities. This method ensures the recognized identity is the claim based one. 
            If it is not it converts it into the claim based identity so the caller is sure it always receives the claim based implementation.
            </remarks>
            <param name="identity">The identity to be checked and to be converted (when needed).</param>
            <returns>The claim based identity object.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Extensions.PrincipalExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Security.Principal.IPrincipal"/> interface.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.PrincipalExtensions.ToClaimsPrincipal(System.Security.Principal.IPrincipal,System.Boolean@)">
            <summary>
            Converts the principal into the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> when it is not already the <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
            <param name="principal">The principal which should be converted into the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> (when needed).</param>
            <param name="converted">True if the conversion has been performed. False if <see cref="T:System.Security.Principal.IPrincipal"/> is already the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> or no conversion is possible.</param>
            <returns>The claim based principal object.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Extensions.PrincipalExtensions.ToClaimsPrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Converts the principal into the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> when it is not already the <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
            <param name="principal">The principal which should be converted into the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> (when needed).</param>
            <returns>The claim based principal object.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler">
            <summary>
            The authentication handler forcing usage of Windows Principal (according to the current operating system token associated with the 
            current execution context, process). It sets this principal as the default one for the complete application domain. Once the default 
            value is defined it will be propagated and used by all the application threads. This strategy can be valid for desktop applications, 
            some types of non-ui applications.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/> can only be used once and should be used at the application startup,
            on the main application thread. It is because the default application domain principal can only be set once for the
            complete application.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/> can be used for applications where the principal can be set globally,
            for the complete domain, for all application threads. It is valid for console applications, desktop applications and similar.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/> should NEVER be used in web applications. For web applications one
            may configure and use the authentication HttpModule or authentication Owin middleware component. Check the Security library
            assemblies which are web related such as: Security.SystemWeb.Windows, Security.SystemWeb.SiteMinder.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/> as all the other NVS authentication handlers require the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/>
            to be registered within the Unity container. As the principal is registered for the complete application domain the <see cref="T:Volvo.NVS.Security.Claims.ThreadClaimsService"/>
            can be registered and used in most of the cases.
            </para>
            </remarks>
            <example>
            This sample runs the authentication handler. The Windows Principal is recognized and it is set for the complete application domain:
            <code>
            AppDomainAuthenticationHandler.Run();
            </code>
            </example>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler.#ctor">
            <summary>
            Create an instance of the application domain authentication handler.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler.#ctor(Volvo.NVS.Security.Claims.IClaimsService,Volvo.NVS.Security.Claims.IClaimsProvider)">
            <summary>
            Create an instance of the application domain authentication handler.
            </summary>
            <param name="service">The claims service to be assigned with the authenticated identity.</param>
            <param name="provider">The provider used to add additional claims into the identity.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler.Identify">
            <summary>
            Obtains a Windows identity which will be used during the authentication process.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/> sets the application domain policy to use the Windows Principal which in turn
            will initiate the current thread principal setting it into the Windows principal. The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/>
            is designed to work with Windows identities only.
            </para>
            </remarks>
            <returns>The object representing the recognized Windows identity.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler.RunAuthentication">
            <summary>
            Runs the authentication process which will obtain and assign the default principal for the complete application domain.
            </summary>
            <remarks>
            <para>
            The assignment of the application domain default principal can be done once. Any attempts to perform it multiple times
            may result in the <see cref="T:System.Security.Policy.PolicyException"/>.
            </para>
            <para>
            The default application domain principal will be used and will be propagated into all the new application domain threads.
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/> can be used in non-web related application such as console applications,
            windows desktop applications where the complete system runs under a single, main user Windows identity.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler.RefreshAuthentication">
            <summary>
            Re-runs the complete authentication so for a example a token can be refreshed.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler.GetDefaultTokenClaimType">
            <summary>
            Returns a type of the claim which stores the token used during the authentication process or null when no token has been explicitly used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler.Run">
            <summary>
            Runs the authentication process which will obtain and assign a default principal for the complete application domain.
            </summary>
            <remarks>
            <para>
            The assignment of the application domain default principal can be done once. Any attempts to perform it multiple times
            may result in the <see cref="T:System.Security.Policy.PolicyException"/>. It means it is allowed to execute the Run method only once and it should
            be done at the application startup, on the main application thread.
            </para>
            <para>
            The default application domain principal will be used and will be propagated into all the new application domain threads.
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/> can be used in non-web related applications such as console applications,
            windows desktop applications where the complete system runs under a single, main user Windows identity.
            </para>
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler">
            <summary>
            The authentication handler forcing usage of provided identity. It sets this identity as the default one for the complete application 
            domain. Once the default value is defined it will be propagated and used by all the application threads. This strategy can be valid 
            for services and other types of non-ui hosts where a single, configurable identity should be provided.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler"/> can only be used once and should be used at the application startup,
            on the main application thread. It is because the default application domain principal can only be set once for the
            complete application.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler"/> can be used for services where the principal can be set globally,
            for the complete domain, for all application threads. It is valid for windows services and similar and all cases where
            a totally custom identity should be used. For Windows Principal set for the complete AppDomain check the <see cref="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler"/>.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler"/> should NEVER be used in web applications. For web applications one
            may configure and use the authentication HttpModule or authentication Owin middleware component. Check the Security library
            assemblies which are web related such as: Security.SystemWeb.Windows, Security.SystemWeb.SiteMinder.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler"/> as all the other NVS authentication handlers require the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/>
            to be registered within the Unity container. As the principal is registered for the complete application domain the <see cref="T:Volvo.NVS.Security.Claims.ThreadClaimsService"/>
            can be registered and used in most of the cases.
            </para>
            </remarks>
            <example>
            This sample runs the authentication handler. The custom identity, principal is used and it is set for the complete application domain:
            <code>
            AppDomainCustomAuthenticationHandler.Run();
            </code>
            </example>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.identity">
            <summary>
            The custom identity which should be used and set for the complete application domain.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Create an instance of the application domain authentication handler.
            </summary>
            <param name="identity">The identity to be set for the complete application domain.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.#ctor(System.Security.Principal.IIdentity,Volvo.NVS.Security.Claims.IClaimsService,Volvo.NVS.Security.Claims.IClaimsProvider)">
            <summary>
            Create an instance of the application domain authentication handler.
            </summary>
            <param name="service">The claims service to be assigned with the authenticated identity.</param>
            <param name="provider">The provider used to add additional claims into the identity.</param>
            <param name="identity">The identity to be set for the complete application domain.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.Initialize(System.Security.Principal.IIdentity)">
            <summary>
            Perform the instance initialization.
            </summary>
            <param name="customIdentity">The identity to be set for the complete application domain.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.Identify">
            <summary>
            Obtains an identity which will be used during the authentication process.
            </summary>
            <returns>The object representing the given identity.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.RunAuthentication">
            <summary>
            Runs the authentication process which will obtain and assign the default principal for the complete application domain.
            </summary>
            <remarks>
            <para>
            The assignment of the application domain default principal can be done once. Any attempts to perform it multiple times
            may result in the <see cref="T:System.Security.Policy.PolicyException"/>.
            </para>
            <para>
            The default application domain principal will be used and will be propagated into all the new application domain threads.
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler"/> can be used in non-web related application such as windows services.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.RefreshAuthentication">
            <summary>
            Re-runs the complete authentication so for a example a token can be refreshed.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.GetDefaultTokenClaimType">
            <summary>
            Returns a type of the claim which stores the token used during the authentication process or null when no token has been explicitly used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler.Run(System.Security.Principal.IIdentity)">
            <summary>
            Runs the authentication process which will use the given identity and assign a default principal for the complete application domain.
            </summary>
            <param name="identity">An identity to be used.</param>
            <remarks>
            <para>
            The assignment of the application domain default principal can be done once. Any attempts to perform it multiple times
            may result in the <see cref="T:System.Security.Policy.PolicyException"/>. It means it is allowed to execute the Run method only once and it should
            be done at the application startup, on the main application thread.
            </para>
            <para>
            The default application domain principal will be used and will be propagated into all the new application domain threads.
            The <see cref="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler"/> can be used in windows services and similar.
            </para>
            </remarks>
            <returns>The object representing the given identity.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.AppDomainHostContext">
            <summary>
            The authentication host context which manages the identity, principal setting it as default for the complete application domain.
            The application domain may only be assigned with a principal once. Any attempts to assign it multiple time may result in exceptions.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.AppDomainHostContext.timestamp">
            <summary>
            The application domain unique timestamp.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.AppDomainHostContext.principalSet">
            <summary>
            Determines if the principal has already been set on the app domain level. It can only be set once.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.AppDomainHostContext.sync">
            <summary>
            Provides synchronization and memory barrier.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainHostContext.Assign(System.Security.Principal.IIdentity)">
            <summary>
            Assign the current identity into the complete application domain.
            </summary>
            <param name="identity">
            The identity which should be assigned for the complete application domain.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainHostContext.Assign(System.Security.Principal.IPrincipal)">
            <summary>
            Assign the current principal into the application domain.
            </summary>
            <param name="principal">
            The principal which should be assigned into the complete application domain.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AppDomainHostContext.Resolve">
            <summary>
            Get the principal currently assigned into application domain.
            </summary>
            <returns>
            The principal which is currently assigned into application domain which is the current thread principal now.
            </returns>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.AppDomainHostContext.Timestamp">
            <summary>
            Returns the current timestamp for the context. 
            For app domains it is the unique stamp for the complete application domain.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.ClientAuthenticationSetter">
            <summary>
            Provides authentication related helper methods so requests going from clients into back-end servers can easily be authenticated according 
            to the already received tokens obtained by one of the Security Library authentication, client side handlers.
            </summary>
            <remarks>
            <para>
            In standard cases you do not use helper methods provided by this class directly. You use specialized extension methods provided for the 
            HttpClient or for the OData related client types.
            </para>
            <para>
            Once the authentication is done by the client application and by usage of one of the client specific Security Library authentication handlers
            there might be a need to attach received tokens into the requests going from the client application into the back-end server. It is needed as
            the main purpose of the authentication is to give the client an access into the back-end exposed API.
            </para>
            <para>
            This class provides helper methods allowing you to add tokens into the requests going from the client into the back-end server so the back-end
            may later consume the token, authenticate and authorize the request. The <see cref="T:System.Action"/> specify how a token should be set.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.ClientAuthenticationSetter.Authenticate(System.Action{Volvo.NVS.Security.Tokens.AuthenticatedTokenData},System.String,System.Action)">
            <summary>
            Sets the authentication data by usage of the default authenticated token provider.
            See the <see cref="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider"/> for details.
            </summary>
            <param name="setter">An action setting the authentication data.</param>
            <param name="tokenClaimType">A type of the claim on which the token is expected to be stored.</param>
            <param name="refreshToken">An action refreshing the token if it has expired.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.ClientAuthenticationSetter.Authenticate(System.Action{Volvo.NVS.Security.Tokens.AuthenticatedTokenData},Volvo.NVS.Security.Tokens.IAuthenticatedTokenProvider,System.Action)">
            <summary>
            Sets the authentication data according to the given authenticated token provider.
            </summary>
            <param name="setter">An action setting the authentication data.</param>
            <param name="tokenProvider">A token provider use to obtain information about token used by the authentication process.</param>
            <param name="refreshToken">An action refreshing the token if it has expired.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.ClientAuthenticationSetter.Authenticate(System.Action{Volvo.NVS.Security.Tokens.AuthenticatedTokenData},Volvo.NVS.Security.Handlers.IClientAuthenticationHandler)">
            <summary>
            Sets the authentication data by usage of the default authenticated token provider and
            expecting the token on the claim specified by the <see cref="M:Volvo.NVS.Security.Handlers.IClientAuthenticationHandler.GetDefaultTokenClaimType"/>.
            </summary>
            <param name="setter">An action setting the authentication data.</param>
            <param name="handler">An authentication handler which should be used in order to refresh the token and take a name of the claim holding the token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.ClientAuthenticationSetter.Authenticate(System.Action{Volvo.NVS.Security.Tokens.AuthenticatedTokenData},System.String,Volvo.NVS.Security.Handlers.IClientAuthenticationHandler)">
            <summary>
            Sets the authentication data by usage of the default authenticated token provider.
            </summary>
            <param name="setter">An action setting the authentication data.</param>
            <param name="tokenClaimType">A type of the claim on which the token is expected to be stored.</param>
            <param name="handler">An authentication handler which should be used in order to refresh the token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.ClientAuthenticationSetter.Authenticate(System.Action{Volvo.NVS.Security.Tokens.AuthenticatedTokenData},Volvo.NVS.Security.Tokens.IAuthenticatedTokenProvider,Volvo.NVS.Security.Handlers.IClientAuthenticationHandler)">
            <summary>
            Sets the authentication data according to the given authenticated token provider.
            </summary>
            <param name="setter">An action setting the authentication data.</param>
            <param name="tokenProvider">A token provider use to obtain information about token used by the authentication process.</param>
            <param name="handler">An authentication handler which should be used in order to refresh the token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.ClientAuthenticationSetter.Authenticate(System.Action{Volvo.NVS.Security.Tokens.AuthenticatedTokenData},Volvo.NVS.Security.Tokens.AuthenticatedTokenData)">
            <summary>
            Sets the authentication data using the given action.
            </summary>
            <param name="setter">An action setting the authentication data.</param>
            <param name="data">A data which should be used by the setter.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.IClientAuthenticationHandler">
            <summary>
            Defines a contract with operations specific for client side authentication handlers.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IClientAuthenticationHandler.RunAuthentication">
            <summary>
            Runs the complete authentication realizing the <see cref="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.Authenticate"/> and the <see cref="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.PostAuthenticate"/> steps.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IClientAuthenticationHandler.RefreshAuthentication">
            <summary>
            Re-runs the complete authentication so for a example a token can be refreshed.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IClientAuthenticationHandler.GetDefaultTokenClaimType">
            <summary>
            Returns a type of the claim which stores the token used during the authentication process or null when no token has been explicitly used.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandler">
            <summary>
            Provides abstract and framework independent Ping authentication handler (server side) which validates and consumes signed JSON Web Tokens.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandler"/> gives abstract and base authentication implementation independent from the used framework 
            and host. For example: it gives the base implementation which is reused by SystemWeb based (IIS hosted) authentication modules as well as
            by Owin, Katana implementation authentication middleware components.
            </para>
            <para>
            The complete interaction with the host is done via the abstraction provided on the <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/> implementation.
            Different host and framework implementations provide different instances of the <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/>.
            </para>
            <para>
            You do not use the <see cref="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandler"/> from your code directly. You are using the SystemWeb or Owin specific implementation
            instead of it. Check the <b>Security.SystemWeb.Ping</b> and <b>Security.Owin.Ping</b> assemblies for details.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandler"/> is able to consume JSON Web Tokens from both Authorization headers and cookies. Token values are 
            given by implementation of the <see cref="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.ReadAuthorizationHeader(System.String)"/> and <see cref="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.ReadAuthorizationCookie(System.String)"/> methods. Both may return a 
            value or null when no token is available on a given medium. The authorization header receives a precedence and its value is used first.
            </para>
            <para>
            This Ping handler validates read JSON Web Tokens. By default the <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/> is used. A different implementation may however
            be configured so other token signature algorithms are used for example: <see cref="T:Volvo.NVS.Security.Tokens.JwtESSignedValidator"/> or <see cref="T:Volvo.NVS.Security.Tokens.JwtHSSignedValidator"/>.
            </para>
            <para>
            If JWT validation is not using a single, constant key (provided via the certificate) in order to check token signatures then a key provider can be 
            specified on Ping options. See the <see cref="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider"/> for details and for details about possible key rollover strategies.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.BearerAuthorizationMethodName">
            <summary>
            A name of the authorization method expected in the http authorization header.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.AuthorizationHeaderKeyName">
            <summary>
            A name of the authorization http header key.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.AccessTokenClaimType">
            <summary>
            A type of the claim holding an inner, access token (OAuth 2).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.IdTokenClaimType">
            <summary>
            A type of the claim holding an id token (OpenID Connect).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.tokenHandler">
            <summary>
            A security token handler used to parse and validate received Bearer tokens.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.options">
            <summary>
            Options specified for the Ping authentication handler.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.validator">
            <summary>
            A validator used in order to validate JSON Web Tokens.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.defaultSecurityToken">
            <summary>
            A default security token used to validate JWT signatures.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.Logger">
            <summary>
            An application logger used to write any security related messages.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.#ctor(Volvo.NVS.Security.Handlers.IAuthenticationHostContext,Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions,System.IdentityModel.Tokens.SecurityTokenHandler,Volvo.NVS.Security.Tokens.IJwtSignedValidator)">
            <summary>
            Creates the Ping authentication handler consuming JSON Web, bearer tokens.
            </summary>
            <param name="context">A context giving access into the current host specific and authentication related operations.</param>
            <param name="options">Options used to process and validate JSON Web, Ping related tokens.</param>
            <param name="tokenHandler">A security token handler used to parse (read) received bearer tokens.</param>
            <param name="validator">A validator used in order to validate JSON Web Tokens.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.ReadAuthorizationHeader(System.String)">
            <summary>
            Reads an authorization header from the current web request.
            </summary>
            <param name="name">A name of the request header which should be read by the function.</param>
            <returns>The authorization header read from the current http request or null when no header has been found.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.ReadAuthorizationCookie(System.String)">
            <summary>
            Reads an authorization cookie which is expected to contain a JSON Web Token to be consumed.
            </summary>
            <param name="name">A name of the cookie which should be read by the function.</param>
            <returns>An authorization cookie holding the JSON Web Token or null when no cookie or token is found.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.ReadProtectedTokenValue">
            <summary>
            Reads a protected JSON Web Token value from a request Authorization header or from a cookie.
            </summary>
            <returns>A JSON Web Token protected value.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.Validate(System.IdentityModel.Tokens.JwtSecurityToken,System.String)">
            <summary>
            Validates the currently received JSON Web Token.
            </summary>
            <param name="jwt">A parsed JSON Web Token representation (not validated yet).</param>
            <param name="protectedText">A content of the JSON Web token to be validated.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.Identify">
            <summary>
            Obtains an identity which will be used during the authentication process.
            </summary>
            <remarks>
            The method reads the current authorization header and processes the bearer token received on it. The read
            token is parsed and validated and is expected to be a valid, signed JSON Web Token. If no valid and correct
            token is found then no identity object is created.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.MapClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Maps claims on the detected claims identity from one type to another.
            </summary>
            <param name="identity">A detected claims identity on which some claims should be mapped, translated or added.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.UnwrapToken(System.IdentityModel.Tokens.JwtSecurityToken,System.String@,System.String)">
            <summary>
            Unwraps a JWT token from a parent, outer token.
            </summary>
            <param name="token">An outer token which may holds another, inner JWT tokens.</param>
            <param name="protectedText">A text of the protected JWT which is representing the returned token value.</param>
            <param name="claimName">A name of the claim which is expected to hold the inner token.</param>
            <returns>The outer token if no inner token found or an inner token if present.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandler.UnwrapToken(System.IdentityModel.Tokens.JwtSecurityToken,System.String@)">
            <summary>
            Unwraps a JWT token from a parent, outer token.
            </summary>
            <param name="token">An outer token which may holds another, inner JWT tokens.</param>
            <param name="protectedText">A text of the protected JWT which is representing the returned token value.</param>
            <returns>The outer token if no inner token found or an inner token if present.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions">
            <summary>
            Options used by the <see cref="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandler"/>.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.DefaultAuthenticationCookieName">
            <summary>
            A default name of a cookie on which JSON Web Tokens can be placed by PingAccess.
            </summary>
            <remarks>
            Cookies are used when the PingAccess is involved and we have a setup for a classic, server side web application.
            In that case it is the PingAccess which communicates with the PingFederate and not the client. Once a token is
            obtained by the PingAccess it is then stored on a cookie. In client centric solutions the Authorization header
            should be used instead.
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.AllowedAudiences">
            <summary>
            Provides allowed audiences an inbound JWT will be checked against.
            </summary>
            <remarks>
            <para>
            The JSON Web Token should be received with a special, audience (aud) claim. That claim specifies
            the recipients of the token. Each party reading the token must check if it's on the list of
            the allowed audiences. If it is not then the token is immediately rejected.
            </para>
            <para>
            If you are ordering the PingAccess / PingFedearte configuration you should specify what audience
            should be set on the token received from Ping. Then the same value should be set on this collection.
            </para>
            </remarks>
            <value>
            The allowed audiences.
            </value>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.AllowedAudience">
            <summary>
            Adds an allowed audience an inbound JWT will be checked against. For a full list of allowed
            audiences check the <see cref="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.AllowedAudiences"/> property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.Issuer">
            <summary>
            Provides principal that issued the JWT and against which an inbound token will be checked.
            </summary>
            <remarks>
            <para>
            The JSON Web Token should be received with a special issuer (iss) claim. This claim is optional
            according to the JWT specification but it is REQUIRED by the Katana implementation as well as
            Volvo, Security Library implementation (as the one following the Katana approach).
            </para>
            <para>
            The issuer acts here like the signing issuer. You should order a Ping configuration with a specific
            issuer and set the ordered value here.
            </para>
            <para>
            Empty values are not accepted here and a valid issuer name should be passed.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.Certificate">
            <summary>
            A default certificate used in order to check signatures of signed JSON Web Tokens. It is mainly used for constant, not changing validation key.
            </summary>
            <remarks>
            This certificate can be specified when only one, single and constant key is used in order to check JWT signatures.
            It may also act like a default certificate (key) when there is a strategy for a dynamic key rollover: keys used to 
            validate signatures change over time and must be refreshed from the server (following the JWKS - JSON Web Key standard).
            When keys change then a <see cref="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.KeyProvider"/> must be specified. This provider realized the key refreshment logic.
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.KeyProvider">
            <summary>
            An optional key provider giving access to all of the keys which should be used during the JWT token validation.
            </summary>
            <remarks>
            <para>
            The key provider must be specified when we do not have a single, constant key used in the JWT validation. Our keys
            change and should be fetched from the server following the appointed key rollover strategy. In such a case the 
            <see cref="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.Certificate"/> shall be null as there is no need for a default validation key at all.
            </para>
            <para>
            How the key provider is used depends on the JWS Token validator. When no custom validator is registered then a 
            default one <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/> is used.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.AuthenticationCookieName">
            <summary>
            A name of a cookie holding the JSON Web Token value (when cookies are used).
            </summary>
            <remarks>
            When using PingAccess with classic server side applications then JSON Web Tokens can be placed on cookies
            instead of Authorization headers. In such a case the <see cref="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandler"/> will have to 
            read a cookie value in order to get access into a token. A name of the cookie is specified by this property.
            A default value is assigned so there is no need to change the property value is default is appropriate for 
            your project. For specific information about a cookie name please contact the Ping Team.
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.TokenMode">
            <summary>
            Determines how JSON Web token should be consumed. See <see cref="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerTokenMode"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.#ctor">
            <summary>
            Creates an instance of the ping authentication options.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerOptions.Validate">
            <summary>
            Validates the current options for the JWT, Bearer and Ping related default usage.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerTokenMode">
            <summary>
            Specifies a mode in which the <see cref="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandler"/> reads and processes received JSON Web Tokens.
            </summary>
            <remarks>
            <para>
            A back-end may receive JSON Web tokens on cookies or in authorization headers. The tokens may contain other tokens inside.
            For example: a received JSON Web token may contain an access token or an id token inside. Those are child, inner tokens.
            Such tokens are stored as claims on the root, received token.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.PingAuthenticationHandler"/> may be instructed to use the just received JSON Web token or it may be instructed
            to one of the inner tokens. When an inner token is use then it becomes our root token and this is the token which is going to
            be validated and consumed.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerTokenMode.IncludeInnerAccessToken">
            <summary>
            When a received JSON Web token contains another token (as a claim) and it contains the access_token then this inner,
            access_token is used. When no inner token is found then a root, just received token is consumed.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerTokenMode.RootTokenOnly">
            <summary>
            A received JSON Web token is used and validated. No inner tokens are scanned even if they are available.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.PingAuthenticationHandlerTokenMode.IncludeInnerIdToken">
            <summary>
            When a received JSON Web token contains another token (as a claim) and it contains the id_token then this inner,
            id_token is used. When no inner token is found then a root, just received token is consumed.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler">
            <summary>
            The abstract and host independent SiteMinder authentication handler.
            </summary>
            <remarks>
            <para>
            This is an abstract implementation containing the SiteMinder authentication logic but not being
            aware of the current web host processing the request. Access into the host is abstracted by the
            implementation of the <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/>.
            </para>
            <para>
            For usage and configuration of the SiteMinder authentication handler please check the host specific
            assembly realizing the authentication for example: Volvo.NVS.Security.SystemWeb.SiteMinder.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler.HeaderVariableKey">
            <summary>
            A key name under which a SiteMinder user is transferred in http headers.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler.UserNameHeaderVariable">
            <summary>
            A server variable name holding a SiteMinder user.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler.StringClaimValueType">
            <summary>
            A type of the string claim value.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler.#ctor(Volvo.NVS.Security.Handlers.IAuthenticationHostContext)">
            <summary>
            Create an instance of the SiteMinder authentication handler.
            </summary>
            <param name="context">The context abstracting access into the host related authentication methods.</param>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler.AuthenticationType">
            <summary>
            Name of the current type of the authentication.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler.CreateIdentity(System.String)">
            <summary>
            Creates a SiteMinder claims identity for a given user name.
            </summary>
            <param name="userName">A name of the user for which the identity should be created.</param>
            <returns>The SiteMinder claims identity object.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler.GetUserName">
            <summary>
            Get the SiteMinder user name from the current web request context.
            </summary>
            <returns>A name of the site minder user. It can be null when no user is detected.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler.Identify">
            <summary>
            Obtains the SiteMinder identity which will be used during the authentication process.
            </summary>
            <returns>The recognized SiteMinder identity or null when not authenticated.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler">
            <summary>
            Provides host independent SiteMinder and Windows (mixed) authentication. This class is abstract.
            </summary>
            <remarks>
            <para>
            This is an abstract implementation containing the SiteMinder and Windows (mixed) authentication logic but not 
            being aware of the current web host processing the request. Access into the host is abstracted by an implementation
            of the <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/> provided into the handler.
            </para>
            <para>
            The SiteMinder and Windows mixed authentication is in fact cookie based authentication. When an identity is detected
            then a ticket is created and stored on a cookie named according to the <see cref="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.AuthenticationCookieName"/>.
            </para>
            <para>
            The handler first checks if there is an authentication cookie holding an authentication ticket. If we already have
            a ticket and it is a valid ticket then it means we are already authenticated and the <see cref="T:System.Security.Claims.ClaimsIdentity"/> 
            can be created from the ticket. No other actions are needed.
            </para>
            <para>
            When there is no valid authentication ticket the handler checks for the SiteMinder (WSS) user. When a SiteMinder user
            name is detected by the <see cref="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.GetSiteMinderUserName(System.String)"/> then a new ticket is created and stored on a cookie.
            </para>
            <para>
            When there is no valid authentication ticket and there is no SiteMinder user name then the handler redirects into a special
            windows authentication route calling the <see cref="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.RedirectToWindowsAuthentication"/>. Under this route windows identity
            is obtained and a standard negotiation may occur. When an identity is obtained a ticket is created and a cookie is set.
            </para>
            <para>
            The windows identity is detected by an implementation of the <see cref="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.GetWindowsIdentity"/> method. Such an identity is
            validated and checked by the <see cref="T:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler"/> class. When a windows identity is authenticated
            and a valid one the handler redirects from a special, windows authentication route into the source, original route back. This
            redirection is realized by the <see cref="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.RedirectFromWindowsAuthentication"/>.
            </para>
            <para>
            A ticket created by the handler class has the expiration time. This time is specified on the <see cref="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.TicketExpirationMinutes"/>
            property. 30 minutes is used by default. After that time a ticket must be re-newed and an authentication process must re-run.
            The <see cref="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.TicketExpirationMinutes"/> is also used on a cookie which holds the ticket itself.
            </para>
            <para>
            When a windows authentication is run and a <see cref="T:System.Security.Principal.WindowsIdentity"/> is obtained it is validated and a type of the authentication
            performed is examined. The type of the authentication must be within the allowed values specified on the <see cref="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.WindowsAuthenticationProviders"/>
            collection.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.AuthenticationCookieName">
            <summary>
            A name of the authentication cookie containing a SiteMinder or Windows authenticated identity, authentication ticket.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.TicketExpirationMinutes">
            <summary>
            A ticket expiration value in minutes (30 minutes by default).
            </summary>
            <remarks>
            Specifies time after which an authentication ticket should be re-newed and after which an authentication cookie is not valid.
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.WindowsAuthenticationProviders">
            <summary>
            A collection of allowed windows authentication providers.
            </summary>
            <remarks>
            <para>
            The collection of allowed windows authentication providers specify which authentication types are allowed.
            At the same type the authentication schema is specified. By default Negotiate, NTLM, Kerberos is specified
            in the collection of allowed providers (NT Authentication Providers). The list is only used during the windows
            authentication specifically when the <see cref="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.IsWindowsAuthenticationInProgress"/> function returns true.
            </para>
            <para>
            In specific cases one may alter the collection and add or remove providers. This is however not recommended
            and it is not needed in standard scenarios. When collection must be modified it should be done once at the
            application start-up. No thread safety is guaranteed when modified from multiple threads.
            </para>
            <para>
            The collection is only used in windows identity validation. The <see cref="P:System.Security.Claims.ClaimsIdentity.AuthenticationType"/>
            is check and it should be in the range of the <see cref="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.WindowsAuthenticationProviders"/>. When an authentication
            type received is not within the range it means it is not allowed or an incorrect type of authentication is setup.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.AuthenticationType">
            <summary>
            A type of the authentication performed by this handler and set on the <see cref="T:System.Security.Claims.ClaimsIdentity"/>.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.Protector">
            <summary>
            The service responsible for protection of the authentication ticket, authentication cookie.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.#ctor(Volvo.NVS.Security.Handlers.IAuthenticationHostContext,Volvo.NVS.Security.Tickets.IAuthenticationTicketProtector)">
            <summary>
            Creates an instance of the SiteMinderWindows (mixed) authentication handler.
            </summary>
            <param name="context">A context abstracting access into the host related authentication methods.</param>
            <param name="protector">A service responsible for the authentication cookie, ticket protection.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.GetSiteMinderUserName(System.String)">
            <summary>
            Gets a SiteMinder user name from the current web request.
            </summary>
            <param name="httpVariableName">A name of the http variable.</param>
            <remarks>
            The SiteMinder user name is obtained if and only if there is no authentication cookie established yet or the current
            cookie has expired and the authentication process should be repeated. The SiteMinder user name can only be read if
            there is SiteMinder (WSS) configured and used for the current application and current request.
            </remarks>
            <returns>A name of the SiteMinder user. Null when no SiteMinder user is detected (e.g. no SiteMinder is used at all).</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.GetWindowsIdentity">
            <summary>
            Gets a windows identity from the current web request.
            </summary>
            <remarks>
            A windows identity is obtained if and only if there is no authentication cookie on place and there is no SiteMinder
            user given. In order to get the windows identity a redirection may occur into a route configured with the Windows authentication.
            Only under specific route a windows identity can be read. See also the <see cref="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.IsWindowsAuthenticationInProgress"/> method.
            </remarks>
            <returns>A windows identity or null when not detected.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.GetWindowsClaimsIdentity">
            <summary>
            Gets a windows identity from the current web request and converts it into a claims identity.
            </summary>
            <returns>A windows claims identity or null when not detected.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.GetWindowsUserName">
            <summary>
            Gets the Windows user name from the current web request.
            </summary>
            <remarks>
            A name of the Windows user is obtained if and only if there is no authentication cookie on place and there is no SiteMinder
            user given. In order to get the windows user name a redirection occurs into a route configured with the Windows authentication.
            Only under specific route the windows identity can be read as the windows authentication module can be configured.
            </remarks>
            <returns>Windows user name or null when not detected.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.IsWindowsAuthenticationInProgress">
            <summary>
            Determines wherever the current request is under the Windows authentication route.
            </summary>
            <remarks>
            In some types of hosts a windows authentication can only be configured for a specific route. It is for example
            true in ASP.NET applications hosted under IIS. In that case only one route, page should use Windows authentication
            as the rest should be able to obtain a cookie or http-header based identity (SiteMinder). When this special route 
            is entered (special url is requested) then we are under the authentication mode where an identity should be set 
            from the Windows authentication module.
            </remarks>
            <returns>True if under Windows authentication route otherwise false.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.RedirectToWindowsAuthentication">
            <summary>
            Redirects into the Windows authentication route.
            </summary>
            <remarks>
            Redirection into windows authentication occurs if and only if there is no authentication cookie on place or
            the cookie exists but it is expired and there is no SiteMinder user name provided (no WSS authentication has
            succeeded). A redirection might be needed if windows authentication can only run under specific route.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.RedirectFromWindowsAuthentication">
            <summary>
            Redirects back from a special Windows authentication route into the original route.
            </summary>
            <remarks>
            It is up to the implementation to trace the source route in the <see cref="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.RedirectToWindowsAuthentication"/> and
            redirect back the windows authentication has completed successfully (we have w windows identity). 
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.GetAuthenticationCookie(System.String)">
            <summary>
            Gets a value of the currently set authentication cookie.
            </summary>
            <param name="name">A name of the authentication cookie.</param>
            <returns>An authentication cookie value holding the protected authentication ticket.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.SetAuthenticationCookie(System.String,System.String,System.DateTime)">
            <summary>
            Sets an authentication cookie value on the current http response.
            </summary>
            <param name="name">A name of the authentication cookie.</param>
            <param name="value">A cookie value to be set on the current response object.</param>
            <param name="expiration">An expiration date of the ticket which should also be set on a cookie.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.GetAuthenticationTicket">
            <summary>
            Gets and validates an authentication ticket read from the authentication cookie.
            </summary>
            <returns>An authentication ticket or null when not established yet or expired.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.CreateIdentity(System.String)">
            <summary>
            Creates a SiteMinder claims identity for a given user name.
            </summary>
            <param name="userName">A name of the user for which the identity should be created.</param>
            <returns>The SiteMinder claims identity object.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.SetUserAuthenticated(System.String)">
            <summary>
            Sets the given user name as authenticated one creating a ticket, setting a cookie and establishing an identity object.
            </summary>
            <param name="userName">A name of the user which should be set as authenticated one.</param>
            <returns>A claims identity for a given user.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.Identify">
            <summary>
            Obtains the SiteMinder or Windows identity which will be used during the authentication process.
            </summary>
            <returns>The recognized identity or null when not authenticated.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.SiteMinderWindowsAuthenticationHandler.PostAuthenticate">
            <summary>
            Run the post-authentication process.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.TestableAuthentication">
            <summary>
            Provides configuration of identities, principals for test purposes, local machine execution.
            </summary>
            <remarks>
            <para>
            The Security Library authentication handlers obtain an identity during the authentication process.
            A way in which the identity is obtained depends on the type of the authentication handler used 
            (e.g. Windows, SiteMinder).
            </para>
            <para>
            Some authentication handlers (e.g. SiteMinder) require an external authority to participate in the
            authentication. In that case one cannot easily configure authentication on a local machine without 
            having an external authority configured. As Windows authentication will easily work while executing
            on a local machine other types of authentication may require configuration not possible to be setup
            for developers.
            </para>
            <para>
            When an authentication must be configured to a static identity for test purposes or when running on a
            local, developer's machine the <see cref="T:Volvo.NVS.Security.Handlers.TestableAuthentication"/> can be used to force usage of the
            given, test identity.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.TestableAuthentication"/> <b> SHOULD ONLY BE USED</b> for test, debug purposes. It should
            never be used for application deployed into production or even on QA environments. Using <see cref="T:Volvo.NVS.Security.Handlers.TestableAuthentication"/>
            disables the original authentication logic and replaces it.
            </para>
            <para>
            If the setup from the <see cref="T:Volvo.NVS.Security.Handlers.TestableAuthentication"/> is honored by the authentication handler it depends 
            on the type of the handler itself. Most of the Security Library authentication handlers derived from the 
            <see cref="T:Volvo.NVS.Security.Handlers.AuthenticationHandler"/> class will examine and check for an identity provided by the <see cref="T:Volvo.NVS.Security.Handlers.TestableAuthentication"/>.
            For example it is true for the <see cref="T:Volvo.NVS.Security.Handlers.AppDomainAuthenticationHandler"/>, <see cref="T:Volvo.NVS.Security.Handlers.AppDomainCustomAuthenticationHandler"/>,
            <see cref="T:Volvo.NVS.Security.Handlers.SiteMinderAuthenticationHandler"/> and others.
            </para>
            <para>
            Use the <see cref="T:Volvo.NVS.Security.Handlers.TestableAuthentication"/> only if that is required. For example: for Windows authentication it is not required
            as Windows authentication can be used on local machines without any issues.
            </para>
            </remarks>
            <example>
            <para>
            The following sample will setup the SiteMinder identity for test purposes and local machine execution. Do setup it for Debug
            version of the application only. In real projects this could also be steered by the application configuration but it should 
            always execute in debug version only:
            </para>
            <code>
            protected void Application_Start()
            {
            
            #if DEBUG
                // Setup the identity for local machine execution and tests
                TestableAuthentication.Setup(new SiteMinderClaimsIdentity(
                    new[]
                    {
                        new Claim(ClaimTypes.Name, "bpl0485", "http://www.w3.org/2001/XMLSchema#string", SiteMinderAuthenticationHandler.AuthenticationType)
                    },
                    SiteMinderAuthenticationHandler.AuthenticationType,
                    ClaimsIdentity.DefaultNameClaimType,
                    ClaimTypes.Role));
            #endif
            
            }
            </code>
            </example>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.TestableAuthentication.Identity">
            <summary>
            An identity to be used for test, simulation purposes. Once it is set it can be read
            by specific authentication handlers and used instead of the real authentication process.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.TestableAuthentication.Setup(System.Security.Principal.IIdentity)">
            <summary>
            Setup the identity which should be used during the authentication process instead of a real one.
            </summary>
            <param name="identity">
            The test, local machine identity to be used during the authentication process.
            </param>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.AuthenticationHandler">
            <summary>
            The base authentication handler class.
            </summary>
            <remarks>
            <para>
            The authentication handler is responsible for detecting and creating the <see cref="T:System.Security.Principal.IIdentity"/>. Once the identity is obtained
            it is passed into the implementation of the <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/> so the host may store and trace it.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AuthenticationHandler"/> provides the technology independent base implementation (e.g. it does not depend on the System.Web and 
            it also does not depend on the OWIN, Katana implementation). It means it gives the host independent code base and a common authentication
            logic. The complete interaction with the host is done via the abstraction provided on the <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/> implementation.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.AuthenticationHandler.context">
            <summary>
            Context giving access into the host related functionality (abstraction of the host).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.AuthenticationHandler.claimsService">
            <summary>
            The claims service to be assigned with the authenticated identity.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Handlers.AuthenticationHandler.claimsProvider">
            <summary>
            The claims provider used to add additional claims into the identity.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.#ctor(Volvo.NVS.Security.Handlers.IAuthenticationHostContext)">
            <summary>
            Initializes an instance of the authentication handler.
            </summary>
            <param name="context">The context abstracting access into the host related authentication methods.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.#ctor(Volvo.NVS.Security.Handlers.IAuthenticationHostContext,Volvo.NVS.Security.Claims.IClaimsService,Volvo.NVS.Security.Claims.IClaimsProvider)">
            <summary>
            Initializes an instance of the authentication handler.
            </summary>
            <param name="hostContext">The context abstracting access into the host related authentication methods.</param>
            <param name="service">The claims service to be assigned with the authenticated identity.</param>
            <param name="provider">The provider used to add additional claims into the identity.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.ResolveClaimsService">
            <summary>
            Resolve the claims service configured for the current application.
            </summary>
            <returns>The claims service managing the identity within the current application.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.ResolveClaimsProvider">
            <summary>
            Resolve the claims provider configured for the current application.
            </summary>
            <returns>The claims provider completing the list of claims.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.Identify">
            <summary>
            Obtains an identity which will be used during the authentication process.
            </summary>
            <remarks>
            <para>
            Obtaining the identity is the major step in the authentication process. When you are writing a custom authentication
            handler it is required to put here logic obtaining, verifying and creating the identity objects.
            </para>
            <para>
            All NVS applications should use the claim based identities. Because of this the returned <see cref="T:System.Security.Principal.IIdentity"/> is
            always converted into the <see cref="T:System.Security.Claims.ClaimsIdentity"/> by the handler. One may return an instance of the <see cref="T:System.Security.Claims.ClaimsIdentity"/>
            directly in order to reduce the need for the future conversions done by the <see cref="T:Volvo.NVS.Security.Handlers.AuthenticationHandler"/>.
            </para>
            </remarks>
            <returns>The object representing the recognized identity.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.Authenticate">
            <summary>
            Runs the authentication process establishing (assigning) the identity of a user.
            </summary>
            <remarks>
            <para>
            The authentication will obtain an identity using the <see cref="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.Identify"/> method. The detected
            identity will be secured to be the <see cref="T:System.Security.Claims.ClaimsIdentity"/> as the claim based authentication
            should always be used by all the NVS applications.
            </para>
            <para>
            Once the identity is detected and verified it will be assigned into the host context so the host is
            informed about the result from the authentication process and may store, manage the result. The host
            can by the SystemWeb, OWIN or any other type of host.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.RecognizeIdentity">
            <summary>
            Runs the core authentication logic detecting the current user identity.
            </summary>
            <returns>An authenticated identity or null when no identity is identified.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.MapClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Maps claims on the detected claims identity from one type to another.
            </summary>
            <remarks>
            When we have a claims identity some authentication providers may want to map, change claim types e.g. 
            when a "sub" claims is received form Ping it may be translated into the "nameidentifier" claim type. 
            Other translations and they all are authentication handler specific. This is different in comparison
            to the <see cref="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.CompleteClaims(Volvo.NVS.Security.Claims.IClaimsService)"/> method which realizes business, application specific
            claim addition and claim manipulation.
            </remarks>
            <param name="identity">A detected claims identity on which some claims should be mapped, translated or added.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.CompleteClaims(Volvo.NVS.Security.Claims.IClaimsService)">
            <summary>
            Completes the list of claims for the currently authenticated identity, claims principal.
            </summary>
            <param name="service">A current claims service.</param>
            <remarks>
            The complete claims requires the principal to be already assigned into the claims service.
            Because of this no principal is required by this method and only the claims service is passed.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.PostAuthenticate">
            <summary>
            Runs the post-authentication process.
            </summary>
            <remarks>
            The post authentication process should be executed when the <see cref="M:Volvo.NVS.Security.Handlers.AuthenticationHandler.Authenticate"/> has
            been successfully run and the identity has been established. In such a case the identity
            is managed by the host context and must be available, provided from this context.
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.IAuthenticationHandler">
            <summary>
            Defines basic behaviours for the authentication handlers. Check also the <see cref="T:Volvo.NVS.Security.Handlers.AuthenticationHandler"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IAuthenticationHandler.Authenticate">
            <summary>
            Run the authentication process establishing (and assigning) the identity of a user.
            </summary>
            <remarks>
            <para>
            The authentication handler will obtain an identity and inform the host about the result from the authentication.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IAuthenticationHandler.RecognizeIdentity">
            <summary>
            Runs the core authentication logic detecting the current user identity (not assigning).
            </summary>
            <returns>An authenticated identity or null when no identity is identified.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IAuthenticationHandler.PostAuthenticate">
            <summary>
            Run the post-authentication process.
            </summary>
            <remarks>
            The post authentication process is executed when the <see cref="M:Volvo.NVS.Security.Handlers.IAuthenticationHandler.Authenticate"/> has been successfully run and the identity has been established.
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext">
            <summary>
            The contract for objects giving access into the authentication related functionality which is host specific.
            It abstracts access into the host for the security library.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.AuthenticationHandler"/> provides the base authentication implementation which is
            host independent. There is however a need to inform the host about the obtained identity as well
            as there is a need to get the already existing identity, user from the host context.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/> abstracts the access into the host specific data and
            host specific authentication operations.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/> may represent the HttpContext for ASP.NET applications,
            OwinContext for Katana based implementation and other contexts depending on the host environment.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IAuthenticationHostContext.Assign(System.Security.Principal.IIdentity)">
            <summary>
            Assigns the current identity into the host context.
            </summary>
            <param name="identity">
            The identity which should be assigned into the current host context.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IAuthenticationHostContext.Assign(System.Security.Principal.IPrincipal)">
            <summary>
            Assigns the current principal into the host context.
            </summary>
            <param name="principal">
            The principal which should be assigned into the current host context.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.Handlers.IAuthenticationHostContext.Resolve">
            <summary>
            Gets the principal currently assigned into the host context.
            </summary>
            <returns>
            The principal which is currently assigned into the host context.
            </returns>
        </member>
        <member name="P:Volvo.NVS.Security.Handlers.IAuthenticationHostContext.Timestamp">
            <summary>
            Returns the current timestamp for the host context.
            </summary>
            <remarks>
            <para>
            For web applications hosted under IIS it can be the current web request timestamp (different for every request made) while for desktop
            applications it can be the unique timestamp for the complete application domain. 
            </para>
            <para>
            This value can be used by the cache mechanism in order to verify if the current cache is valid or not. It is for example passed into
            every call into the <see cref="M:Volvo.NVS.Security.Claims.IClaimsProvider.CompleteClaims(Volvo.NVS.Security.Claims.IClaimsService,System.DateTime)"/> method. The value can be used not only to mark under which request
            the cache has been created but also in order to specify if the cache should be refreshed.
            </para>
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector">
            <summary>
            Protects and serializes the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> using the given protection and serialization services.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector.serializer">
            <summary>
            A serializer used to serialize and deserialize tickets.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector.guard">
            <summary>
            A guard object providing encryption and protection of data.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector.notAuthenticated">
            <summary>
            Specifies a ticket representing the not authenticated user.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector.#ctor(Volvo.NVS.Security.Tickets.IAuthenticationTicketSerializer,Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard)">
            <summary>
            Creates an instance of the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> protection service.
            </summary>
            <param name="serializer">A serializer used to serialize and deserialize tickets.</param>
            <param name="guard">A guard object providing encryption and protection of data.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector.Protect(Volvo.NVS.Security.Tickets.AuthenticationTicket)">
            <summary>
            Protects and serializes the authentication ticket by encrypting, signing, encoding it as defined on the provided <see cref="T:Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard"/>.
            </summary>
            <param name="ticket">A ticket to be protected.</param>
            <returns>The serialized and protected authentication ticket.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector.Unprotect(System.String)">
            <summary>
            Unprotects the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> deserializing it from the given data.
            </summary>
            <param name="data">Authentication ticket data to be deserialized and unprotected.</param>
            <returns>The unprotected authentication ticket.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tickets.AuthenticationTicketSerializer">
            <summary>
            Provides serialization and deserialization mechanism for the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/>.
            </summary>
            <remarks>
            <para>
            Serialization and deserialization of the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> is required when a ticket should be
            passed (e.g. between different web requests, on a cookie). Serialization itself is however not a protection mechanism
            thus a ticket should always be additionally secured. See the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector"/> for details.
            </para>
            <para>
            In standard scenarios you do not use the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicketSerializer"/> from your code. You use one of
            the authentication handlers which may use the ticket related classes.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Tickets.AuthenticationTicketSerializer.Version">
            <summary>
            The current version of the serialized data (all properties and their order).
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.AuthenticationTicketSerializer.Serialize(Volvo.NVS.Security.Tickets.AuthenticationTicket)">
            <summary>
            Serializes the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> into a stream of bytes.
            </summary>
            <param name="ticket">A ticket to be serialized.</param>
            <returns>A collection of bytes containing serialized ticked data.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.AuthenticationTicketSerializer.Write(System.IO.BinaryWriter,Volvo.NVS.Security.Tickets.AuthenticationTicket)">
            <summary>
            Writes the given ticket data using a given writer.
            </summary>
            <param name="writer">A writer used to write the given ticket data.</param>
            <param name="ticket">A ticker to be written using the given writer.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.AuthenticationTicketSerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> from the stream of bytes.
            </summary>
            <param name="data">A collection of bytes with a serialized ticket data.</param>
            <returns>An authentication ticket.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.AuthenticationTicketSerializer.Read(System.IO.BinaryReader)">
            <summary>
            Reads the authentication ticket using the given reader.
            </summary>
            <param name="reader">A reader used to read the ticket.</param>
            <returns>The read authentication ticket.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tickets.AuthenticationTicket">
            <summary>
            Represents a basic authentication ticket which for example can be stored on cookies.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> is a ticket used by a cookie based authentication. For example it can be used
            by a mixed authentication mechanism where we authenticate against the SiteMinder and when no SiteMinder authentication 
            is on place then we try to authenticate using the Windows authentication.
            </para>
            <para>
            In our sample, mixed authentication no matter if SiteMinder or Windows authentication is used in both cases the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/>
            can be created and can be stored on a cookie. It means that SiteMinder and Windows mixed authentication may become a cookie based
            authentication. The Active Directory can only be used to verify user credentials and store information on a cookie. SiteMinder can also be used to 
            provide information about a user and also store it on a cookie.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Security.Tickets.AuthenticationTicket.UserName">
            <summary>
            A name of the currently authenticated user.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Tickets.AuthenticationTicket.Issued">
            <summary>
            A point in time when this authentication ticket has been issued (created).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Tickets.AuthenticationTicket.Expiration">
            <summary>
            A point in time when this authentication ticket expiries.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.AuthenticationTicket.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates an instance of the authentication ticket.
            </summary>
            <param name="userName">A name of the user.</param>
            <param name="issued">A date when a ticket has been issued.</param>
            <param name="expiration">A ticker expiration date.</param>
        </member>
        <member name="P:Volvo.NVS.Security.Tickets.AuthenticationTicket.IsAuthenticated">
            <summary>
            Determines if the current ticket represents an authenticated identity.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard">
            <summary>
            Defines a contract for the authentication ticket protection methods (encryption and hash security methods).
            </summary>
            <remarks>
            See also the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> and <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicketProtector"/> classes.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard.Encode(System.Byte[])">
            <summary>
            Encrypts data and/or appends a hash-based message authentication code.
            </summary>
            <param name="data">Data to be encrypted.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard.Decode(System.String)">
            <summary>
            Decodes and/or validates data that has been encrypted or provided with a hash-based message authentication code.
            </summary>
            <param name="data">Data to be decoded.</param>
            <returns>Decoded data.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard.Protect(System.Byte[])">
            <summary>
            Protects the specified data by encrypting or signing it.
            </summary>
            <param name="data">Data to be protected.</param>
            <returns>Protected data.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard.Unprotect(System.Byte[])">
            <summary>
            Unprotects the specified data, which was protected by the <see cref="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard.Protect(System.Byte[])"/> method.
            </summary>
            <param name="data">Data to be unprotected.</param>
            <returns>Unprotected data.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tickets.IAuthenticationTicketProtector">
            <summary>
            Defines a contract for <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> protection services.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketProtector.Protect(Volvo.NVS.Security.Tickets.AuthenticationTicket)">
            <summary>
            Protects and serializes the authentication ticket by encrypting, signing, encoding it as defined on the provided <see cref="T:Volvo.NVS.Security.Tickets.IAuthenticationTicketGuard"/>.
            </summary>
            <param name="ticket">A ticket to be protected.</param>
            <returns>The serialized and protected authentication ticket.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketProtector.Unprotect(System.String)">
            <summary>
            Unprotects the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> deserializing it from the given data.
            </summary>
            <param name="data">Authentication ticket data to be deserialized and unprotected.</param>
            <returns>The unprotected authentication ticket.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tickets.IAuthenticationTicketSerializer">
            <summary>
            Defines a contract for <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> serialization types.
            Check also the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicketSerializer"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketSerializer.Serialize(Volvo.NVS.Security.Tickets.AuthenticationTicket)">
            <summary>
            Serializes the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> into a stream of bytes.
            </summary>
            <param name="ticket">A ticket to be serialized.</param>
            <returns>A collection of bytes containing serialized ticked data.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tickets.IAuthenticationTicketSerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes the <see cref="T:Volvo.NVS.Security.Tickets.AuthenticationTicket"/> from the stream of bytes.
            </summary>
            <param name="data">A collection of bytes with a serialized ticket data.</param>
            <returns>The deserialized authentication ticket data.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Properties.CommonAssemblyInfoConstants">
            <summary>
            Public constants related into the assembly information and assembly signing.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Properties.CommonAssemblyInfoConstants.PublickKeyAttribute">
            <summary>
            The Security library public key attribute string which can be applied directly on the InternalsVisibleTo.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Properties.CommonAssemblyInfoConstants.ToDynamicProxyGenAssembly2">
            <summary>
            Enables the castle dynamic proxy to generate proxies for internal types during the unit testing.
            The Moq itself is using the castle internally in order to generate proxies.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Resources.SecurityResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.AudienceRequired">
            <summary>
              Looks up a localized string similar to An audience is required and must be configures for the library..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.AuthenticationNotAllowedForType">
            <summary>
              Looks up a localized string similar to The authentication &apos;{0}&apos; is not allowed. Check configuration of your application.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.AuthenticationTicketMustUseUtc">
            <summary>
              Looks up a localized string similar to Authentication ticket {0} date must be in UTC..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.BinderAlreadyDefined">
            <summary>
              Looks up a localized string similar to The binder for type {0} is already added.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.BindingConvertionTypeFailure">
            <summary>
              Looks up a localized string similar to The converter {0} has returned the object of type {1} while the {2} was expected by the CheckAccess method parameter.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.BindingNameMatchFailure">
            <summary>
              Looks up a localized string similar to &quot;The CheckAccess method requires the parameter with the &apos;{0}&apos; name. Unable to bind this parameter as it is not present on the current list of method arguments.&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.BindingTypeMatchFailure">
            <summary>
              Looks up a localized string similar to &quot;The parameter &apos;{0}&apos; has a different type on the CheckAccess method ({1}) and on the currently secured method (where the CheckAccess attribute is applied) ({2}). Check the parameter types, optionally use a custom binder or define a custom converter between the two types. Automatic conversion between the two types is not possible.&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CertificateNotFound">
            <summary>
              Looks up a localized string similar to The certificate &quot;{0}&quot; could not be found on {1} and in the &quot;{2}&quot; certificate store.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessClassIncorrect">
            <summary>
              Looks up a localized string similar to The type {0} should be public, visible and not sealed class in order to be decorated with CheckAccess attributes and used with virtual interception..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessCorrectReturnTypeRequired">
            <summary>
              Looks up a localized string similar to &quot;The {0} method on {1} must return the {2} type&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessInterfaceTypeRequired">
            <summary>
              Looks up a localized string similar to &quot;The type {0} is incorrect. The interface is required&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessMethodInfoProviderMissing">
            <summary>
              Looks up a localized string similar to The check access method info provider should be returned by the binding object. Check implementation of {0}..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessMethodRequired">
            <summary>
              Looks up a localized string similar to &quot;The type {0} must contain the {1} method&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessMultipleMatchingMethodsLocated">
            <summary>
              Looks up a localized string similar to Multiple CheckAccess methods found on the {0} type matching the secured method arguments. Check that only one CheckAccess method matching the current method arguments exists..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessNoMatchingMethodLocated">
            <summary>
              Looks up a localized string similar to Unable to locate the CheckAccess method on the {0} type matching the secured method arguments. Check that current method argument names match the CheckAccess method names..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessNonGenericMethodRequired">
            <summary>
              Looks up a localized string similar to &quot;The {0} method on {1} cannot be generic&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessNonGenericTypeRequired">
            <summary>
              Looks up a localized string similar to &quot;The type {0} is incorrect. The type cannot be generic&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessOnAbstractNotAllowed">
            <summary>
              Looks up a localized string similar to The CheckAccess attribute cannot be applied on the abstract method. Check the &apos;{0}&apos; method..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessOnCtorNotAllowed">
            <summary>
              Looks up a localized string similar to The CheckAccess attribute cannot be applied on the constructor..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessOnNonVirtualNotAllowed">
            <summary>
              Looks up a localized string similar to The CheckAccess attribute can only be applied on virtual method so proxy can be generated. Check the &apos;{0}&apos; method..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessOnStaticNotAllowed">
            <summary>
              Looks up a localized string similar to The CheckAccess attribute cannot be applied on the static method. Check the &apos;{0}&apos; method..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessSingleMethodRequired">
            <summary>
              Looks up a localized string similar to &quot;The type &apos;{0}&apos; may contain only ONE {1} method because Security Library binder currently configured accepts only one CheckAccess on a single interface. Check the &apos;{0}&apos; or change the binder into a different one.&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CheckAccessUnableToSelectMethod">
            <summary>
              Looks up a localized string similar to Unable to choose the CheckAccess method between the &apos;{0}&apos; and &apos;{1}&apos;. Check that there are no CheckAccess methods with the same parameter names. Check that the current, secured method arguments do not match with two different CheckAccess methods..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CngKeyMustBeTheSameSize">
            <summary>
              Looks up a localized string similar to The x and y of the CngKey must both be of the same size.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.CngKeySizeIsNotSupported">
            <summary>
              Looks up a localized string similar to The {0} size of the x and y is currently not supported for the CngKey.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.ConfigurationErrorClaimsProviderRegistered">
            <summary>
              Looks up a localized string similar to Unable to configure the &apos;{0}&apos; claims provider. The other claims provider is already configured and registered. Check that you do not register it twice. Check also your unity configuration and maapings (if any) which may also provide the registration of the provider..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.ConfigurationErrorClaimsServiceRegistered">
            <summary>
              Looks up a localized string similar to Unable to configure the &apos;{0}&apos; claims service. The other claims service is already configured and registered.  Check that you do not register it twice. Check also your unity configuration and maapings (if any) which may also provide the registration of the service..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.ConfigurationJWTSignedValidatorRegistered">
            <summary>
              Looks up a localized string similar to The JWT Signed validator is already registered.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.ConverterAlreadyDefined">
            <summary>
              Looks up a localized string similar to The converter between {0} and {1} is already defined..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.IssuerRequired">
            <summary>
              Looks up a localized string similar to An issuer is required and must be configured for the library..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.KeyNotFound">
            <summary>
              Looks up a localized string similar to Unable to valide JSON Web Tokens as there is no default Certificate specified and there is no dynamic key provider given.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.KidRequiredOnToken">
            <summary>
              Looks up a localized string similar to The kid property is required on the JSON Web Token header.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.MultipleCertificatesFound">
            <summary>
              Looks up a localized string similar to Multiple &quot;{0}&quot; certificates found on {1} in the &quot;{2}&quot; certificate store.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoAuthenticatedIdentiy">
            <summary>
              Looks up a localized string similar to No authenticated identity is found on the current context, {0}..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoIdentityIsAuthenticated">
            <summary>
              Looks up a localized string similar to The received identity is not authenticated..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoIssuerOnToken">
            <summary>
              Looks up a localized string similar to No issuer has been detected on the received token..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoKeysFromKeyProvider">
            <summary>
              Looks up a localized string similar to The current key provider did not give any keys to be used for the JSON Web Token validation..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NonceDoesNotMatch">
            <summary>
              Looks up a localized string similar to A received nonce value does not match a requested value..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoSyncNoCurrentPrincipal">
            <summary>
              Looks up a localized string similar to Cannot synchronize principals as the current one is null or not a claims principal.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoSyncNoUpdatedPrincipal">
            <summary>
              Looks up a localized string similar to Cannot synchronize principals as the updated one is null or not a claims principal.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoTokenCouldBeValidated">
            <summary>
              Looks up a localized string similar to The token could not be validated..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoTokenDetectedInHeaderAndCookie">
            <summary>
              Looks up a localized string similar to No {0} token has been detected on the header and cookie..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoTokenOnClaimsIdentity">
            <summary>
              Looks up a localized string similar to No {0} token has been found on the current claims identity..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.NoTokenProtectedTextRead">
            <summary>
              Looks up a localized string similar to The token could not be read. The received token is {0}.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.OperationNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to &quot;Operation name cannot be null or empty&quot;.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.SecurityKeysNotFound">
            <summary>
              Looks up a localized string similar to There are no keys found for the JSON Web Token to be validated.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.SignatureKeysRequired">
            <summary>
              Looks up a localized string similar to A certificate or a key provider is required and must be configured for the library. The source of keys is needed in order to check JWT signatures..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.SignatureValidationFailure">
            <summary>
              Looks up a localized string similar to The token signature validation has failed. A key tried is {0}..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.StateDoesNotMatch">
            <summary>
              Looks up a localized string similar to The received state value does not match the requested state value..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.StateNotFound">
            <summary>
              Looks up a localized string similar to No state value found on the result uri..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.TokenExpired">
            <summary>
              Looks up a localized string similar to The token has expired.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.UnableToCreateCertificate">
            <summary>
              Looks up a localized string similar to Unable to create an X509Certificate2 from the X509Data: &apos;{0}&apos;. See inner exception for additional details..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.UnableToCreateRSAPublicKey">
            <summary>
              Looks up a localized string similar to Unable to create an RSA public key from the Exponent and Modulus found in the JsonWebKey: E: &apos;{0}&apos;, N: &apos;{1}&apos;. See inner exception for additional details..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.UnityCheckAccessTypeResolutionFailure">
            <summary>
              Looks up a localized string similar to The provided &apos;{0}&apos; interface could not be resolved. You must register it within the Unity container. Check that it is correctly registered..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.UnityClaimsProviderTypeResolutionFailure">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; could not be resolved. Check that Unity is configured for your application and its configuration is correct.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.UnityClaimsServiceTypeResolutionFailure">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; could not be resolved. You must register it within the Unity. Check that it is correctly registered.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Resources.SecurityResources.UnityConfigurationFailure">
            <summary>
              Looks up a localized string similar to Unity initialization error. Check that Unity is configured for your application and its configuration is correct.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenData">
            <summary>
            Holds information about an authenticated token.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Tokens.AuthenticatedTokenData.Schema">
            <summary>
            A token schema, type e.g. Bearer.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Tokens.AuthenticatedTokenData.Token">
            <summary>
            A token.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.AuthenticatedTokenData.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the authenticated token data.
            </summary>
            <param name="schema">A token schema, type e.g. Bearer.</param>
            <param name="token">A token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.AuthenticatedTokenData.ToString">
            <summary>
            Returns a string which represents the current token together with its schema.
            </summary>
            <returns>A schema plus a space separated token value.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider">
            <summary>
            Provides information about tokens which were used by the authentication process (authentication handlers).
            </summary>
            <remarks>
            <para>
            Depending on type of the performed authentication various tokens could be used by the authentication handler. It is often
            required to get access into the complete token which was used during the authentication. For example: one may need to get
            access into the OAuth 2 access_token or OpenID Connect id_token in order to move those tokens forward when accessing other
            application services. In such a case the tokens should be included in the further requests.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider"/> gives access into a token used during the authentication process. It also
            checks if the token has expired or not and gives a chance to take actions when the token is expired (so one may for
            example refresh the token).
            </para>
            <para>
            The token is read from one of the claims of the authenticated identity. It means that the used authentication handler must
            store the token on the list of identity claims itself. Check the used authentication handler in order to verify if it stores
            information about a token on the list of claims.
            </para>
            <para>
            The token expiration is checked by usage of the nbf and exp claims of the current identity. Those claims must be set by the
            authentication handler together with the token and should follow the JSON Web Token described standard.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider.tokenClaimType">
            <summary>
            A type of the claim on which the token is expected to be stored.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider.service">
            <summary>
            A claims service used by the token provider.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider.Service">
            <summary>
            Provides the claims service.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider.#ctor(System.String)">
            <summary>
            Creates an instance of the authenticated token provider.
            </summary>
            <param name="tokenClaimType">A type of the claim on which the token is expected to be stored.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider.#ctor(System.String,Volvo.NVS.Security.Claims.IClaimsService)">
            <summary>
            Creates an instance of the authenticated token provider.
            </summary>
            <param name="tokenClaimType">A type of the claim on which the token is expected to be stored.</param>
            <param name="service">A claims service used by the token provider.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider.GetToken">
            <summary>
            Returns the token which was used by the authentication handler. It does not refresh the token
            and immediately throw the <see cref="T:Volvo.NVS.Security.Exceptions.NotAuthorizedException"/> when the token is not valid anymore.
            </summary>
            <remarks>
            See the <see cref="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider"/> class level description for details.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider.GetToken(Volvo.NVS.Security.Handlers.IClientAuthenticationHandler)">
            <summary>
            Returns the token which was used by the authentication handler. Refreshes the token if it has expired.
            </summary>
            <remarks>
            See the <see cref="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider"/> class level description for details.
            </remarks>
            <param name="handler">An authentication handler which should be used in order to refresh the token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider.GetToken(System.Action)">
            <summary>
            Returns the token which was used by the authentication handler. Refreshes the token if it has expired.
            </summary>
            <remarks>
            See the <see cref="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider"/> class level description for details.
            </remarks>
            <param name="refreshToken">An action refreshing the token. The action is executed if a token has expired.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.JwtESSignedValidator">
            <summary>
            Provides a JSON Web Token validator where JSON Web token signature (JWS) is verified and Elliptic Curve (ES) signature algorithms are supported.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtESSignedValidator"/> is a JSON Web Token validator which can be used by the Ping authentication handlers and by the other NVS Security
            library authentication handlers in which JSON Web Tokens are verified.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtESSignedValidator"/> supports the following signature algorithms: ES256, ES384, ES512.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtESSignedValidator"/> is obtaining JSON Web Keys (JWKs) dynamically from the <see cref="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider"/>. The key provider is required
            for this validator. The <see cref="T:Volvo.NVS.Security.Tokens.JwtESSignedValidator"/> is only processing keys where the Kty property is set to 'EC'. It is expecting the x and y
            coordinates to be given on the key as well as the 'kid' property which is used in order to find a matching validation key for the currently processing token.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtESSignedValidator"/> must be registered within the unit container in order to be used. It can also be configured with help of
            the <see cref="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.SetJwtValidator(Volvo.NVS.Security.Tokens.IJwtSignedValidator)"/> fluent configuration method.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtESSignedValidator.supportedAlgorithms">
            <summary>
            A collection of algorithms allowed by the current validator.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtESSignedValidator.#ctor">
            <summary>
            Creates an instance of the JSON Web Token validator where Elliptic Curve Digital Signature algorithms are supported.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtESSignedValidator.Validate(System.IdentityModel.Tokens.JwtSecurityToken,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityToken,System.Collections.Generic.IList{Volvo.NVS.Security.Cryptography.CngNamedKey})">
            <summary>
            Validates a JSON Web Token together with a token signature.
            </summary>
            <param name="jwt">A parsed JSON Web Token representation.</param>
            <param name="protectedText">A token text (content) from which parsing has been executed.</param>
            <param name="allowedAudiences">A collection of expected and allowed audiences on a token.</param>
            <param name="allowedIssuer">An expected and allowed issuer of a token.</param>
            <param name="defaultToken">A default token holding a default token key which should be used in order to verify a signature.</param>
            <param name="keys">A collection of keys obtained from the current key provider.</param>
            <returns>A principal object representing an identity recognized on the successfully validated token.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtESSignedValidator.ValidateSignature(System.IdentityModel.Tokens.JwtSecurityToken,System.Collections.Generic.IList{Volvo.NVS.Security.Cryptography.CngNamedKey})">
            <summary>
            Validates a signature of the give JSON Web Token.
            </summary>
            <param name="jwt">A JSON Web Token to be validated.</param>
            <param name="keys">A collection of keys from which one should be selected in order to run the validation.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtESSignedValidator.FindMatchingKey(System.IdentityModel.Tokens.JwtSecurityToken,System.Collections.Generic.IList{Volvo.NVS.Security.Cryptography.CngNamedKey})">
            <summary>
            Finds a key to be used for the current JSON Web Token validation.
            </summary>
            <param name="jwt">A JSON Web Token to be validated.</param>
            <param name="keys">A collection of keys from which one should be selected in order to run the validation.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtESSignedValidator.TranslateKeys(System.Collections.Generic.IList{Volvo.NVS.Security.Cryptography.IJsonWebKey})">
            <summary>
            Translates the JSON Web Keys into the collection of Elliptic Curve applicable keys.
            </summary>
            <param name="keys">A collection of JSON Web keys which should be translated.</param>
            <returns>A collection of EC applicable keys.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.JwtHSSignedValidator">
            <summary>
            Provides a JSON Web Token validator where JSON Web token signature (JWS) is verified and HMAC using SHA signature algorithm is supported.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtHSSignedValidator"/> is a JSON Web Token validator which can be used by the Ping authentication handlers and by the other NVS Security
            library authentication handlers in which JSON Web Tokens are verified.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtHSSignedValidator"/> supports the following signature algorithms: HS256, HS384, HS512.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtHSSignedValidator"/> is able to obtain JSON Web Keys (JWKs) dynamically when the <see cref="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider"/> is set on the current
            authentication handler options. The <see cref="T:Volvo.NVS.Security.Tokens.JwtHSSignedValidator"/> is only processing symmetric keys (keys where the Kty property is set to 'oct'). 
            The 'k' property holding a key is supported on the received JSON Web Key message.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtHSSignedValidator"/> must be registered within the unit container in order to be used. It can also be configured with help of
            the <see cref="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.SetJwtValidator(Volvo.NVS.Security.Tokens.IJwtSignedValidator)"/> fluent configuration method.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtHSSignedValidator.supportedAlgorithms">
            <summary>
            A collection of algorithms allowed by the current validator.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtHSSignedValidator.#ctor">
            <summary>
            Creates an instance of the JSON Web Token validator where a token signature is included in the validation process.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtHSSignedValidator.#ctor(System.IdentityModel.Tokens.ISecurityTokenValidator)">
            <summary>
            Creates an instance of the JSON Web Token validator where a token signature is included in the validation process.
            </summary>
            <param name="tokenValidator">A security token validator used in order to validate tokens.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtHSSignedValidator.TranslateKeys(System.Collections.Generic.IList{Volvo.NVS.Security.Cryptography.IJsonWebKey})">
            <summary>
            Translates received <see cref="T:Volvo.NVS.Security.Cryptography.IJsonWebKey"/> keys into the collection of <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> tokens.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator">
            <summary>
            Provides a JSON Web Token validator where JSON Web token signature (JWS) is verified and RSA signature algorithms are supported.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/> is a default JSON Web Token validator used by the Ping authentication handlers and by the other NVS Security
            library authentication handlers in which JSON Web Tokens are verified.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/> supports the following signature algorithms: RS256, RS384, RS512.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/> is able to obtain JSON Web Keys (JWKs) dynamically when the <see cref="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider"/> is set on the current
            authentication handler options. The <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/> is only processing RSA keys (keys where the Kty property is set to RSA). The x5c
            certificate property is accepted as well as the 'e' and 'n' properties on the received JSON Web Key.
            </para>
            <para>
            When no custom JWT token validator is registered within the unity then this <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/> is used. A single instance of the
            <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/> is created for the complete application in order to reduce allocations and improve performance. It is however up to
            the used authentication handler to decide how the validator is utilized. See the documentation of the selected authentication handler for details.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtRSASignedValidator.supportedAlgorithms">
            <summary>
            A collection of algorithms allowed by the current validator.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtRSASignedValidator.#ctor">
            <summary>
            Creates an instance of the JSON Web Token validator where a token signature is included in the validation process.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtRSASignedValidator.#ctor(System.IdentityModel.Tokens.ISecurityTokenValidator)">
            <summary>
            Creates an instance of the JSON Web Token validator where a token signature is included in the validation process.
            </summary>
            <param name="tokenValidator">A security token validator used in order to validate tokens.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtRSASignedValidator.TranslateKeys(System.Collections.Generic.IList{Volvo.NVS.Security.Cryptography.IJsonWebKey})">
            <summary>
            Translates received <see cref="T:Volvo.NVS.Security.Cryptography.IJsonWebKey"/> keys into the collection of <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> tokens.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.JwtSecurityTokenSignedValidator">
            <summary>
            Provides a basic and abstract JSON Web Token validator where JSON Web token signature (JWS) is verified and <see cref="T:System.IdentityModel.Tokens.ISecurityTokenValidator"/> is
            used internally to realize the validation logic.
            </summary>
            <remarks>
            <para>
            This JSON Web Token validator uses an implementation of the <see cref="T:System.IdentityModel.Tokens.ISecurityTokenValidator"/>. When this implementation is not explicitly provided
            then the <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> is used. It means that all the limits applicable for the <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> also
            apply for this validator. For example: only HMAC and RSA based signatures are accepted by the validator.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtSecurityTokenSignedValidator"/> is able to obtain JSON Web Keys (JWKs) dynamically when the <see cref="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider"/> is set on 
            the current authentication handler options. See the <see cref="T:Volvo.NVS.Security.Tokens.JwtSignedValidator`1"/> base class for details.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtSecurityTokenSignedValidator.tokenValidator">
            <summary>
            A security token handler used to validate received tokens.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtSecurityTokenSignedValidator.defaultValidationParameters">
            <summary>
            Default validation parameters which are common for the complete validator and are not expected to be modified.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSecurityTokenSignedValidator.#ctor(System.IdentityModel.Tokens.ISecurityTokenValidator,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates an instance of the JSON Web Token validator where a token signature is included in the validation process.
            </summary>
            <param name="tokenValidator">A security token validator used in order to validate tokens.</param>
            <param name="supportedAlgorithms">A collection of supported algorithms ids (alg claim values).</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSecurityTokenSignedValidator.GetDefaultValidationParameters">
            <summary>
            Creates default validation parameters from the give set of ping authentication handler options.
            </summary>
            <returns>Default token validation parameters.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSecurityTokenSignedValidator.Validate(System.IdentityModel.Tokens.JwtSecurityToken,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityToken,System.Collections.Generic.IList{System.IdentityModel.Tokens.SecurityToken})">
            <summary>
            Validates a JSON Web Token together with a token signature (a signature is required and should be present on the token itself).
            </summary>
            <param name="jwt">A parsed JSON Web Token representation.</param>
            <param name="protectedText">A token text (content) from which parsing has been executed.</param>
            <param name="allowedAudiences">A collection of expected and allowed audiences on a token.</param>
            <param name="allowedIssuer">An expected and allowed issuer of a token.</param>
            <param name="defaultToken">A default token holding a default token key which should be used in order to verify a signature.</param>
            <param name="keys">A collection of keys obtained from the current key provider.</param>
            <returns>A principal object representing an identity recognized on the successfully validated token.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.JwtSignedValidatorProvider">
            <summary>
            Provides a default JSON Web Token validator, a default implementation of the <see cref="T:Volvo.NVS.Security.Tokens.IJwtSignedValidator"/> to be used by the authentication handler.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtSignedValidatorProvider.defaultValidator">
            <summary>
            A default JSON Web Token validator used when no custom implementation is provided and registered within the unity.
            </summary>
            <remarks>
            We use a static instance of the default validator so we reduce allocations needed to perform the validation itself.
            The consequence from this is that the validator must be thread-safe and must assume a single instance of it is used.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSignedValidatorProvider.Create">
            <summary>
            Provides a default, singleton instance of the JSON Web Token validator to be used by the handler.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.IAuthenticatedTokenProvider">
            <summary>
            Defines a contract which must be fulfilled by providers giving information about tokens which were used by the authentication process.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.IAuthenticatedTokenProvider.GetToken">
            <summary>
            Returns the token which was used by the authentication handler. It does not refresh the token
            and immediately throw the <see cref="T:Volvo.NVS.Security.Exceptions.NotAuthorizedException"/> when the token is not valid anymore.
            </summary>
            <remarks>
            See the <see cref="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider"/> class level description for details.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.IAuthenticatedTokenProvider.GetToken(Volvo.NVS.Security.Handlers.IClientAuthenticationHandler)">
            <summary>
            Returns the token which was used by the authentication handler. Refreshes the token if it has expired.
            </summary>
            <remarks>
            See the <see cref="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider"/> class level description for details.
            </remarks>
            <param name="handler">An authentication handler which should be used in order to refresh the token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.IAuthenticatedTokenProvider.GetToken(System.Action)">
            <summary>
            Returns the token which was used by the authentication handler. Refreshes the token if it has expired.
            </summary>
            <remarks>
            See the <see cref="T:Volvo.NVS.Security.Tokens.AuthenticatedTokenProvider"/> class level description for details.
            </remarks>
            <param name="refreshToken">An action refreshing the token. The action is executed if a token has expired.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.IJwtSignedValidator">
            <summary>
            Defines a contract which must be fulfilled by types validating JSON Web Tokens (JWT) together with token signatures (JWS).
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.IJwtSignedValidator.Validate(System.IdentityModel.Tokens.JwtSecurityToken,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityToken,Volvo.NVS.Security.Cryptography.IJwsKeyProvider)">
            <summary>
            Validates a JSON Web Token together with a token signature (a signature is required and should be present on the token itself).
            </summary>
            <param name="jwt">A parsed JSON Web Token representation.</param>
            <param name="protectedText">A token text (content) from which parsing has been executed.</param>
            <param name="allowedAudiences">A collection of expected and allowed audiences on a token.</param>
            <param name="allowedIssuer">An expected and allowed issuer of a token.</param>
            <param name="defaultToken">A default token holding a default token key which should be used in order to verify a token signature.</param>
            <param name="keyProvider">A key provider giving access to keys which should be included during the JWT validation.</param>
            <returns>A principal object representing an identity recognized on the successfully validated token.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.IJwtValidator">
            <summary>
            Defines a contract which must be fulfilled by types providing basic JSON Web Token (JWT) validation. This validation
            does not include a token signature validation. For token signature validation (JWS) see the <see cref="T:Volvo.NVS.Security.Tokens.IJwtSignedValidator"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.IJwtValidator.ValidateNonce(System.String,System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates a nonce value making sure the received one is the same as the one attached into the request.
            </summary>
            <param name="nonce">An expected nonce value.</param>
            <param name="jwt">A received, secured JSON Web Token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.IJwtValidator.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates audiences received on the token with the list of expected audiences.
            </summary>
            <param name="audiences">A collection of expected, allowed audiences.</param>
            <param name="jwt">A received, secured JSON Web Token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.IJwtValidator.ValidateIssuer(System.String,System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates audiences received on the token with the list of expected audiences.
            </summary>
            <param name="issuer">An expected issuer.</param>
            <param name="jwt">A received, secured JSON Web Token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.IJwtValidator.ValidateLifetime(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates lifetime of a token checking if it has not expired.
            </summary>
            <param name="jwt">A received, secured JSON Web Token.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.JwtSignedValidator`1">
            <summary>
            Provides a basic and abstract JSON Web Token validator where token signature keys are taken from a given <see cref="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtSignedValidator`1"/> allows only a predefined lists of signature algorithms to be used by a token. The list of supported
            algorithms is provided into the <see cref="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.#ctor(System.Collections.Generic.IList{System.String})"/> constructor and is checked during the token validation.
            The explicit algorithms are supported in order to reduce the possible attack vectors for example: a case in which 'none' is used as an algorithm
            or a case in which one tries to use an RSA public key as the HMAC private key in order to bypass the validation. It also means that algorithm 
            negotiation is limited and a client cannot specify any algorithm it wishes to use (via a token header). The client is only allowed to pass the alg
            as explicitly defined and passed into the constructor of this base validator class.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Tokens.JwtSignedValidator`1"/> obtains keys to be used by the token signature validation mechanism from the <see cref="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider"/>
            when it is given. The obtained keys are hold in cache and a new cache entry is created every time the <see cref="P:Volvo.NVS.Security.Cryptography.IJwsKeyProvider.UpdateId"/>
            changes. The complete cache is recycled when the <see cref="F:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.CacheThreshold"/> value is reached.
            </para>
            <para>
            Derived types receive the obtained collection of dynamic token signature keys and should override the <see cref="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.Validate(System.IdentityModel.Tokens.JwtSecurityToken,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityToken,System.Collections.Generic.IList{`0})"/> 
            method. The overridden method runs the complete validation using given dynamic keys and using the current validation options.
            </para>
            <para>
            The derived types should also implement the <see cref="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.TranslateKeys(System.Collections.Generic.IList{Volvo.NVS.Security.Cryptography.IJsonWebKey})"/> function which must translate the received <see cref="T:Volvo.NVS.Security.Cryptography.IJsonWebKey"/> keys
            into the currently expected key format (expected by a specific validator).
            </para>
            </remarks>
            <typeparam name="TKey">A type representing a JSON Web Key used by a validator.</typeparam>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.cachedKeys">
            <summary>
            A cached collection of already translated JSON Web Token keys improving performance.
            </summary>
            <remarks>
            We are not making cache instance static as there should be a single validator instance for the complete application itself.
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.CacheThreshold">
            <summary>
            A threshold value saying how many sets of keys should be hold in cache. When this value is reached then a complete cache is recycled. A single
            set of keys is created per a single unique id of the <see cref="P:Volvo.NVS.Security.Cryptography.IJwsKeyProvider.UpdateId"/>. If only one key provider is used for the complete
            application (a common case) then a single set is in fact used for every version of keys taken from the server.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.sync">
            <summary>
            A synchronization object.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.Logger">
            <summary>
            An application logger used to write any security related messages.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.supportedAlgorithms">
            <summary>
            A collection of supported algorithms which should be allowed by the current validator.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Creates an instance of the JSON Web Token validator where a token signature is included in the validation process.
            </summary>
            <param name="supportedAlgorithms">A collection of supported algorithm ids (alg claim values as defined in the JWT standard).</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.Validate(System.IdentityModel.Tokens.JwtSecurityToken,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityToken,Volvo.NVS.Security.Cryptography.IJwsKeyProvider)">
            <summary>
            Validates a JSON Web Token together with a token signature (a signature is required and should be present on the token itself).
            </summary>
            <remarks>
            This validation method will fetch keys against which signatures should be checked when the <see cref="T:Volvo.NVS.Security.Cryptography.IJwsKeyProvider"/> is given.
            Keys are only fetched when the <see cref="P:Volvo.NVS.Security.Cryptography.IJwsKeyProvider.UpdateId"/> changes. In all other cases a cached value of the key set
            can be used.
            </remarks>
            <param name="jwt">A parsed JSON Web Token representation.</param>
            <param name="protectedText">A token text (content) from which parsing has been executed.</param>
            <param name="allowedAudiences">A collection of expected and allowed audiences on a token.</param>
            <param name="allowedIssuer">An expected and allowed issuer of a token.</param>
            <param name="defaultToken">A default token holding a default token key which should be used in order to verify a signature.</param>
            <param name="keyProvider">A key provider giving access to keys which should be included during the JWT validation.</param>
            <returns>A principal object representing an identity recognized on the successfully validated token.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.Validate(System.IdentityModel.Tokens.JwtSecurityToken,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityToken,System.Collections.Generic.IList{`0})">
            <summary>
            Validates a JSON Web Token together with a token signature.
            </summary>
            <param name="jwt">A parsed JSON Web Token representation.</param>
            <param name="protectedText">A token text (content) from which parsing has been executed.</param>
            <param name="allowedAudiences">A collection of expected and allowed audiences on a token.</param>
            <param name="allowedIssuer">An expected and allowed issuer of a token.</param>
            <param name="defaultToken">A default token holding a default token key which should be used in order to verify a signature.</param>
            <param name="keys">A collection of keys obtained from the current key provider.</param>
            <returns>A principal object representing an identity recognized on the successfully validated token.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.RecycleCache">
            <summary>
            Recycles the current cache used to store prepared collection of keys.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.GetSigningKeys(Volvo.NVS.Security.Cryptography.IJwsKeyProvider,`0)">
            <summary>
            Gets keys used in the JSON Web Token signature verification and given by the current dynamic key provider.
            </summary>
            <param name="keyProvider">A provider giving keys to be used.</param>
            <param name="defaultToken">An optional, default constant key to be used.</param>
            <returns>A collection representing keys to be used by the JSON Web Token signature validation.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtSignedValidator`1.TranslateKeys(System.Collections.Generic.IList{Volvo.NVS.Security.Cryptography.IJsonWebKey})">
            <summary>
            Translates received <see cref="T:Volvo.NVS.Security.Cryptography.IJsonWebKey"/> keys into the collection of keys recognized by the current validator.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.Tokens.JwtValidator">
            <summary>
            Provides basic JSON Web Token validation. No signature validation is provided by this class.
            </summary>
            <remarks>
            For JSON Web Token validation including token signatures check the <see cref="T:Volvo.NVS.Security.Tokens.JwtRSASignedValidator"/>, <see cref="T:Volvo.NVS.Security.Tokens.JwtHSSignedValidator"/>, <see cref="T:Volvo.NVS.Security.Tokens.JwtESSignedValidator"/>.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtValidator.ValidateNonce(System.String,System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates a nonce value making sure the received one is the same as the one attached into the request.
            </summary>
            <param name="nonce">An expected nonce value.</param>
            <param name="jwt">A received, secured JSON Web Token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtValidator.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates audiences received on the token with the list of expected audiences.
            </summary>
            <param name="audiences">A collection of expected, allowed audiences.</param>
            <param name="jwt">A received, secured JSON Web Token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtValidator.ValidateIssuer(System.String,System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates audiences received on the token with the list of expected audiences.
            </summary>
            <param name="issuer">An expected issuer.</param>
            <param name="jwt">A received, secured JSON Web Token.</param>
        </member>
        <member name="M:Volvo.NVS.Security.Tokens.JwtValidator.ValidateLifetime(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates lifetime of a token checking if it has not expired.
            </summary>
            <param name="jwt">A received, secured JSON Web Token.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Unity.CheckAccessInterceptionRegistrar">
            <summary>
            The class configures the unity container and setups all the currently mapped classes (having methods decorated with the 
            <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>) for the unity virtual method interception.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> verifies authorization for the method on which it is applied and using the current principal resolved
            from the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/>.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> is not working on its own and requires a medium, host which will initialize it and use when the method call
            is made. It is true for all CheckAccess attributes e.g. the MVC related attribute is initialized and executed by the MVC Framework.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> is the Unity <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute"/>. It means it can be applied to class members, class methods
            and it is executed by usage of the Unity interception mechanism. The unity interception mechanism must be configured so the attribute is visible,
            usable and consumed.
            </para>
            <para>
            One may configure the unity interception manually following the unity documentation. When manual configuration is used then the 
            <see cref="T:Volvo.NVS.Security.Unity.CheckAccessInterceptionRegistrar"/> does not have to be used.
            </para>
            <para>
            One may automate configuration of unity interception for classes containing any methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>.
            The <see cref="T:Volvo.NVS.Security.Unity.CheckAccessInterceptionRegistrar"/> provides such automation of the unity interception configuration.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Unity.CheckAccessInterceptionRegistrar"/> looks for all classes mapped within the current unity container and checks if those classes have
            methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>. All such classes are registered for the interception using the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Unity.CheckAccessInterceptionRegistrar.ConfigureInterception">
            <summary>
            Configure the interception if not already done or return the already configured instance.
            </summary>
            <returns>The unity interception configuration instance.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Unity.CheckAccessInterceptionRegistrar.ValidateMethodForInterception(System.Reflection.MethodInfo)">
            <summary>
            Validate the method (from the class) in order to ensure that it can be used in the virtual
            method interception process and that the CheckAccess attribute is allowed on such a method.
            </summary>
            <param name="method">The method to be validate.</param>
            <exception cref="T:Volvo.NVS.Security.Exceptions.CheckAccessAttributeUsageException">Thrown when a method is not valid to be used in the interception process.</exception>
        </member>
        <member name="M:Volvo.NVS.Security.Unity.CheckAccessInterceptionRegistrar.FindAndValidateCheckAccessDecoratedMethods(System.Type)">
            <summary>
            Find all the methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> and validate if the methods
            can be used in the unity virtual method interception process.
            </summary>
            <returns>True if any methods decorated with the CheckAccessAttribute where found on the given type.</returns>
            <exception cref="T:Volvo.NVS.Security.Exceptions.CheckAccessAttributeUsageException">Thrown when any methods are not valid to be used in the interception process and are CheckAccess decorated.</exception>
        </member>
        <member name="M:Volvo.NVS.Security.Unity.CheckAccessInterceptionRegistrar.RegisterTypes(Volvo.NVS.Core.Unity.IContainerRegistrationBuilder)">
            <summary>
            Setup the current unity container and types currently registered (classes) for the virtual method interception
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor"/>. Setup only classes which have any methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>.
            </summary>
            <param name="registrar">The current container registration builder.</param>
        </member>
        <member name="T:Volvo.NVS.Security.Unity.ClaimsProviderRegistration">
            <summary>
            The helper class for the unity registration of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/>.
            </summary>
            <remarks>
            The class resolves instances of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> wrapping the unity exceptions into the Security 
            library related ones. The class manages the cache of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/> registration information.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.Unity.ClaimsProviderRegistration.IsRegistered">
            <summary>
            Determines if the service provider has been registered or not.
            </summary>
            <returns>True if the service has been registered.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.Unity.ClaimsProviderRegistration.Resolve">
            <summary>
            Resolves the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> using the unity container. 
            Wraps the known exceptions into the security library exception objects.
            </summary>
            <returns>The resolved instance of the claims provider.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Unity.ClaimsServiceRegistration">
            <summary>
            The helper class for the resolution of the <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/> from the <see cref="T:Volvo.NVS.Core.Unity.Container"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.Unity.ClaimsServiceRegistration.Resolve">
            <summary>
            Resolves the claims service configured for the current application.
            Wraps the known exceptions into the security library related exception objects.
            </summary>
            <returns>The claims service managing the identity within the current application.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations">
            <summary>
            The class automates configuration of the Unity interception mechanism required by the Security Library when
            the unity relayed <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> is used.
            </summary>
            <remarks>
            <para>
            We have multiple check access attributes and one of them is the unity related <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>. It can be applied onto
            a method on the interface or class level. In order for this attribute to function the Unity interception must be configured so it is included 
            (executed) when the method call is performed.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations"/> provides automated Unity interception configuration when the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>
            is applied and used on the class methods directly. It requires the type (class) to be mapped in the Unity first (e.g. in the unity configuration
            file) but the interception related features are not required to be configured yet. They will be added by the this <see cref="T:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations"/>.
            </para>
            <para>
            The <see cref="F:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations.Registrar"/> can be used in order to automate configuration of the unity virtual method 
            interception or the fluent, code-base library configuration can be used instead. Usage of the code-based, fluent library configuration is <b>recommended</b>.
            </para>
            <para>
            For details and samples on the automated registration check the <see cref="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurator"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations.Registrar">
            <summary>
            The unity container registration object automating setup of the virtual method interception mechanism for all classes
            registered within unity and having methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> protects a method on which it is applied.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> is not working on its own and requires a medium, framework which will initialize it and use it when 
            the method call is made. It is true for all CheckAccess attributes e.g. the MVC related attribute is initialized and executed by the 
            MVC Framework itself.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> is the Unity <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute"/>. It means it can be applied to class members, class methods
            and it is executed by usage of the Unity interception mechanism. The unity interception mechanism must be configured so the attribute is visible,
            usable and consumed.
            </para>
            <para>
            One may configure the unity interception manually following the unity documentation. When manual configuration is selected then the 
            <see cref="T:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations"/> does not have to be used.
            </para>
            <para>
            One may automate configuration of the unity interception for classes containing any methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>.
            The <see cref="T:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations"/> provides such automation of the unity interception configuration.
            </para>
            <para>
            The <see cref="F:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations.Registrar"/> looks for all classes mapped within the current unity container and checks 
            if those classes have methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>. All such classes are registered for the interception 
            using the unity <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor"/>.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/> applied on the class (e.g. domain service class) will never be executed when the unity is not configured
            for interception and when class instances are not created (resolved) via the <see cref="T:Volvo.NVS.Core.Unity.Container"/>.
            </para>
            <example>
            <para>
            This sample configures the unity container and setups virtual method interception using the library fluent, code-based configuration. Usage of the
            library code-based configuration is the recommended approach:
            </para>
            <code>
            <![CDATA[
            public static class LibraryConfig
            {
               public static void Configure(ILibraryConfigurator configurator)
               {
                  configurator
               
                  // Configure the Security Library
                  .ConfigureSecurity(security =>
                 {
                  
                     // ...
                     // Some other library configuration settings.
                     // ...
            
                    // We decorate domain service methods with the CheckAccess attributes. Those domain 
                    // service classes are registered within the unity but for the CheckAccess attributes 
                    // to be execute the unity interception for all such classes must be setup.
                    security.SetupUnityInterceptionForCheckAccess();
            
                  });
               }
            }
            ]]>
            </code>
            </example>
            <example>
            <para>
            This sample configures the unity container and setups virtual method interception for all mapped classes having methods with the CheckAccess attribute.
            The sample uses the <see cref="F:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations.Registrar"/> method directly.
            </para>
            <code>
            // Configure the unity container using the default application configuration file
            Container.Configure();
            
            // Use the automated configuration of the virtual method interception for all classes
            // having the CheckAccess methods. The automated configuration allows us to simplify
            // the unity.config file. It should be executed only once for the complete application.
            Container.Register(VirtualMethodInterceptionRegistrations.Registrar);
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder">
            <summary>
            Defines a contract for the claims service configuration building types.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder"/> is extended by various Security Library assemblies which
            add configuration methods specific for different host, client and application types.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder"/> interface gives access to the security library configuration methods
            which add and register claim services which should be used by the library.
            </para>
            <para>
            In order to see configuration methods specific for type of you application and host make sure the correct Security Library 
            assembly is added and your application type specific extension methods are available on via the 
            <see cref="T:Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder"/> interface.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder.UseThreadClaimsService">
            <summary>
            Configures the <see cref="T:Volvo.NVS.Security.Claims.ThreadClaimsService"/> to be used by the security library. The principal is set and managed within the current thread.
            </summary>
            <remarks>
            <para>
            You should always use the claims service which is appropriate and specific for the type of your application, for the type of the host. Host or 
            application specific configuration methods are added into the <see cref="T:Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder"/> as extension 
            methods together with references to the specific security library assemblies.
            </para>
            <para>
            Always check that you have referenced the security library assembly specific for you application in order to see all configuration methods.
            Refer into the documentation of the Security Library for more information about claims services.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Security.Claims.ThreadClaimsService"/> for details about the claims service registered by this method.
            </para>
            </remarks>
            <returns>A current security library claims service configuration builder.</returns>
        </member>
        <member name="T:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder">
            <summary>
            Defines a contract for the security library fluent configuration objects.
            </summary>
            <remarks>
            The fluent configuration methods exposed by this interface are used via the <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/>,
            common security library configuration interface.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.SetClaimsService(System.Action{Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder})">
            <summary>
            Configures the claims service to be used by the current application.
            </summary>
            <param name="builder">
            The action building the claims service configuration.
            </param>
            <returns>
            The current security library configuration builder.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.SetClaimsProvider``1">
            <summary>
            Configures the claims provider to be used by the security library authentication handlers in order to complete the list of claims.
            </summary>
            <returns>
            The current security library configuration builder.
            </returns>
            <typeparam name="T">The type of the claims provider class implementing the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> interface.</typeparam>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.SetupUnityInterceptionForCheckAccess">
            <summary>
            Setups the unity interception for all classes having methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>
            and being registered within the unity, <see cref="T:Volvo.NVS.Core.Unity.Container"/>. This is for example required when decorating domain
            service methods with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>.
            </summary>
            <remarks>
            <para>
            This method automates setup of the virtual method interception mechanism for all classes registered within unity and 
            having methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>. Such attributes do not execute on their own
            and require the unity to be used. Usage of unity is however not enough. All such types must have the unity interception
            mechanism properly configured.
            </para>
            <para>
            For more details please check the <see cref="F:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations.Registrar"/> which is used by this
            registration method. The method run this registrar and is a shortcut for it.
            </para>
            </remarks>
            <returns>
            The current security library configuration builder.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.RegisterConverter(System.Type,System.Type,Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter)">
            <summary>
            Registers a custom CheckAccess converter which is able to translate an instance of <paramref name="source"/> parameter type
            into the instance of the <paramref name="destination"/> parameter type.
            </summary>
            <remarks>
            The <paramref name="source"/> type is always coming from the current method arguments in the binding process
            (e.g. MVC action method, WebApi action method) while the <paramref name="destination"/> is always a type of
            the CheckAccess method parameter into which the translation occurs during the binding.
            </remarks>
            <param name="source">The source type (translation from).</param>
            <param name="destination">The CheckAccess method parameter type (translation to).</param>
            <param name="converter">The converter used to perform the translation between the source and destination type instances.</param>
            <returns>
            A current security configuration builder.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.RegisterConverter``2(Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter)">
            <summary>
            Registers a custom CheckAccess converter which is able to translate an instance of <typeparamref name="TSource"/> parameter type
            into the instance of the <typeparamref name="TDestination"/> parameter type.
            </summary>
            <remarks>
            The <typeparamref name="TSource"/> type is always coming from the current method arguments in the binding process
            (e.g. MVC action method, WebApi action method) while the <typeparamref name="TDestination"/> is always a type of
            the CheckAccess method parameter into which the translation occurs during the binding.
            </remarks>
            <typeparam name="TSource">The source type (translation from).</typeparam>
            <typeparam name="TDestination">The CheckAccess method parameter type (translation to).</typeparam>
            <param name="converter">The converter used to perform the translation between the source and destination type instances.</param>
            <returns>
            A current security configuration builder.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.RegisterBinder``1(Volvo.NVS.Security.Authorization.ICheckAccessBinder)">
            <summary>
            Registers a new binder executed for <typeparamref name="TCheckAccess"/> interface type containing the CheckAccess method.
            </summary>
            <remarks>
            The binder is added for a complete interface, type on which the CheckAccess method is defined. The binder is NOT
            for individual types of the CheckAccess method arguments.
            </remarks>
            <typeparam name="TCheckAccess">
            The interface type containing the CheckAccess method for which a new binder should be defined.
            </typeparam>
            <param name="binder">
            The binder to be used for the provided <typeparamref name="TCheckAccess"/> where the CheckAccess method is defined.
            </param>
            <returns>
            A current security configuration builder.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.RegisterDefaultBinder(Volvo.NVS.Security.Authorization.ICheckAccessBinder)">
            <summary>
            Registers, changes a default CheckAccess method binder which will be used when no type specific binders are configured.
            </summary>
            <remarks>
            You do not have to use this method when a default one is about to be used.
            </remarks>
            <param name="binder">The binder to be used as a default one.</param>
            <returns>
            A current security configuration builder.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder.SetJwtValidator(Volvo.NVS.Security.Tokens.IJwtSignedValidator)">
            <summary>
            Registers a default, singleton instance of the JSON Web Token validator to be used by the NSV Security Library authentication handlers.
            </summary>
            <param name="validator">A JSON Web Token validator to be used when checking JSON Web Token signatures (JWS).</param>
            <returns>The current security library configuration builder.</returns>
        </member>
        <member name="T:Volvo.NVS.Core.Configuration.SecurityLibraryClaimServiceConfigurationBuilder">
            <summary>
            Acts like the main claims service configuration builder.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryClaimServiceConfigurationBuilder.UseThreadClaimsService">
            <summary>
            Configures the <see cref="T:Volvo.NVS.Security.Claims.ThreadClaimsService"/> to be used by the security library. The principal is set and managed within the current thread.
            </summary>
            <remarks>
            <para>
            You should always use the claims service which is appropriate and specific for the type of your application, for the type of the host. Host or 
            application specific configuration methods are added into the <see cref="T:Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder"/> as extension method
            together with references to the specific security library assemblies.
            </para>
            <para>
            Always check that you have referenced the security library assembly specific for you application in order to see all configuration methods.
            Refer into the documentation of the Security Library for more information about claims services.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Security.Claims.ThreadClaimsService"/> for details about the claims service registered by this method.
            </para>
            </remarks>
            <returns>A current security library claims service configuration builder.</returns>
        </member>
        <member name="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder">
            <summary>
            Acts like the main security library configuration builder used in the fluent and common library configuration process.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder"/> is the main class providing the security library fluent
            configuration methods. By default the class gives configuration methods which are not related to specific project types
            (can be used in most of the project types).
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder"/> implements the <see cref="T:Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder"/> which
            is extended by different security library assemblies when there is a need to add new configuration methods (e.g. the interface
            can be extended by the Security.Web in order to add web related configuration methods).
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.SetClaimsService(System.Action{Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder})">
            <summary>
            Configures the claims service to be used by the current application.
            </summary>
            <param name="builder">
            The action building the claims service configuration.
            </param>
            <returns>
            The current security library configuration builder.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.SetClaimsProvider``1">
            <summary>
            Configures the claims provider to be used by the security library authentication handlers in order to complete the list of claims.
            </summary>
            <returns>
            The current security library configuration builder.
            </returns>
            <typeparam name="T">The type of the claims provider class implementing the <see cref="T:Volvo.NVS.Security.Claims.IClaimsProvider"/> interface.</typeparam>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.SetupUnityInterceptionForCheckAccess">
            <summary>
            Setups the unity interception for all classes having methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>
            and being registered within the unity, <see cref="T:Volvo.NVS.Core.Unity.Container"/>. This is for example required when decorating domain
            service methods with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>.
            </summary>
            <remarks>
            <para>
            This method automates setup of the virtual method interception mechanism for all classes registered within unity and 
            having methods decorated with the <see cref="T:Volvo.NVS.Security.Attributes.CheckAccessAttribute"/>. Such attributes do not execute on their own
            and require the unity to be used. Usage of unity is however not enough. All such types must have the unity interception
            mechanism properly configured.
            </para>
            <para>
            For more details please check the <see cref="F:Volvo.NVS.Security.Unity.VirtualMethodInterceptionRegistrations.Registrar"/> which is used by this
            registration method. The method run this registrar and is a shortcut for it.
            </para>
            </remarks>
            <returns>
            The current security library configuration builder.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.RegisterConverter(System.Type,System.Type,Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter)">
            <summary>
            Registers a custom CheckAccess converter which is able to translate an instance of <paramref name="source"/> parameter type
            into the instance of the <paramref name="destination"/> parameter type.
            </summary>
            <remarks>
            The <paramref name="source"/> type is always coming from the current method arguments in the binding process
            (e.g. MVC action method, WebApi action method) while the <paramref name="destination"/> is always a type of
            the CheckAccess method parameter into which the translation occurs during the binding.
            </remarks>
            <param name="source">The source type (translation from).</param>
            <param name="destination">The CheckAccess method parameter type (translation to).</param>
            <param name="converter">The converter used to perform the translation between the source and destination type instances.</param>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.RegisterConverter``2(Volvo.NVS.Security.Authorization.ICheckAccessBinderConverter)">
            <summary>
            Registers a custom CheckAccess converter which is able to translate an instance of <typeparamref name="TSource"/> parameter type
            into the instance of the <typeparamref name="TDestination"/> parameter type.
            </summary>
            <remarks>
            The <typeparamref name="TSource"/> type is always coming from the current method arguments in the binding process
            (e.g. MVC action method, WebApi action method) while the <typeparamref name="TDestination"/> is always a type of
            the CheckAccess method parameter into which the translation occurs during the binding.
            </remarks>
            <typeparam name="TSource">The source type (translation from).</typeparam>
            <typeparam name="TDestination">The CheckAccess method parameter type (translation to).</typeparam>
            <param name="converter">The converter used to perform the translation between the source and destination type instances.</param>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.RegisterBinder``1(Volvo.NVS.Security.Authorization.ICheckAccessBinder)">
            <summary>
            Registers a new binder executed for <typeparamref name="TCheckAccess"/> interface type containing the CheckAccess method.
            </summary>
            <remarks>
            The binder is added for a complete interface, type on which the CheckAccess method is defined. The binder is NOT
            for individual types of the CheckAccess method arguments.
            </remarks>
            <typeparam name="TCheckAccess">
            The interface type containing the CheckAccess method for which a new binder should be defined.
            </typeparam>
            <param name="binder">
            The binder to be used for the provided <typeparamref name="TCheckAccess"/> interface where the CheckAccess method is defined.
            </param>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.RegisterDefaultBinder(Volvo.NVS.Security.Authorization.ICheckAccessBinder)">
            <summary>
            Registers, changes a default CheckAccess method binder which will be used when no type specific binders are configured.
            </summary>
            <remarks>
            You do not have to use this method when a default one is about to be used.
            </remarks>
            <param name="binder">The binder to be used as a default one.</param>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.SetJwtDefaultValidator(Volvo.NVS.Security.Tokens.IJwtSignedValidator)">
            <summary>
            Registers a default, singleton instance of the JSON Web Token validator to be used by the NSV Security Library authentication handlers.
            </summary>
            <param name="validator">A JSON Web Token validator to be used when checking JSON Web Token signatures (JWS).</param>
            <returns>The current security library configuration builder.</returns>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurationBuilder.SetJwtValidator(Volvo.NVS.Security.Tokens.IJwtSignedValidator)">
            <summary>
            Registers a default, singleton instance of the JSON Web Token validator to be used by the NSV Security Library authentication handlers.
            </summary>
            <param name="validator">A JSON Web Token validator to be used when checking JSON Web Token signatures (JWS).</param>
            <returns>The current security library configuration builder.</returns>
        </member>
        <member name="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurator">
            <summary>
            Extends the common <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/> contract providing the Security Library related fluent configuration methods. 
            (requires Volvo.NVS.Security)
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurator"/> class adds Security Library related configuration methods into the common
            configuration interface which is extended by various NVS libraries.
            </para>
            <para>
            In order to configure the Security Library from code you first need to add references into all the Security assemblies which
            you are about to use. Adding references ensures that all the configuration extension methods will be available. What is more
            methods specific for your security scenario will be available.
            </para>
            <para>
            All the common configuration methods are always accessed via the <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/> interface. It is the 
            <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/> interface which is extended by multiple NVS assemblies so new methods appear as you add 
            references into NVS libraries.
            </para>
            <para>
            The easiest way to start the configuration is to obtains an implementation of the <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/> interface.
            This can be done via the <see cref="F:Volvo.NVS.Core.Configuration.LibraryConfigurator.Current"/> property from the <see cref="T:Volvo.NVS.Core.Configuration.LibraryConfigurator"/> class. 
            Having an instance of the library configurator object the configuration methods can be called.
            </para>
            <para>
            For example the following code can be written in order to configure the security library related features in the ASP.NET, web application.
            All the Security library assemblies specific for our scenario and application type are already added via NuGet packages so the following 
            compiles:
            </para>
            <code>
            <![CDATA[
            public static class LibraryConfig
            {
               public static void Configure(ILibraryConfigurator configurator)
               {
                  configurator
               
                  // Configure the Security Library
                  .ConfigureSecurity(security =>
                 {
                  
                     // Claims service must be configured for the Security Library. As we are running the
                     // web application the Web Claims Service will be set and used to manage the context.
                     security.SetClaimsService(service => service.UseThreadClaimsService());
            
                     // Set the custom claims providing completing the list of claims fro the authenticated
                     // identity. The provider is given by a sample domain service.
                     security.SetClaimsProvider<SampleClaimsProvider>();
            
                    // We decorate domain service methods with the CheckAccess attributes. Those domain 
                    // service classes are registered within the unity but for the CheckAccess attributes 
                    // to be execute the unity interception for all such classes must be setup.
                    security.SetupUnityInterceptionForCheckAccess();
            
                  });
               }
            }
            ]]>
            </code>
            <para>
            Having above configuration method one may call it from the Global.asax.cs, at the application startup:
            </para>
            <code>
            <![CDATA[
            protected void Application_Start()
            {
               ...
               LibraryConfig.Configure(LibraryConfigurator.Current);
               ...
            }
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurator.ConfigureSecurity(Volvo.NVS.Core.Configuration.ILibraryConfigurator,System.Action{Volvo.NVS.Core.Configuration.ISecurityLibraryConfigurationBuilder})">
            <summary>
            Configures the security library.
            </summary>
            <remarks>
            </remarks>
            <param name="configurator">
            The NVS library configuration to be extended.
            </param>
            <param name="builder">
            The action building the security library configuration.
            </param>
            <returns>
            The current NVS library configuration.
            </returns>
        </member>
    </members>
</doc>
