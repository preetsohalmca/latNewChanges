<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Volvo.NVS.Integration.WindowsServices</name>
    </assembly>
    <members>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames">
            <summary>
            Contains integration configuration Xml section, attributes and node names.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames.IntegrationConfigurationNodeName">
            <summary>
            The integration configuration main node name.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames.ListenersNodeName">
            <summary>
            The parent listeners node name expected under the main <see cref="F:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames.IntegrationConfigurationNodeName"/> node.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames.ListenerAttributeName">
            <summary>
            The name of the listener attribute.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames.ServiceAttributeName">
            <summary>
            The name of the service attribute.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames.WarningTimeAttributeName">
            <summary>
            The name of the down time warning attribute.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames.ErrorTimeAttributeName">
            <summary>
            The name of the down time error attribute.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Config.ConfigurationNames.StartAttributeName">
            <summary>
            The name of the start attribute name.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Config.ListenerCollection">
            <summary>
            The class represents the collection of endpoint, listener configuration elements.
            </summary>
            <remarks>
            The listener, endpoint configuration elements are placed under the <b>listeners</b> node. 
            For details please refer into the <see cref="T:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement"/> and <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/>.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Config.ListenerCollection.CreateNewElement">
            <summary>
            Creates a new endpoint configuration element.
            </summary>
            <returns>A new endpoint configuration element.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Config.ListenerCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Locates the endpoint element key.
            </summary>
            <param name="element">An element for which the key should be located.</param>
            <returns>The key of a single endpoint element.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Config.ListenerCollection.GetEnumerator">
            <summary>
            Returns the enumerator over the endpoint, listener elements.
            </summary>
            <returns>The enumerator over the endpoint, listener elements.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement">
            <summary>
            The class represents a single listener, endpoint configuration element.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> can be configured from code or by usage of the application
            configuration file and predefined configuration sections.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement"/> represents the lowest level configuration element under which a single
            listener, endpoint is configured.
            </para>
            <para>
            Check documentation of individual properties for the <see cref="T:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement"/> for details about 
            meaning of configuration attributes on the listener node. See the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/>
            for configuration samples and description of the service itself.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement.Listener">
            <summary>
            A unique name of the listener and integration channel to be used.
            </summary>
            <remarks>
            <para>
            A name of the listener must be unique among all the defined listener names in the configuration of the integartion.
            </para>
            <para>
            The name of the listener specifies a name of the channel which is expected to be configured in the Integration library. 
            For example: if you put "my_queue1" as the name of the listener then you must also have the "my_queue1" configured as 
            one of the <b>channels</b> in the configuration of the Integration Library.
            </para>
            <para>
            The name of the listener is also used as the name of the <see cref="P:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement.Service"/> when the service, handler is not given.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement.Service">
            <summary>
            A name of the unity registration pointing at the integration handler to be used.
            </summary>
            <remarks>
            <para>
            The service name is the name of the unity registration. This registration must point at the implementation of
            the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/> which will be used to process messages and to receive all the
            information about integration channel state changes.
            </para>
            <para>
            The name of the service is optional. When not specified the <see cref="P:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement.Listener"/> is used as the service name.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement.DownTimeWarning">
            <summary>
            A time after which the warning event should be raised when an integration channel is offline.
            </summary>
            <remarks>
            <para>
            The down time warning is a <see cref="T:System.TimeSpan"/> value specifying when a warning event handler 
            <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler.OnListenerDownTimeWarning(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)"/> method should be called.
            </para>
            <para>
            A warning is raised when a channel is offline and a specified time has been reached.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement.DownTimeError">
            <summary>
            A time after which the error event should be raised when an integration channel is offline.
            </summary>
            <remarks>
            <para>
            The down time error is a <see cref="T:System.TimeSpan"/> value specifying when an error event handler 
            <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler.OnListenerDownTimeError(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)"/> method should be called.
            </para>
            <para>
            An error is raised when a channel is offline and a specified time has been reached.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement.Start">
            <summary>
            A flag determining if the service should subscribe into the channel automatically.
            </summary>
            <remarks>
            <para>
            By default the service subscribes into the channel when a service is started. When the <see cref="P:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement.Start"/>
            is set to false this automated subscription is disabled. In that case a developer must subscribe into the channel
            manually in order to make it active.
            </para>
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Config.IntegrationConfiguration">
            <summary>
            The class gives access into the configuration of the NonUI integration.
            </summary>
            <remarks>
            For details please refer into the <see cref="T:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement"/> and <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/>.
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Config.IntegrationConfiguration.integrationConfig">
            <summary>
            The cached integration configuration section.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Config.IntegrationConfiguration.#cctor">
            <summary>
            Initializes the integration configuration static fields.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Config.IntegrationConfiguration.Listeners">
            <summary>
            Returns the collection of listener configuration nodes.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Config.IntegrationSection">
            <summary>
            The class represents the root, main integration configuration node.
            </summary>
            <remarks>
            For details please refer into the <see cref="T:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement"/> and <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/>.
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Config.IntegrationSection.Listeners">
            <summary>
            Gets the collection of endpoint, listener elements.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelConfigurationException">
            <summary>
            The exception throw when the channel configuration is incorrect or not possible.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelConfigurationException.#ctor">
            <summary>
            Creates the channel configuration exception object.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelConfigurationException.#ctor(System.String)">
            <summary>
            Creates the channel configuration exception object.
            </summary>
            <param name="message">The error message string.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the channel configuration exception object.
            </summary>
            <param name="message">The error message string.</param>
            <param name="inner">The inner exception reference. </param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException">
            <summary>
            The exception thrown when it is not possible to obtain a channel via the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/>.
            </summary>
            <remarks>
            It is only one of multiple exceptions possible during initialization of channels. Multiple exceptions
            can be generated by the NVS Integration library itself.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException.#ctor">
            <summary>
            Creates the channel creation exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException.#ctor(System.String)">
            <summary>
            Creates the channel creation exception.
            </summary>
            <param name="message">The error message string.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the channel creation exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="inner">The inner exception reference. </param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelDuplicatedException">
            <summary>
            The exception thrown when a channel is duplicated. For example: a channel with a given
            name already exists and cannot be added.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelDuplicatedException.#ctor">
            <summary>
            Creates the channel duplication exception object.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelDuplicatedException.#ctor(System.String)">
            <summary>
            Creates the channel duplication exception object.
            </summary>
            <param name="message">The error message string.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelDuplicatedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the channel duplication exception object.
            </summary>
            <param name="message">The error message string.</param>
            <param name="inner">The inner exception reference. </param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Exceptions.IntegrationServiceNotRunningException">
            <summary>
            The exception thrown when a requested operation on the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> is not 
            allowed as the service is not running and should be fully started first.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.IntegrationServiceNotRunningException.#ctor">
            <summary>
            Creates the integration service not running exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.IntegrationServiceNotRunningException.#ctor(System.String)">
            <summary>
            Creates the integration service not running exception.
            </summary>
            <param name="message">The error message string.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.IntegrationServiceNotRunningException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the integration service not running exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="inner">The inner exception reference. </param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Exceptions.IntegrationConfigurationException">
            <summary>
            The exception thrown when it is not possible to read the NonUI integration configuration section.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.IntegrationConfigurationException.#ctor">
            <summary>
            Creates the integration configuration section.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.IntegrationConfigurationException.#ctor(System.String)">
            <summary>
            Creates the integration configuration section.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Exceptions.IntegrationConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the integration configuration section.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyFactory">
            <summary>
            The class provides <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> objects according to the current application configuration file.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyFactory.Create">
            <summary>
            Creates a collection of <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> objects according to the current application configuration file.
            </summary>
            <returns>The collection of channel proxies created based on the application configuration file.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyFactory.Create(System.Collections.Generic.IList{Volvo.NVS.Integration.WindowsServices.Config.ListenerElement})">
            <summary>
            Creates a collection of <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> objects according to the current application configuration file.
            </summary>
            <returns>The collection of channel proxies created based on the application configuration file.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyFactory.Create(Volvo.NVS.Integration.WindowsServices.Config.ListenerElement)">
            <summary>
            Creates a <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> according to the given configuration element.
            </summary>
            <param name="endpoint">Endpoint configuration element.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyFactory.ResolveHandler(System.String)">
            <summary>
            Resolves a handler for the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> according to the given handler name.
            </summary>
            <param name="name">The name of the handler which must match the unity registration name.</param>
            <returns>The channel proxy handler object.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyFactory.Validate(System.Collections.Generic.HashSet{System.String},Volvo.NVS.Integration.WindowsServices.Config.ListenerElement)">
            <summary>
            Validates the configuration of a single channel.
            </summary>
            <param name="names">The collection of names for all of the already registered listeners.</param>
            <param name="endpoint">A single configuration element to be validate.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent">
            <summary>
            The class traces event states, calculates event execution time and raises events for the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent"/> determines when a monitoring event should be raised and raises such event
            if that is necessary and the waiting (requested) time has elapsed.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent"/> is created with the time after which an event should be raised. In order to raise
            an event the <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.CalculateOrRaise(System.Func{System.Boolean})"/> must be executed. The method calls the given delegate when an event should be raised
            or returns the time which the caller should wait for an event to be created.
            </para>
            <para>
            Once the event is raised the event handler delegate return a value of type <see cref="T:System.Boolean"/>. When true is returned an event is
            treated as handled and no new events are created until the <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.Reset"/> method is called. When false is returned we start
            waiting for an event from the beginning. The procedure repeats until true is returned from the event handler method (until an event
            is marked as handled).
            </para>
            <para>
            It is up to the caller to execute the <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.CalculateOrRaise(System.Func{System.Boolean})"/> method as many times as needed. The <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent"/>
            does not contain any execution loop or thread. It is only responsible for time calculation and event handler execution.
            </para>
            <para>
            See the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring"/> for details.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.time">
            <summary>
            A time for which we should wait until an event is raised.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.startPoint">
            <summary>
            A timestamp marking a point on the timeline at which the event has been raised for the last time.
            This is also the starting point from which the elapsed time should be calculated.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.created">
            <summary>
            A flag telling if the event has been raised for the currently traced and calculated time.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.sync">
            <summary>
            The synchronization object used to provide thread safety and ensure that operations are atomic.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Creates an instance of the channel proxy monitoring event.
            </summary>
            <param name="time">
            A time which we should wait before an event is raised.
            </param>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.Time">
            <summary>
            Gets the waiting time after which an event should be created.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.Reset">
            <summary>
            Resets the current state of the event.
            </summary>
            <remarks>
            The method resets the calculation of elapsed time and sets the event as not raised yet.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.Reset(System.Boolean)">
            <summary>
            Resets the current state of the event.
            </summary>
            <remarks>
            The method resets the calculation of elapsed time and sets the event as not raised yet.
            </remarks>
            <param name="handled">
            True in order to mark an event as raised under the currently calculated time period.
            False in order to mark an event as not raised yet, so the waiting time can be calculated.
            </param>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.StartPoint">
            <summary>
            A timestamp marking a point on the timeline at which the event has been raised for the last time.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent.CalculateOrRaise(System.Func{System.Boolean})">
            <summary>
            Raises an event or calculates time which we should wait until an event can be raised.
            </summary>
            <returns>
            Time which we should wait before an event can be raised or null when no event should be expected.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyFactory">
            <summary>
            Defines a contract for objects providing instances of <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> objects which
            can be used, managed by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyFactory.Create">
            <summary>
            Creates a collection of <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> objects.
            </summary>
            <returns>The collection of channel proxies.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy">
            <summary>
            Defines a contract for <see cref="T:Volvo.NVS.Integration.IInputChannel"/> proxy objects.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> implementation wraps and extends original functionality of the <see cref="T:Volvo.NVS.Integration.IInputChannel"/>. 
            </para>
            <para>
            A new channel status is provided on the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus"/> and a new <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Closed"/>
            state is introduced. A channel is closed when the original <see cref="T:Volvo.NVS.Integration.IInputChannel"/> is fully released. Other statuses are
            unified for easier access and status checks.
            </para>
            <para>
            The channel proxy unifies the subscription and closure of a channel. The <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.Subscribe"/> and
            the <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.Close"/> methods are introduced.
            </para>
            <para>
            Check the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> for details.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy.AutoStart">
            <summary>
            Determines if the channel is configured for auto start and should be started automatically.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoring">
            <summary>
            Defines a contract for a monitoring class checking and reacting on state changes of a channel.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoring.Start">
            <summary>
            Starts the monitoring running the monitoring thread.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoring.OnStatusChange(Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus)">
            <summary>
            Notifies the monitoring class about channel status changes.
            </summary>
            <param name="current">The current status for the channel.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoring.Stop">
            <summary>
            Stops the channel monitoring.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoring.WarningTime">
            <summary>
            Gets the waiting time after which a warning should be created when a channel is offline.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoring.ErrorTime">
            <summary>
            Gets the waiting time after which an error should be created when a channel is offline.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoringEvent">
            <summary>
            Defines a contract for an object tracing and raising the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoringEvent"/> events.
            </summary>
            <remarks>
            See the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring"/> class for details.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoringEvent.Reset">
            <summary>
            Resets the current state of the event.
            </summary>
            <remarks>
            The method resets the calculation of elapsed time and sets the event as not raised yet.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoringEvent.CalculateOrRaise(System.Func{System.Boolean})">
            <summary>
            Raises an event or calculates time which we should wait until an event can be raised.
            </summary>
            <returns>
            Time which we should wait before an event can be raised or null when no event should be expected.
            </returns>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoringEvent.Time">
            <summary>
            Gets the waiting time after which an event should be created.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy">
            <summary>
            Defines a contract for the operative channel. An operative channel is the one with a possibility to close and subscribe
            and giving information about basic channel properties and basic channel setup.
            </summary>
            <remarks>
            <para>
            The operative channel is mainly used in event handlers and passed to those handles as one of the parameters. It is a 
            simplified version of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> interface. The operative channel narrows the methods available
            on the complete <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> so only allowed operations are possible in event handlers.
            </para>
            <para>
            For more information check the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> and the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.Subscribe">
            <summary>
            Subscribes into the channel so processing of messages is started.
            </summary>
            <remarks>
            See <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Subscribe"/> for details.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.Close">
            <summary>
            Closes the current channel.
            </summary>
            <remarks>
            <para>
            The method closes the current channel stopping the subscription if that one is active. The <see cref="T:Volvo.NVS.Integration.IInputChannel"/>
            is disposed and all the event handlers and resources are released.
            </para>
            <para>
            See <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Close"/> for details.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.Status">
            <summary>
            The current status of the channel proxy.
            </summary>
            <remarks>
            See <see cref="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Status"/> for details.
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.Name">
            <summary>
            Gets the name of the channel, channel listener, channel proxy.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.WarningTime">
            <summary>
            Gets the waiting time after which a warning should be created when a channel is offline.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.ErrorTime">
            <summary>
            Gets the waiting time after which an error should be created when a channel is offline.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelFactory">
            <summary>
            Creates integration <see cref="T:Volvo.NVS.Integration.IInputChannel"/> objects for channel proxies.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelFactory._channelElementName">
            <summary>
            The name of the configuration element describing the channel to be used.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelFactory._uri">
            <summary>
            The uri describing a channel to be used.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelFactory.#ctor(System.String)">
            <summary>
            Creates an instance of the channel proxy factory for a given channel configuration element name.
            </summary>
            <param name="channelElementName">
            The name of the configuration element describing the channel to be used.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelFactory.#ctor(System.Uri)">
            <summary>
            Creates an instance of the channel proxy factory for a given channel uri.
            </summary>
            <param name="uri">
            The uri describing a channel to be created.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelFactory.CreateInputChannel">
            <summary>
            Creates an implementation of the <see cref="T:Volvo.NVS.Integration.IInputChannel"/>.
            </summary>
            <returns>The input channel object.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy">
            <summary>
            The proxy class wrapping access into the <see cref="T:Volvo.NVS.Integration.IInputChannel"/>, extending the channel creation and
            message handling capabilities as well as adding channel monitoring features.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> delegates message handling and all <see cref="T:Volvo.NVS.Integration.IInputChannel"/> events into the provided 
            implementation of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/> interface.
            </para>
            <para>
            The channel object wrapped by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> is created from the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelFactory"/>
            implementation. The channel is created when it is needed for the first time, on the first subscription into the channel.
            </para>
            <para>
            The <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Subscribe"/> method starts the subscription on the channel so all the detected events are
            dispatched into the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/>. Once the subscription is stared the channel will try to
            connect and go into the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Subscribing"/> state.
            </para>
            <para>
            The subscription can be stopped at any time by a call into the <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Close"/> method. Once the subscription
            is stopped the channel state changes into the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Closed"/>. A closed channel can be subscribed again
            at any time.
            </para>
            <para>
            When a channel is in the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Subscribing"/> state it may go into the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected"/>
            state. A channel is disconnected when it is active but it is not able to communicate. It is different from the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Closed"/>
            state under which a channel is not active and it is not even trying to communicate (is not trying to process any messages).
            </para>
            <para>
            Once the channel is subscribed a monitoring of the channel is started. The channel monitoring detects disconnected states of a channel
            and all its closed states. It means it detects all types of off-line channel states. The monitor measures the time under which the channel
            is off-line. When the time exceeds the provided warning or error time the warning and error notifications are produced and the implementation
            of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/> is notified.
            </para>
            <para>
            The monitoring of a channel is not stopped when the channel goes into the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Closed"/> state. The closed channel
            is recognized and treated as being in the off-line state and the handler is warned about such closed channels.
            </para>
            <para>
            Frequent changes of channel statuses may result in only single execution of the monitoring event handler method. For example: a quick change
            from <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected"/> to <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Subscribing"/> and then back to 
            <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected"/> while the monitoring event handler is already executing on the first disconnection signal may 
            only result in the completion of the currently executing event handler. This is especially true when an event handler returns <b>true</b> 
            saying that an event has been handled. See also the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler"/> interface.
            </para>
            <para>
            All public method of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> are thread safe.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._factory">
            <summary>
            The factory object providing the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._channel"/>.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._channel">
            <summary>
            The channel which is currently managed by the proxy.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._name">
            <summary>
            The name of the channel, channel proxy.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._handler">
            <summary>
            The handler specifying actions to be executed when channel notifies about messages or status changes.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._status">
            <summary>
            The status of the current proxy.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._sync">
            <summary>
            The synchronization and memory barrier object used to ensure thread safety.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._monitoring">
            <summary>
            The channel monitoring object notifying handler about disconnected channel states.
            A single monitoring object is used for the complete channel life-cycle and all its states.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy._autoStart">
            <summary>
            Determines if the channel is configured for auto start and should be started automatically.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.#ctor(System.String,Volvo.NVS.Integration.WindowsServices.Proxies.IChannelFactory,Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Creates an integration channel proxy for the given channel handler and channel factory.
            </summary>
            <param name="name">
            The name of the channel, channel listener, channel proxy.
            </param>
            <param name="factory">
            The factory providing communication channels.
            </param>
            <param name="handler">
            The handler specifying actions to be executed on message processing and channel state changes.
            </param>
            <param name="warningTime">
            A time after which a warning should be raised for the handler when a channel is inactive.
            </param>
            <param name="errorTime">
            A time after which an error should be raised for the handler when a channel is inactive.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.#ctor(System.String,Volvo.NVS.Integration.WindowsServices.Proxies.IChannelFactory,Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler)">
            <summary>
            Creates an integration channel proxy for the given channel handler and channel factory.
            </summary>
            <param name="name">
            The name of the channel, channel listener, channel proxy.
            </param>
            <param name="factory">
            The factory providing communication channels.
            </param>
            <param name="handler">
            The handler specifying actions to be executed on message processing and channel state changes.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.#ctor(System.String,Volvo.NVS.Integration.WindowsServices.Proxies.IChannelFactory,Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler,Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoring)">
            <summary>
            Creates an integration channel proxy for the given channel handler and channel factory.
            </summary>
            <param name="name">
            The name of the channel, channel listener, channel proxy.
            </param>
            <param name="factory">
            The factory providing communication channels.
            </param>
            <param name="handler">
            The handler specifying actions to be executed on message processing and channel state changes.
            </param>
            <param name="monitoring">
            The channel monitoring object notifying handler about disconnected channel states.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.CreateMonitoring(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler)">
            <summary>
            Creates an instance of the channel monitoring object if such an object is required.
            </summary>
            <param name="monitroingHandler">
            The handler specifying actions to be executed during the channel activity monitoring.
            </param>
            <param name="warningTime">
            A time after which a warning should be raised for the handler when a channel is inactive.
            </param>
            <param name="errorTime">
            A time after which an error should be raised for the handler when a channel is inactive.
            </param>
            <returns>The channel monitoring object or null when such a monitoring is not required for the current configuration.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Status">
            <summary>
            The current status of the channel proxy.
            </summary>
            <remarks>
            <para>
            The channel proxy status is in relation into the state of the <see cref="T:Volvo.NVS.Integration.IInputChannel"/> itself.
            It however specifies both simplified and extended view on the <see cref="T:Volvo.NVS.Integration.IInputChannel"/> status.
            It adds a possibility to mark the channel as closed so it can be reopened. It simplifies all
            disconnection and active statuses into a unified ones.
            </para>
            <para>
            The <see cref="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Status"/> is specifiably designed for <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> purposes.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Name">
            <summary>
            Gets the name of the channel, channel listener, channel proxy.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.WarningTime">
            <summary>
            Gets the waiting time after which a warning should be created when a channel is offline.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.ErrorTime">
            <summary>
            Gets the waiting time after which an error should be created when a channel is offline.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.IsMonitored">
            <summary>
            Determines if the current channel is monitored.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.AutoStart">
            <summary>
            Determines if the channel is configured for auto start and should be started automatically.
            </summary>
            <remarks>
            The flag is not used by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> itself. It is interpreted by the proxy
            object consumers (e.g. by the services managing and executing the channels).
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.ChannelPostProcessMessageHandler(System.Object,Volvo.NVS.Integration.Events.PostProcessMessageEventArgs)">
            <summary>
            The post process message handler for a channel.
            </summary>
            <param name="sender">The sender, channel object.</param>
            <param name="arguments">The event arguments.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.ChannelStatusChanged(System.Object,Volvo.NVS.Integration.Events.CommunicationStatusChanged)">
            <summary>
            The channel status changes event handler.
            </summary>
            <param name="sender">The sender, channel object.</param>
            <param name="arguments">The event arguments.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.ChannelErrorOccured(System.Object,Volvo.NVS.Integration.Events.CommunicationEventArgs{System.String})">
            <summary>
            The channel error event handler.
            </summary>
            <param name="sender">The sender, channel object.</param>
            <param name="arguments">The event arguments.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.ChannelMessageReceived(Volvo.NVS.Integration.Messages.IInputMessage)">
            <summary>
            The channel message event handler.
            </summary>
            <param name="message">The received message.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.CreateChannel">
            <summary>
            Creates the channel using the configured channel factory.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.DestroyChannel">
            <summary>
            Destroys the current channel object by disposing it.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Subscribe">
            <summary>
            Subscribes into the channel so processing of messages is started.
            </summary>
            <remarks>
            <para>
            The complete subscription process is realized on a new thread so the method requests the subscription
            and returns while the subscription activity is still running. The current state of the channel and the
            state of the subscription itself can be verified by usage of the <see cref="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Status"/> property.
            </para>
            <para>
            The <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Subscribe"/> method creates the channel using the provided implementation 
            of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelFactory"/> object. Once the channel is established the subscription 
            is kicked off.
            </para>
            <para>
            When the subscription is started all the detected channel changes (status changes, arrival of new
            messages) are bypassed into the provided implementation of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/>.
            </para>
            <para>
            The state of the channel changes into <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Subscribing"/> when the method is executed.
            </para>
            <para>
            Only a channel in state <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Closed"/> can be subscribed. Any attempts to start a 
            subscription on a channel being in a different state are ignored and the method returns without performing
            any actions.
            </para>
            <para>
            The method is guaranteed to be thread safe.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Close">
            <summary>
            Closes the current channel.
            </summary>
            <remarks>
            <para>
            The method closes the current channel stopping the subscription if that one is active. The <see cref="T:Volvo.NVS.Integration.IInputChannel"/>
            is disposed and all the event handlers and resources are released.
            </para>
            <para>
            The states of the channel is set into the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Closed"/> when the method is completed. A closed
            channel can be subscribed again at any time by usage of the <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Subscribe"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Dispose">
            <summary>
            Disposes the ChannelProxy object.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy.Dispose(System.Boolean)">
            <summary>
            Disposes the ChannelProxy object
            </summary>
            <param name="disposing">Pass true only if calling this method from the <see cref="M:System.IDisposable.Dispose"/> method.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring">
            <summary>
            The class monitors activities of the <see cref="T:Volvo.NVS.Integration.IInputChannel"/> which is managed by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/>.
            </summary>
            <remarks>
            <para>
            This monitoring class observes changes of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus"/> and generates messages for the
            channel being in the <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected"/> or <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Closed"/> states.
            </para>
            <para>
            The time in which the channel is in the off-line state is measured. The monitoring messages are raised if and
            only if the requested message creation time is exceeded.
            </para>
            <para>
            The implementation of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler"/> receives notification of the error
            and warning messages raised by this class. The <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler.OnListenerDownTimeWarning(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)"/>
            and the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler.OnListenerDownTimeError(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)"/> methods are called.
            </para>
            <para>
            The event handler methods defined on the implementation of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler"/> interface
            may return value of type <see cref="T:System.Boolean"/>. This value tells if the problem has been resolved. When a problem is resolved
            the message is not raised again for the current channel state. When the problem is not marked as resolved the event is raised
            again in the defined event time.
            </para>
            <para>
            It means when the event handling method returns false the event is always repeated until the channel is connected (problem solved,
            event handler says the event is handled). When the handler method returns true the event raising and time calculation is stopped
            until the next incorrect channel state is detected.
            </para>
            <para>
            When channel becomes connected the complete monitoring procedure is reseted.
            </para>
            <para>
            Frequent changes of channel statuses may result in only single execution of the event handler method. For example: a quick change
            from <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected"/> to <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Subscribing"/> and then back to <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected"/>
            while the event handler is already executing on the first disconnection signal will only result in the completion of the currently 
            executing event handler. This is especially true when an event handler returns <b>true</b> saying that an event has been handled.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.thread">
            <summary>
            The monitoring thread under which the check logic executes.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.cancellation">
            <summary>
            The cancellation source used to control the monitoring thread.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.changeSignal">
            <summary>
            The object used to notify the main monitoring thread about channel status changes.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.startSignal">
            <summary>
            The object used to notify a caller about the successful startup of the monitoring thread.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.ThreadTerminationTimeout">
            <summary>
            Number of milliseconds which we should wait and block when waiting for a 
            stop of the main monitoring thread and before the thread is forcibly aborted. 
            The waiting time is used when the thread has been signaled about the cancellation.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.status">
            <summary>
            The latest status of the channel which is known for the monitoring class.
            The monitoring class is notified about status changes via <see cref="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.OnStatusChange(Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus)"/>.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.sync">
            <summary>
            The synchronization object used to provide thread safety capabilities.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.warning">
            <summary>
            Manages execution of warning events according to given warning time.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.error">
            <summary>
            Manages execution of error events according to given error time.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.handler">
            <summary>
            The handler object containing all the event handlers to be executed.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.channel">
            <summary>
            The channel which is currently monitored.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.#ctor(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler)">
            <summary>
            Creates an instance of the channel monitoring.
            </summary>
            <param name="channel">The channel which is currently monitored.</param>
            <param name="warning">Time after which warnings should be created.</param>
            <param name="error">Time after which errors should be created.</param>
            <param name="handler">The handler to be notified about error and warning messages.</param>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.WarningTime">
            <summary>
            Gets the waiting time after which a warning should be created when a channel is offline.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.ErrorTime">
            <summary>
            Gets the waiting time after which an error should be created when a channel is offline.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.Start">
            <summary>
            Starts the monitoring running the monitoring thread.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.Start(System.Int32)">
            <summary>
            Starts the monitoring running the monitoring thread and waiting for a signal about the started thread.
            </summary>
            <param name="waitingMilliseconds">The time to wait for the start of the monitoring thread.</param>
            <returns>True if we have waited for a given time and a monitoring thread has notified us about the startup.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.Start(System.TimeSpan)">
            <summary>
            Starts the monitoring running the monitoring thread and waiting for a signal about the started thread.
            </summary>
            <param name="waitingTime">The time to wait for the start of the monitoring thread.</param>
            <returns>True if we have waited for a given time and a monitoring thread has notified us about the startup.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.RaiseMessage(Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyMonitoringEvent,System.Func{Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler,System.Boolean})">
            <summary>
            Creates a message if the requested waiting time has been reached or returns the remaining time to wait.
            </summary>
            <param name="monitoringEvent">An object managing an event to be raised and calculating expected event execution time.</param>
            <param name="notify">The function creating a message when the requested time is reached, exceeded and event should be created.</param>
            <returns>The time to wait before the message is created or null when an event is handled and we should not wait anymore.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.RaiseMessages">
            <summary>
            Raises error and warning messages for the channel being in the offline, disconnected state.
            </summary>
            <remarks>
            The method calculates the time for which the channel is in the offline, disconnected state.
            When the calculated time exceeds the requested warning or error message creation times then
            an appropriate message is established. The method does nothing when a channel is active, on-line.
            </remarks>
            <returns>The time to wait for the next message or null when no waiting for message creation should take place.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.Monitor(System.Threading.CancellationToken)">
            <summary>
            Monitors the current state of the channel by running the main monitoring loop.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.OnStatusChange(Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus)">
            <summary>
            Notifies the monitoring class about channel status changes.
            </summary>
            <param name="current">The current status of the channel.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.Stop">
            <summary>
            Stops the channel monitoring.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.Dispose">
            <summary>
            Disposes the ChannelProxyMonitoring object.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring.Dispose(System.Boolean)">
            <summary>
            Disposes the ChannelProxyMonitoring object
            </summary>
            <param name="disposing">Pass true only if calling this method from the <see cref="M:System.IDisposable.Dispose"/> method.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus">
            <summary>
            Represents a status of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/>.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected">
            <summary>
            The channel object is available but has been disconnected or not connected yet.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Subscribing">
            <summary>
            The channel object is available, it is active and subscribing.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Closed">
            <summary>
            The channel object is not available. It has been closed or not opened yet.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatusExtensions">
            <summary>
            Extensions into the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus"/> enumeration.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatusExtensions.IsInactive(Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus)">
            <summary>
            Determines if the current status is inactive (disconnected, off-line).
            </summary>
            <param name="status">The status to be verified.</param>
            <returns>True if the current channel status is recognized as not active (not receiving message).</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelFactory">
            <summary>
            Defines a contract for factories providing implementations of <see cref="T:Volvo.NVS.Integration.IInputChannel"/> objects used by channel proxies.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelFactory.CreateInputChannel">
            <summary>
            Creates an implementation of the <see cref="T:Volvo.NVS.Integration.IInputChannel"/>.
            </summary>
            <returns>The input channel object.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerChannels">
            <summary>
            Defines a contract for classes managing a collection of <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> objects.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerChannels.Add(Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy)">
            <summary>
            Adds the given channel proxy object into the collection.
            </summary>
            <remarks>
            The method adds channel proxy objects into the collection and verifies if there are not
            already added. The name must be unique among all the already 
            added channel proxy objects. The name must be a non-null value.
            </remarks>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelDuplicatedException">
            The exception thrown when a channel with name already exists on the collection.
            </exception>
            <param name="proxy">The proxy object to be added.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerChannels.Contains(System.String)">
            <summary>
            Determines if the collection contains a channel proxy object with a given name
            </summary>
            <param name="name">A name of the channel proxy object to be verified.</param>
            <returns>True if the collection contains a channel proxy with a given name.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerChannels.Clear">
            <summary>
            Removes all channels from the collection.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerChannels.GetAll">
            <summary>
            Gets all the channels which are currently added.
            </summary>
            <returns>
            The collection of all channels.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerChannels.TryGetByName(System.String)">
            <summary>
            Gets the channel by name.
            </summary>
            <param name="name">A name of the channel to be returned.</param>
            <returns>The channel object if found or null when no channel with a given name exists.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels">
            <summary>
            The collection of integration listener <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> objects.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels.channels">
            <summary>
            The collection of channel proxy objects managed by this class.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels.sync">
            <summary>
            The synchronization object used to provide thread safety.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels.Add(Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy)">
            <summary>
            Adds the given channel proxy object into the collection.
            </summary>
            <remarks>
            The method adds channel proxy objects into the collection and verifies if there are not
            already added. The name must be unique among all the already 
            added channel proxy objects. The name must be a non-null value.
            </remarks>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelDuplicatedException">
            The exception thrown when a channel with name already exists on the collection.
            </exception>
            <param name="proxy">The proxy object to be added.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels.Contains(System.String)">
            <summary>
            Determines if the collection contains a channel proxy object with a given name
            </summary>
            <param name="name">A name of the channel proxy object to be verified.</param>
            <returns>True if the collection contains a channel proxy with a given name.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels.Clear">
            <summary>
            Removes all channels from the collection.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels.GetAll">
            <summary>
            Gets all the channels which are currently added.
            </summary>
            <returns>
            The collection of all channels.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels.TryGetByName(System.String)">
            <summary>
            Gets the channel by name.
            </summary>
            <param name="name">A name of the channel to be returned.</param>
            <returns>The channel object if found or null when no channel with a given name exists.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerChannels.Validate(Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy)">
            <summary>
            Validate the channel proxy object ensuring it can be placed as an element of the collection.
            </summary>
            <param name="proxy">The channel proxy object to be validated.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler">
            <summary>
            Defines a contract for an integration listener handler.
            </summary>
            <remarks>
            <para>
            An integration listener handler receives all the messages and notifications from the channel
            for which it is setup. You create the handler when you want to subscribe for messages and you
            are using the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> or the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/>.
            </para>
            <para>
            Every handler class must implement the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/>. 
            </para>
            <para>
            In most of the situations a single handler is created and defined for a single channel or a single
            message.
            </para>
            <para>
            The handler must be registered within the unity when a default configuration based on the application
            configuration file is used for the integration service. The code based configuration is also possible.
            </para>
            <para>
            Check the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> for details.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler.OnListenerMessageReceived(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Messages.IInputMessage)">
            <summary>
            Executes when a new message arrives.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="message">The message received.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler.OnListernerStatusChanged(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Events.CommunicationStatusChanged)">
            <summary>
            Executes when a state of a channel changes.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="e">The changed event object.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler.OnListenerErrorOccured(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Events.CommunicationEventArgs{System.String})">
            <summary>
            Executes when an error occurs.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="e">The error event object.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler.OnListenerPostMessageHandler(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Events.PostProcessMessageEventArgs)">
            <summary>
            Executes as the post message handler.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="message">The post message event object.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler">
            <summary>
            Defines a contract for the <see cref="T:Volvo.NVS.Integration.IInputChannel"/> handler with the channel state monitoring capabilities.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler"/> defines methods called when the channel is down
            and a monitoring of a channel state is turned on. The monitoring of the channel state is initialized and 
            run by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> class. Warning or error messages can be produced when incorrect channel
            states are detected and a defined event time has passed.
            </para>
            <para>
            Two event handler methods are defined: <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler.OnListenerDownTimeWarning(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)"/> and the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler.OnListenerDownTimeError(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)"/>.
            </para>
            <para>
            Every event handle method returns a value of type <see cref="T:System.Boolean"/>. When true is returned by the handler method the 
            monitoring service treats the detected problem as handled and the event method will not be called again for the current
            channel state. When false is returned the monitoring service treats the detected problem as not handled. The waiting 
            procedure is restarted and the event handling method will be called again according to the defined event time.
            </para>
            <para>
            It means when the event handling method returns false the event is always repeated until the channel is connected. When the
            handler method returns true the event handling method is called only once for the detected incorrect channel state.
            </para>
            <para>
            When channel becomes connected the complete monitoring procedure is reseted and result from previous calls into the event
            handler method has no influence on a new monitoring session.
            </para>
            <para>
            Frequent changes of channel statuses may result in only single execution of the monitoring event handler method. For example: a quick change
            from <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected"/> to <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Subscribing"/> and then back to 
            <see cref="F:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyStatus.Disconnected"/> while the monitoring event handler is already executing on the first disconnection signal may 
            only result in the completion of the currently executing event handler. This is especially true when an event handler returns <b>true</b> 
            saying that an event has been handled.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> for details and the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler.OnListenerDownTimeWarning(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)">
            <summary>
            Executes when a channel is down and a maximum down warning time is exceeded.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <returns>
            True if the problem has been solved and the warning should not be created on more time for the current channel state.
            False if the problem has not been solved and the warning should be created again as defined on the warning waiting time.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler.OnListenerDownTimeError(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)">
            <summary>
            Executes when a channel is down and a maximum down error time is exceeded.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <returns>
            True if the problem has been solved and the error should not be created on more time for the current channel state.
            False if the problem has not been solved and the error should be created again as defined on the error waiting time.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerService">
            <summary>
            Defines a contract for the integration listener windows service behaviour. See <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerService.Subscribe(System.String)">
            <summary>
            Subscribes the already existing and configured channel.
            </summary>
            <param name="name">
            A name of the channel which should be subscribed.
            </param>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException">
            Exception thrown when a channel with a given name does not exist or is not configured.
            </exception>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerService.AddAndSubscribe(Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy)">
            <summary>
            Adds and subscribes the new channel.
            </summary>
            <param name="channel">
            The channel to be added and to start subscription for.
            </param>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelDuplicatedException">
            The exception thrown when the channel with a given name already exists and is managed by the service.
            </exception>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerService.Close(System.String)">
            <summary>
            Closes the channel with a given name so it is not subscribing anymore.
            </summary>
            <param name="name">
            A name of the already configured channel to be closed.
            </param>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException">
            Exception thrown when a channel with a given name does not exist or is not configured.
            </exception>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerService.Contains(System.String)">
            <summary>
            Determines if the current service contains and manages the channel with the given name.
            </summary>
            <param name="name">
            A name of the already channel to be verified.
            </param>
            <returns>
            True if a channel is already managed by the service.
            False if a channel is not present and not known for a service.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase">
            <summary>
            The class provides basic implementation of the integration message handler.
            </summary>
            <remarks>
            <para>
            Every time the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> or the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> is used it is required to
            specify message handling objects which will receive notifications about channel state changes and incoming messages.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase"/> is the most basic implementation of the integration message handler. 
            It is recommended to derive from this class and override desired methods instead of implementing the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/> 
            directly.
            </para>
            <para>
            It is required to provide implementation of the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase.OnListenerMessageReceived(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Messages.IInputMessage)"/> method. You may override the rest of
            the methods when needed.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase"/> implements the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler"/> interface
            which means the handler is capable of receiving channel monitoring events. For more details about channel monitoring refer into
            the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler"/> interface and the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxyMonitoring"/> class.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/> interface which is the base channel handler interface.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase.OnListenerMessageReceived(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Messages.IInputMessage)">
            <summary>
            Executes when a new message arrives.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="message">The message received.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase.OnListernerStatusChanged(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Events.CommunicationStatusChanged)">
            <summary>
            Executes when a state of a channel changes.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="e">The changed event object.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase.OnListenerErrorOccured(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Events.CommunicationEventArgs{System.String})">
            <summary>
            Executes when an error occurs.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="e">The error event object.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase.OnListenerPostMessageHandler(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Events.PostProcessMessageEventArgs)">
            <summary>
            Executes as the post message handler.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="message">The post message event object.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase.OnListenerDownTimeWarning(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)">
            <summary>
            Executes when a channel is down and a maximum down warning time is exceeded.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <returns>
            True if the problem has been solved and the warning should not be created on more time for the current channel state.
            False if the problem has not been solved and the warning should be created again as defined on the warning waiting time.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerHandlerBase.OnListenerDownTimeError(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)">
            <summary>
            Executes when a channel is down and a maximum down error time is exceeded.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <returns>
            True if the problem has been solved and the error should not be created on more time for the current channel state.
            False if the problem has not been solved and the error should be created again as defined on the error waiting time.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService">
            <summary>
            The class provides behaviour for the <see cref="T:Volvo.NVS.Utilities.WindowsServices.Services.NVSWinService"/> which manages and subscribes the collection of integration channels.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Utilities.WindowsServices.Services.NVSWinService"/> class enables simplified creation of Windows Services. When 
            the <see cref="T:Volvo.NVS.Utilities.WindowsServices.Services.NVSWinService"/> is used the logic executed as the windows service logic should
            be provided by the implementation of the <see cref="T:Volvo.NVS.Utilities.WindowsServices.Services.IWindowsServiceBehaviour"/>.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> class provides a logic for the <see cref="T:Volvo.NVS.Utilities.WindowsServices.Services.NVSWinService"/>.
            This class implements the <see cref="T:Volvo.NVS.Utilities.WindowsServices.Services.IWindowsServiceBehaviour"/>. The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> 
            manages the collection of integration channels and enables subscription and other operations on those channels.
            </para>
            <para>
            The channel used by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> is represented by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> 
            implementation. The <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> wraps an <see cref="T:Volvo.NVS.Integration.IInputChannel"/> and provides functionality required 
            and used by the service class.
            </para>
            <para>
            We use the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> to have a service (e.g. windows service) managing the collection
            of integration channels. This class provides the out of the box functionality which is specific and required by the
            service itself (e.g. stop, start).
            </para>
            <para>
            By default the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> initializes the list of integration channels to be
            managed according to the configuration in the current application configuration file. When this default approach
            is used the following can be used to configure the integration service behaviour (we start by defining the configuration 
            section for the integration listener service):
            </para>
            <code language="xml">
            <![CDATA[
            <configSections>
             <section name="integration.config" type="Volvo.NVS.Integration.WindowsServices.Config.IntegrationSection, Volvo.NVS.Integration.WindowsServices" />
            </configSections>
            <![CDATA[]]>
            </code>
            <para>
            When a section is added we need to specify its configuration. By this we define the channels (listeners) which should be managed by the service.
            Every listener node tells what is the channel from the integration library to be used and what is the service (message handler object) to be 
            involved when messages arrive or channel changes its state. Additional attributes are possible. For example the following can be defined:
            </para>
            <code language="xml">
            <![CDATA[
            <integration.config>
               <listeners>
                  <add listener="my_queue1" service="ListenerService1" downtimewarning="00:00:10" downtimeerror="00:00:25" start="true" />
                  <add listener="my_queue2" service="ListenerService2" start="true" />
               </listeners>
            </integration.config>
            <![CDATA[]]>
            </code>
            <para>
            For detailed documentation about the configuration attributes no the single listener level check the <see cref="T:Volvo.NVS.Integration.WindowsServices.Config.ListenerElement"/> class.
            </para>
            <para>
            A name of the listener is required and must be unique among all the other listener names. Additional attributes can be specified such as
            time after which a warning or error message is produced when a channel is offline. A flag telling if a channel listener should be started
            automatically is also possible.
            </para>
            <para>
            The <b>service</b> attribute specifies a name of the unity registration which should be used as the channel message handler. Such an registration
            must point at the class implementing the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler"/> interface. This is the implementation which will be used
            to process all the messages and detected channel changes (e.g. channel state changes). This implementation should be provided for every channel
            and it is implementation specific for your application. It is recommended to create a single handler per channel or even per message.
            </para>
            <para>
            When the <b>service</b> attribute is not given the <b>listener</b> name is used as the service name. In such a case a name of the handler unity
            registration is the same as the name of the listener.
            </para>
            <para>
            When all listeners are defined a corresponding configuration of the integration library is a must. A <b>listener</b> attribute specifies what is
            the name of the channel defined in the Integration Library configuration. The configuration of integration library is required and all channels
            specified on the listener nodes must be configured in integration. For example in our sample the following section is added:
            </para>
            <code language="xml">
            <![CDATA[
            <configSections>
               ...
               <section name="volvo.nvs.integration" type="Volvo.NVS.Integration.Configuration.IntegrationSection, Volvo.NVS.Integration" />
               ...
            </configSections>
            <![CDATA[]]>
            </code>
            <para>
            The integration section must configure all channels for all listeners. The name of the channel must be the same as the name of the listener.
            In our sample the following configuration can be specified:
            </para>
            <code language="xml">
            <![CDATA[
            <volvo.nvs.integration>
               <channels>
                  <add name="my_queue1" uri="wmq://nvs-int-vmware@NVSIL1:2418/DOTNET.CHANNEL?queue=NVSIL.APP.GIMR.1.IN?backout=null?pollinterval=5"/>
                  <add name="my_queue2" uri="wmq://nvs-int-vmware@NVSIL1:2418/DOTNET.CHANNEL?queue=NVSIL.APP.GIMR.2.IN?backout=null?pollinterval=5" />
               </channels>
            </volvo.nvs.integration>
            <![CDATA[]]>
            </code>
            <para>
            As we have defined <b>my_queue1</b> and <b>my_queue2</b> listeners under the <b>integration.config</b> we must also given the same for the
            <b>volvo.nvs.integration</b>. The channel names are the same as name of the listeners.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> can also be fully configured from code. For this the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/>
            constructor taking an instance of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyFactory"/> can be used. In such a case it is up to the implementation of the
            <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyFactory"/> to provide the configuration and initialization of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> objects.
            </para>
            <para>
            When the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> is configured the <see cref="T:Volvo.NVS.Utilities.WindowsServices.Services.NVSWinService"/> must be told to use the integration related
            class the logic for the windows service. Check the <see cref="T:Volvo.NVS.Utilities.WindowsServices.Services.NVSWinService"/> for details.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.channels">
            <summary>
            The collection of integration channels holding <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> objects.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.factory">
            <summary>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy"/> factory creating initial collection of channels to be managed.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.sync">
            <summary>
            The synchronization objects used to provide thread safety.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.state">
            <summary>
            The current state of the listener service.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.IntegrationListenerState">
            <summary>
            Represents the state of the listener service.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.IntegrationListenerState.Stopped">
            <summary>
            The listener is stopped and not subscribing on any channels.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.IntegrationListenerState.Stopping">
            <summary>
            The listener is stopping and has not stopped yet.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.IntegrationListenerState.Listening">
            <summary>
            The listener is listening, subscribing on all configured channels.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.IntegrationListenerState.Starting">
            <summary>
            The listener is starting and has not started yet.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.#ctor">
            <summary>
            Creates an instance of the integration listener resolving all the channels according to the configuration
            in the current application configuration file.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.#ctor(Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxyFactory)">
            <summary>
            Creates an instance of the integration listener resolving all the channels from the provided factory.
            </summary>
            <param name="factory">
            The factory object used to resolve and create all the channels to be managed by the service.
            </param>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.State">
            <summary>
            The current state of the service.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.Start">
            <summary>
            Starts the service and subscribes on all configured channels.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.Stop">
            <summary>
            Stops the integration service and disposes all the channels.
            </summary>
            <returns>True if all channels are stopped and disposed. False is errors are detected during channel closure.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.Get(System.String)">
            <summary>
            Returns a channel with a given name.
            </summary>
            <param name="name">
            A name of the already existing channel to be returned.
            </param>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException">
            Exception thrown when a channel with a given name does not exist or is not configured.
            </exception>
            <returns>The located channel proxy object.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.StartSubscription(Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy)">
            <summary>
            Starts the subscription on the given channel.
            </summary>
            <param name="proxy">The channel proxy on which the subscription should be started.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.Subscribe(System.String)">
            <summary>
            Subscribes the already existing and configured channel.
            </summary>
            <param name="name">
            A name of the channel which should be subscribed.
            </param>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException">
            Exception thrown when a channel with a given name does not exist or is not configured.
            </exception>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.AddAndSubscribe(Volvo.NVS.Integration.WindowsServices.Proxies.IChannelProxy)">
            <summary>
            Adds and subscribes the new channel.
            </summary>
            <param name="channel">
            The channel to be added and to start subscription for.
            </param>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelDuplicatedException">
            The exception thrown when the channel with a given name already exists and is managed by the service.
            </exception>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.Close(System.String)">
            <summary>
            Closes the channel with a given name so it is not subscribing anymore.
            </summary>
            <param name="name">
            A name of the already configured channel to be closed.
            </param>
            <exception cref="T:Volvo.NVS.Integration.WindowsServices.Exceptions.ChannelCreationException">
            Exception thrown when a channel with a given name does not exist or is not configured.
            </exception>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService.Contains(System.String)">
            <summary>
            Determines if the current service contains and manages the channel with the given name.
            </summary>
            <param name="name">
            A name of the already channel to be verified.
            </param>
            <returns>
            True if a channel is already managed by the service.
            False if a channel is not present and not known for a service.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler">
            <summary>
            The class provides a base implementation for reliable integration listener handlers. A reliable listener handler has extended error handling
            capabilities. It is able to close a channel when application problems are detected as well as open the channel back when issues are solved.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler"/> class takes the <see cref="T:System.TimeSpan"/> value in the constructor. This value specifies the time
            after which a channel being in the offline, disconnected state can be closed. Closing a channel helps in the resolution of major network
            related issues as the channel is fully restarted (closed and then opened back). It improves the channel reliability.
            </para>
            <para>
            The provided <see cref="T:System.TimeSpan"/> value in the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.#ctor(System.TimeSpan)"/> must be a non-zero, positive value. The value 
            should also be tuned so it is possible for a channel to connect within a given time. As the given <see cref="T:System.TimeSpan"/> specifies a time after 
            which the channel can be closed it is also the time after which an attempt for a connection will be terminated. It is because the connecting channel
            is treated as still being in the offline state so all connection attempts can be terminated after provided time into the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.#ctor(System.TimeSpan)"/>.
            </para>
            <para>
            The channel will only be automatically closed and opened back when the channel monitoring is enabled. The <see cref="P:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.ErrorTime"/> must
            be specified and configured. When the <see cref="P:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.ErrorTime"/> is not set the complete logic given by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler"/>
            class will have no effect on the channel and no automated closure and opening will be functioning.
            </para>
            <para>
            The time given in the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.#ctor(System.TimeSpan)"/> is not the exact time after which the channel will be closed. It is the time which
            must be exceeded but a closure or opening will happen as defined by the <see cref="P:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.ErrorTime"/> interval.
            </para>
            <para>
            The implementation of the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.IsReadyToProcessMessages"/> method must be provided. The implementation of the method should check availability
            and health of all of the resources required to process messages. For example: the application can detect any infrastructure related, database 
            related problems. When the message processing requires a database to be available or any other infrastructure to be alive it is obvious that the 
            processing cannot succeed when the required resource is not accessible.
            </para>
            <para>
            The <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.IsReadyToProcessMessages"/> method should check availability of all the resources required to process the message. The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler"/> 
            class may close the channel when the method says that the application is unable to process messages. The method <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.IsReadyToProcessMessages"/> 
            is however only executed when a channel is in the offline, disconnected state or when any errors during the message processing are detected.
            </para>
            <para>
            A closed channel will only be opened back when the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.IsReadyToProcessMessages"/> returns true. In other words the channel can only be opened
            back when the application says that it is ready to process the messages as all the required resources are also ready.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler"/> will close an active and opened channel when any errors during the message processing are detected, when the 
            channel monitoring is turned on and the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.IsReadyToProcessMessages"/> returns false. E.g. when the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerHandler.OnListenerMessageReceived(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Messages.IInputMessage)"/>
            throws an exception, the <see cref="P:Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy.ErrorTime"/> is specified and the application says that it is not ready to process the message by 
            returning false from the <see cref="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.IsReadyToProcessMessages"/>.
            </para>
            <para>
            The intention of the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler"/> is to keep the channel active always when an application is ready to process messages. When used on
            the channel is not configured to automatically start when a complete service starts but it is using monitoring and the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler"/>
            as the handler the channel can be started anyway by the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler"/>.
            </para>
            <para>
            For more details about channel monitoring and configuration check the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> and <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IntegrationListenerService"/> classes.
            </para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.CloseOfflineTimeout">
            <summary>
            A time after which a channel being in the offline, disconnected state should be closed.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.sync">
            <summary>
            The thread synchronization and memory barrier object.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.offlinePoint">
            <summary>
            A point in time at which the channel went offline for the last time.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.OfflinePoint">
            <summary>
            Gets a point in time at which the channel went offline for the last time.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.status">
            <summary>
            The last known channel status.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.Logger">
            <summary>
            The logger used to report states of the handler.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.#ctor(System.TimeSpan)">
            <summary>
            Creates an instance of the reliable channel.
            </summary>
            <param name="closeOfflineTimeout">
            A time after which a channel being in the offline, disconnected state can be closed.
            A time is also the connection timeout so its value must be carefully selected and cannot be too low.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.OnListernerStatusChanged(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Events.CommunicationStatusChanged)">
            <summary>
            Executes when a state of a channel changes.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="e">The changed event object.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.IsReadyToProcessMessages">
            <summary>
            Determines if the application is capable of processing the messages.
            </summary>
            <remarks>
            <para>
            When it is possible for an application to detect any problems resulting in the message processing failures
            then the application should provide an implementation of this method and return false for problematic cases. 
            </para>
            <para>
            For example: the application can detect any infrastructure related, database problems. When the message processing
            requires a database to be available or any other infrastructure to be alive it is obvious that the processing cannot 
            succeed when the required resource is not accessible.
            </para>
            <para>
            The implementation of the method may check availability and health of all of the resources required to process the message.
            </para>
            <para>
            You may always return true from an implementation of this method when it is not possible to determine if the current
            state of the application infrastructure is allowing to process the message or not.
            </para>
            <para>
            The method is only executed when an error with message processing is detected or a channel down time event is raised (a channel
            is in the offline, disconnected state and a given timeout value is reached). See the <see cref="T:Volvo.NVS.Integration.WindowsServices.Services.IIntegrationListenerMonitoringHandler"/>
            interface and the <see cref="T:Volvo.NVS.Integration.WindowsServices.Proxies.ChannelProxy"/> class for details.
            </para>
            </remarks>
            <returns>
            True if application can process messages and false when any application problems are detected.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.OnListenerErrorOccured(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy,Volvo.NVS.Integration.Events.CommunicationEventArgs{System.String})">
            <summary>
            Executes when an error occurs.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <param name="e">The error event object.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Services.ReliableListenerHandler.OnListenerDownTimeError(Volvo.NVS.Integration.WindowsServices.Proxies.IOperativeChannelProxy)">
            <summary>
            Executes when a channel is down and a maximum down error time is exceeded.
            </summary>
            <param name="channel">The channel for which the event is raised.</param>
            <returns>
            True if the problem has been solved and the error should not be created on more time for the current channel state.
            False if the problem has not been solved and the error should be created again as defined on the error waiting time.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Extensions.ChannelProxyStatusExtensions">
            <summary>
            Contains extension methods into the <see cref="T:Volvo.NVS.Integration.Events.CommunicationStatus"/> enumeration.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Extensions.ChannelProxyStatusExtensions.ToChannelProxyStatus(Volvo.NVS.Integration.Events.CommunicationStatus)">
            <summary>
            Converts the current communication status into the status of the channel proxy.
            </summary>
            <param name="status">Communication status</param>
            <returns>Channel proxy status</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Extensions.TimeSpanExtensions">
            <summary>
            Provides extensions into the <see cref="T:System.TimeSpan"/> structure and its nullable version.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.WindowsServices.Extensions.TimeSpanExtensions.Min(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Returns the minimum value comparing the current nullable <see cref="T:System.TimeSpan"/> and a provided nullable value.
            </summary>
            <remarks>
            The min value is selected form the two nullable <see cref="T:System.TimeSpan"/> values. A not null value is treated as 
            lower than any null value. It means null is returned if and only if both values are nulls.
            </remarks>
            <param name="current">The current timespan value to compare from.</param>
            <param name="value">The value to compare with.</param>
            <returns>
            The min value from the current and provided <see cref="T:System.TimeSpan"/>.
            A not null value is treated as lower than any null value.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ChannelExists">
            <summary>
              Looks up a localized string similar to The channel named ‘{0} ‘ already exists. The channel name must be unique..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ChannelNameEmpty">
            <summary>
              Looks up a localized string similar to The name of the channel must be provided..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ChannelNotDisposed">
            <summary>
              Looks up a localized string similar to The ‘{0}’ could not be closed and disposed..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ChannelNotFound">
            <summary>
              Looks up a localized string similar to The ‘{0}’ channel could not be found. Check the channel name and ensure it is configured..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.CloseOfflineTimeOutIncorrect">
            <summary>
              Looks up a localized string similar to The closure timeout for the offline channel must be a non-zero, positive value..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.CommunicationStatusNotMapped">
            <summary>
              Looks up a localized string similar to The {0} communication status is not mapped into the {1}.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.EndPointListenerMissing">
            <summary>
              Looks up a localized string similar to The name of the listener is required and cannot be empty. Check the configuration of listeners and the listener attribute..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.IntegrationConfigurationFailure">
            <summary>
              Looks up a localized string similar to Unable to load and initialize the configuration of the integration. Check the {0} configuration node..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.IntegrationHandlerNotResolved">
            <summary>
              Looks up a localized string similar to The listener service (handler) could not be resolved. Make sure the handler ‘{0}’ is registered within the unity and it implements the ‘{1}’. Check configuration of listeners and unity..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.IntegrationServiceContainsNotForStopped">
            <summary>
              Looks up a localized string similar to Channels can be examined for a running service only..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.IntegrationServiceStarted">
            <summary>
              Looks up a localized string similar to The integration service has been started..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.IntegrationServiceStarting">
            <summary>
              Looks up a localized string similar to The integration service is starting..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.IntegrationServiceStopped">
            <summary>
              Looks up a localized string similar to The integration service has been stopped..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.IntegrationServiceStopping">
            <summary>
              Looks up a localized string similar to The integration service is stopping..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.IntegrationServiceSubscribeNotForStopped">
            <summary>
              Looks up a localized string similar to Subscribe can only be requested for a running service..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ListenerNameDuplicated">
            <summary>
              Looks up a localized string similar to There is already a listener named ‘{0}’. Make sure listener names are unique. Check the configuration of listeners..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.NoChannelFromFactory">
            <summary>
              Looks up a localized string similar to The channel object has not been created and returned by the {0}.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ReliableListenerClosingChannelOnTimeExceeded">
            <summary>
              Looks up a localized string similar to {0} is closing the channel as the maximum offline time is exceeded..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ReliableListenerNorReady">
            <summary>
              Looks up a localized string similar to {0} is not ready to process messages. Giving more time.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.ReliableListenerOpeningChannel">
            <summary>
              Looks up a localized string similar to {0} is opening the closed channel..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.WindowsServices.Resources.IntegrationWindowsServicesResources.RelibaleListenerClosingChannel">
            <summary>
              Looks up a localized string similar to {0} is closing the channel as the application is not ready.
            </summary>
        </member>
    </members>
</doc>
