<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Home_About_AboutLabel" xml:space="preserve">
    <value>Sobre</value>
  </data>
  <data name="Home_About_HelpLabel" xml:space="preserve">
    <value>Ajuda</value>
  </data>
  <data name="Home_About_HowToStartTitle" xml:space="preserve">
    <value>Como Começar?</value>
  </data>
  <data name="Home_About_HowToStart_DetailsOnCoding" xml:space="preserve">
    <value>para detalhes de como programar, performance, manutenibilidade, nomeações, design de código, etc.</value>
  </data>
  <data name="Home_About_HowToStart_DetailsToInitDev" xml:space="preserve">
    <value>para detalhes de como iniciar o desenvolvimento.</value>
  </data>
  <data name="Home_About_HowToStart_HowToAcces" xml:space="preserve">
    <value>Você sabe como acessá-lo?</value>
  </data>
  <data name="Home_About_HowToStart_Read" xml:space="preserve">
    <value>Leia</value>
  </data>
  <data name="Home_About_HowToStart_ReadGettingStarted" xml:space="preserve">
    <value>Leia o POS Getting Started em</value>
  </data>
  <data name="Home_About_HowToStart_SeeSourceCode" xml:space="preserve">
    <value>Veja o código fonte do POS em</value>
  </data>
  <data name="Home_About_HowToStart_TakeTour" xml:space="preserve">
    <value>Faça um tour pela aplicação POS, registre um pedido e divirta-se!</value>
  </data>
  <data name="Home_About_InfoLabel_MoreDetails" xml:space="preserve">
    <value>Mais detalhes em</value>
  </data>
  <data name="Home_About_InfoLabel_PosRefApp" xml:space="preserve">
    <value>Aplicação de referência POS.</value>
  </data>
  <data name="Home_About_IntroDesc_PosDesc_Func" xml:space="preserve">
    <value>A funcionalidade da aplicação habilita um simples gerenciamento de pedido, bem como: criar, atualizar e deletar.</value>
  </data>
  <data name="Home_About_IntroDesc_PosDesc_Proposal" xml:space="preserve">
    <value>Sua proposta é mostrar a arquitetura NVS, padrões e convenções implementadas na prática. Porém em um</value>
  </data>
  <data name="Home_About_IntroDesc_PosDesc_Proposal_Scenario" xml:space="preserve">
    <value>cenário real simplificado.</value>
  </data>
  <data name="Home_About_IntroDesc_PosDesc_SourceCode" xml:space="preserve">
    <value>O código fonte da solução também pode ser usado como modelo para novos projetos.</value>
  </data>
  <data name="Home_About_IntroDesc_WhatIsPos" xml:space="preserve">
    <value>é a implementação da aplicação de referência do NVS.</value>
  </data>
  <data name="Home_About_IntroductionTitle" xml:space="preserve">
    <value>Introdução</value>
  </data>
  <data name="Home_About_ReferencesTitle" xml:space="preserve">
    <value>Referências</value>
  </data>
  <data name="Home_About_References_NvsRefArch" xml:space="preserve">
    <value>Arquitetura de Referência NVS:</value>
  </data>
  <data name="Home_About_References_TelerikControls" xml:space="preserve">
    <value>Controles Telerik:</value>
  </data>
  <data name="Home_About_References_UserInterfaceGuides" xml:space="preserve">
    <value>Guias para Interfaces do Usuário:</value>
  </data>
  <data name="Home_About_RequirementsUsabilityTitle" xml:space="preserve">
    <value>Noções Sobre Requisitos e Usabilidade</value>
  </data>
  <data name="Home_About_RequirementsUsability_PosFocus" xml:space="preserve">
    <value>A aplicação POS apresenta um processo de negócio fictício, o que pode não corresponder ao processo Volvo para gerenciamento de produtos. O foco lógico da aplicação POS não é a interação com o usuário.</value>
  </data>
  <data name="Home_About_RequirementsUsability_TalkToUsers" xml:space="preserve">
    <value>Quando você iniciar um projeto lembre-se de encontrar com os usuários finais para elicitar os requisitos e achar a forma de trabalho.</value>
  </data>
  <data name="Home_About_RequirementsUsability_UsePrototype" xml:space="preserve">
    <value>Use prototipação e avaliações do usuário para encontrar um entendimento comum e desenvolver as soluções corretas.</value>
  </data>
  <data name="Home_About_RequirementsUsability_UserInteraction" xml:space="preserve">
    <value>Tenha sempre certeza que a interação com usuário é feita de maneira apropriada e eficiente.</value>
  </data>
  <data name="Home_Index_Header" xml:space="preserve">
    <value>O que você quer fazer?</value>
  </data>
  <data name="Home_Index_MoreInfo" xml:space="preserve">
    <value>Mais informações sobre essa aplicação</value>
  </data>
  <data name="Home_Index_Title" xml:space="preserve">
    <value>POS - Página Inicial</value>
  </data>
</root>