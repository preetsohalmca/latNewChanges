<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Home_About_AboutLabel" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="Home_About_HelpLabel" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Home_About_HowToStartTitle" xml:space="preserve">
    <value>How to Start?</value>
  </data>
  <data name="Home_About_HowToStart_DetailsOnCoding" xml:space="preserve">
    <value>for details how to code, performance, maintainability, naming, code design, etc.</value>
  </data>
  <data name="Home_About_HowToStart_DetailsToInitDev" xml:space="preserve">
    <value>for details how to start developing.</value>
  </data>
  <data name="Home_About_HowToStart_HowToAcces" xml:space="preserve">
    <value>Do you know how to access it?</value>
  </data>
  <data name="Home_About_HowToStart_Read" xml:space="preserve">
    <value>Read</value>
  </data>
  <data name="Home_About_HowToStart_ReadGettingStarted" xml:space="preserve">
    <value>Read the POS Getting Started at</value>
  </data>
  <data name="Home_About_HowToStart_SeeSourceCode" xml:space="preserve">
    <value>View the POS source code at</value>
  </data>
  <data name="Home_About_HowToStart_TakeTour" xml:space="preserve">
    <value>Take a tour on POS application, register an Order, have fun!</value>
  </data>
  <data name="Home_About_InfoLabel_MoreDetails" xml:space="preserve">
    <value>More details in</value>
  </data>
  <data name="Home_About_InfoLabel_PosRefApp" xml:space="preserve">
    <value>POS reference application.</value>
  </data>
  <data name="Home_About_IntroDesc_PosDesc_Func" xml:space="preserve">
    <value>The application functionality enables simple management of orders, such as: create, update and delete.</value>
  </data>
  <data name="Home_About_IntroDesc_PosDesc_Proposal" xml:space="preserve">
    <value>It's purpose is to show NVS architecture, design patterns and conventions implemented in practical, but</value>
  </data>
  <data name="Home_About_IntroDesc_PosDesc_Proposal_Scenario" xml:space="preserve">
    <value>simplified real-life scenario</value>
  </data>
  <data name="Home_About_IntroDesc_PosDesc_SourceCode" xml:space="preserve">
    <value>The source solution may be also used as template for new projects.</value>
  </data>
  <data name="Home_About_IntroDesc_WhatIsPos" xml:space="preserve">
    <value>is the NVS reference application example implementation.</value>
  </data>
  <data name="Home_About_IntroductionTitle" xml:space="preserve">
    <value>Introduction</value>
  </data>
  <data name="Home_About_ReferencesTitle" xml:space="preserve">
    <value>References</value>
  </data>
  <data name="Home_About_References_NvsRefArch" xml:space="preserve">
    <value>NVS reference architecture:</value>
  </data>
  <data name="Home_About_References_TelerikControls" xml:space="preserve">
    <value>Telerik controls:</value>
  </data>
  <data name="Home_About_References_UserInterfaceGuides" xml:space="preserve">
    <value>User Interfaces guidelines:</value>
  </data>
  <data name="Home_About_RequirementsUsabilityTitle" xml:space="preserve">
    <value>Notes about Requirements and Usability</value>
  </data>
  <data name="Home_About_RequirementsUsability_PosFocus" xml:space="preserve">
    <value>The POS application presents a fictitious business process. This application is not necessarily designed to demonstrate the Volvo process for part management. The focus of POS is to demonstrate application logic, not user interaction.</value>
  </data>
  <data name="Home_About_RequirementsUsability_TalkToUsers" xml:space="preserve">
    <value>When you start a project remember to meet with end-users to elicit requirements and find the way of working.</value>
  </data>
  <data name="Home_About_RequirementsUsability_UsePrototype" xml:space="preserve">
    <value>Use prototyping and user evaluation to reach a common understanding and properly set expectations.</value>
  </data>
  <data name="Home_About_RequirementsUsability_UserInteraction" xml:space="preserve">
    <value>Always ensure that the user interaction is implemented efficiently for the end-users.</value>
  </data>
  <data name="Home_Index_Header" xml:space="preserve">
    <value>What do you want to do?</value>
  </data>
  <data name="Home_Index_MoreInfo" xml:space="preserve">
    <value>More information about this application</value>
  </data>
  <data name="Home_Index_Title" xml:space="preserve">
    <value>LAT - Home Page</value>
  </data>
</root>