@model Volvo.LAT.PartDomain.DomainLayer.Entities.PoLineEmailRecipent
<style>
    div#sendEmailPopup table tr td {
        border: none;
    }
    div.email-margn {
        padding: 10px;
        font-weight: bold;
    }
        div.email-margn h5 {
            font-size: 12px;
            font-weight: bold;
        }
</style>


<div class="email-margn">

    <table class="table" id="recipentsList">
        <tr><td><h5> Do you want to send Payment Information about Purchase Order @Model.EbdNumber to follwoing recipents?</h5></td></tr>
        <tr><td><input type="checkbox" id="selectAll" />Sellect All</td></tr>
        @foreach (var item in Model.RequestorEmails)
        {

            <tr>
                <td>

                    @{
                        var polineIds = string.Join(",", item.PoLineId);
                    }

                    @if (!string.IsNullOrEmpty(item.RequestorEmail))
                    {
                        @Html.CheckBox("checkboxRequestor_" + item.RequestorEmail, new { @class = "contact-person", onclick = "SelectedEmail(this)" }) <label class="lbl-contact-person"> @Html.DisplayFor(modelItem => item.RequestorEmail)</label><br />
                    }
                    @Html.Hidden("polineRequestorEmail_" + item.RequestorEmail, item.RequestorEmail,new { @class = "recipent-email"})
                    @Html.Hidden("requestorPolineIds_" + item.RequestorEmail, polineIds, new { @class = "recipent-polineids" })
                </td>


            </tr>

        }
        @foreach (var item in Model.ContactPersonEmails)
        {

            <tr>
                <td>

                    @{
                        var polineIds = string.Join(",", item.PoLineId);
                    }
                    @Html.Hidden("polineContactPersonEmail_" + item.ContactPersonEmail, item.ContactPersonEmail,new { @class="recipent-email"})
                    @Html.Hidden("contactPersonPolineIds_" + item.ContactPersonEmail, polineIds, new { @class = "recipent-polineids" })
                    @if (!string.IsNullOrEmpty(item.ContactPersonEmail))
                    {
                        @Html.CheckBox("checkboxRequestor_" + item.ContactPersonEmail, new { @class = "contact-person",onclick= "SelectedEmail(this)" }) <label class="lbl-contact-person"> @Html.DisplayFor(modelItem => item.ContactPersonEmail)</label><br />
                    }

                </td>


            </tr>

        }
    </table>
</div>
<div class="col-md-6">
    <button class="k-button" id="sendEmailButton">Send</button>
    <button class="k-button" id="cancelSendEmailButton"> Cancel</button>
</div>

<script>
 

    function RecipentEmail(RecipentEmail,  PolineIds) {
        this.EmailRecipent = RecipentEmail;
        this.PolineIds = PolineIds;
    }
    var emailRecipents = [];
    function SelectedEmail(obj) {
        //debugger;
        var email = $(obj).parent().find('.recipent-email').val();
        var polineIds = $(obj).parent().find('.recipent-polineids').val();
        if (email) {
            if ($(obj).is(':checked')) {

                emailRecipents.push(new RecipentEmail(email, polineIds));
            }
            else {
                emailRecipents = removeEmail(emailRecipents, 'RecipentEmail', email);
            }
        }

    }
    var removeEmail = function (arr, attr, value) {
        var i = arr.length;
        while (i--) {
            if (arr[i]
                && arr[i].hasOwnProperty(attr)
                && (arguments.length > 2 && arr[i][attr] === value)) {

                arr.splice(i, 1);

            }
        }
        return arr;
    }
    $(function () {
        var sendWindow = $("#sendEmailPopup");
        $('#selectAll').on('change', function () {
            if ($(this).is(':checked')) {
                $('table tr td').find(':checkbox').prop('checked', true);
                $('table tr td').find(':checkbox').each(function () {
                    SelectedEmail(this);
                });
            }
            else {
                $('table tr td').find(':checkbox').prop('checked', false);
                $('table tr td').find(':checkbox').each(function () {
                    SelectedEmail(this);
                });
            }

        });
       
        $('#cancelSendEmailButton').on('click', function () {
            sendWindow.data("kendoWindow").close();
        });
        $('#sendEmailButton').on('click', function () {
            debugger;
            if (emailRecipents.length == 0) {
                return;
            }
            $.ajax({
                type: "POST",
                url: "/POLine/SendEmail",
                contentType: 'application/json',
                dataType: "json",
                data: JSON.stringify({ recipents: emailRecipents,ebdNumber:'@Model.EbdNumber' }),
                success: function (result) {

                    sendWindow.data("kendoWindow").close();
                    bootbox.alert("Email Successfully sent");
                },
                error: function (result) {
                    options.error(result);
                }
            });

        });

    });

</script>
