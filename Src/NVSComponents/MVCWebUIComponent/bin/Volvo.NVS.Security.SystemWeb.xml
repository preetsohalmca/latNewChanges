<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Volvo.NVS.Security.SystemWeb</name>
    </assembly>
    <members>
        <member name="T:Volvo.NVS.Security.SystemWeb.Application.ErrorHandler">
            <summary>
            The class helps in the web application error handling process. 
            Security related error handling is covered by this implementation.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Application.ErrorHandler.HandleAuthorizationError(System.Web.HttpApplication,System.Action{System.Web.HttpApplication,System.Exception})">
            <summary>
            The function handles the authorization errors for web applications in a unified way.
            </summary>
            <remarks>
            <para>
            The function handles authorization related errors only. It means the <see cref="T:Volvo.NVS.Security.Exceptions.NotAuthorizedException"/> exceptions
            and the <see cref="T:System.Web.HttpException"/> exceptions where the status code is set to Unauthorized (401).
            </para>
            <para>
            When the authorization related error is detected all the caches are disabled and the current response is discarded.
            </para>
            <para>
            Ajax requests will receive the 401 (Unauthorized) status codes. No <paramref name="overwrite"/> action will be called
            for Ajax requests and the error will be marked as handled. Note that the 401 status code can still be altered by the
            authentication module and depending on the authentication type it can result in a challenge, redirection.
            </para>
            <para>
            For standard requests the <paramref name="overwrite"/> action will be called. It should always write the
            response with the information about the error and this response depend on the type of the application and
            its requirements.
            </para>
            </remarks>
            <param name="application">
            The current application which should be checked for authorization related errors.
            </param>
            <param name="overwrite">
            The action which contains the overwrite code into the NotAuthorized page/view for the current application.
            The action MUST overwrite and should never be an empty action. The action is called if and only if the
            current request is NOT an Ajax request.
            </param>
            <returns>
            True if the authorization error has been detected for the current request and no other error handling code should run.
            False if the authorization error has not been detected and the user's code should continue and handle the current error.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Exceptions.SecurityWebConfigurationException">
            <summary>
            Thrown when configuration for the Web config file is incorrect.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Exceptions.SecurityWebConfigurationException.#ctor">
            <summary>
            Creates a security Web configuration exception.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Exceptions.SecurityWebConfigurationException.#ctor(System.String)">
            <summary>
            Creates a security Web configuration exception.
            </summary>
            <param name="message">The error message to be included.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Exceptions.SecurityWebConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a security Web configuration exception.
            </summary>
            <param name="message">The error message to be included.</param>
            <param name="inner">The inner exception to be connected into the current one.</param>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1">
            <summary>
            Defines a base and abstract implementation for http modules running Security library authentication handlers.
            </summary>
            <remarks>
            Web related authentication handlers can be wrapped in the http modules and can participate in the web application
            pipeline processing. That way they become web application authentication modules. This class helps in the creation
            of http modules wrapping and running code from security library authentication handlers.
            </remarks>
            <typeparam name="THandler">A type of the authentication handler to be run by the http module.</typeparam>
        </member>
        <member name="F:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.handler">
            <summary>
            A handler to be used by the module and handling all the authentication events.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.#ctor">
            <summary>
            Creates an instance of the Http Module completing authentication using the configured authentication handler.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.#ctor(`0)">
            <summary>
            Creates an instance of the Http Module completing authentication using the given handler.
            </summary>
            <param name="handler">The authentication handler to be used by the module.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.CreateNewHandler(System.Web.HttpContext)">
            <summary>
            Creates an instance of the authentication handler to be used by the module.
            </summary>
            <param name="context">A current http context.</param>
            <returns>A new instance of the authentication handler to be used by the http module.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.GetOrCreateHandler(System.Web.HttpContext)">
            <summary>
            Creates an instance of the authentication handler or gets the already created one.
            </summary>
            <param name="context">A current http context.</param>
            <returns>An instance of the authentication handler to be used by the http module.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the http module assigning the common authentication events into the used authentication handler.
            </summary>
            <param name="application">The current http application.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Event handler called when a security module has established or is establishing the identity of the user.
            </summary>
            <param name="sender">The sender which is the http application.</param>
            <param name="e">The even arguments.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.PostAuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Event handler called when a security module has established the identity of the user.
            </summary>
            <param name="sender">The sender which is the http application.</param>
            <param name="e">The even arguments.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.PreInitialize(System.Web.HttpApplication)">
            <summary>
            Performs an additional module initialization code.
            </summary>
            <remarks>
            The <see cref="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1"/> initializes the <see cref="T:System.Web.HttpApplication"/> connecting the
            Authenticate and PostAuthenticate events with the current authentication handler. When an additional preparation
            should be performed before those events are assigned it can be performed under this initialization function.
            </remarks>
            <param name="application">The current http application.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.PostInitialize(System.Web.HttpApplication)">
            <summary>
            Performs an additional module initialization code (post initialization).
            </summary>
            <remarks>
            The <see cref="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1"/> initializes the <see cref="T:System.Web.HttpApplication"/> connecting the
            Authenticate and PostAuthenticate events with the current authentication handler. When an additional events should
            be handled by the http module then those events can be setup in this post initialization function.
            </remarks>
            <param name="application">The current http application.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.Dispose">
            <summary>
            Disposes the current http module.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1.Dispose(System.Boolean)">
            <summary>
            Disposes the current http module.
            </summary>
            <param name="disposing">True if already disposing.</param>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1">
            <summary>
            Defines a base and abstract implementation for http modules running Security library authentication handlers
            and being able to verify configuration of the web application required for execution of the handler (verifiable modules).
            </summary>
            <remarks>
            <para>
            Web related authentication handlers can be wrapped in the http modules and can participate in the web application
            pipeline processing. That way they become web application authentication modules. This class helps in the creation
            of http modules wrapping and running code from security library (running security library authentication handlers).
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1"/> additionally adds the validation method under which the
            configuration of the current web application can be verified. The verification should check all possible settings which
            are expected for the current http module to run the given authentication handler.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1"/> differs form the <see cref="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1"/>
            by adding the web application configuration validation method (it adds the configuration verification logic).
            </para>
            <para>
            One should implement the <see cref="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1.ValidateConfiguration"/> method in order to provide the web application configuration
            verification. The method should throw when the configuration is determined as an incorrect one. The method is guaranteed to
            be executed as long as the configuration is not validated or determined as valid. Once the configuration is determined as
            valid by the method then a validation logic will not run anymore.
            </para>
            </remarks>
            <typeparam name="THandler">A type of the authentication handler to be run by the http module.</typeparam>
        </member>
        <member name="F:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1.validated">
            <summary>
            Determines wherever a configuration has been validated and if validated configuration is correct.
            </summary>
            <remarks>
            <para>
            A value of this field is set to false (default) if validation has not been run yet or if validation
            has been run but validated configuration is not correct. In other words a value of false means for us
            that we should run validation because it has not been run yet or we should re-run it as it might change
            form incorrect one -> correct. Once the configuration is recognized as the correct one no modifications 
            of this flag should occur (we are not re-validating already validated and correct configurations).
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1.sync">
            <summary>
            Provides synchronization and is used in order to put full memory barriers.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1.WebSectionName">
            <summary>
            A name of the web configuration section.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1.PreInitialize(System.Web.HttpApplication)">
            <summary>
            Performs an additional module initialization code.
            </summary>
            <remarks>
            <para>
            The base <see cref="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationHttpModule`1"/> initializes the <see cref="T:System.Web.HttpApplication"/> connecting the
            Authenticate and PostAuthenticate events with the current authentication handler. When an additional preparation
            should be performed before those events are assigned it can be performed under this initialization function.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1"/> adds a validation execution into the initialization method.
            </para>
            </remarks>
            <param name="application">The current http application.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1.ValidateConfiguration">
            <summary>
            Validates configuration of the web application for the current http module and for the current authentication handler.
            </summary>
            <remarks>
            The method throws when a configuration is incorrect. When no exception is throw by the method it means
            that validation has been successful and no configuration problems have been detected.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1.ValidateAuthenticationSection(System.Configuration.Configuration,System.Web.Configuration.AuthenticationMode)">
            <summary>
            Validates the Authentication section within the web config.
            <remarks>
            <para>
            This method receives the configuration section as parameter, then loads the System.Web section and check if there is 
            an Authentication section containing the same <see cref="T:System.Web.Configuration.AuthenticationMode"/> passed as parameter.
            </para>
            </remarks>
            </summary>
            <param name="configuration">The <see cref="T:System.Configuration.Configuration"/> object loaded from the application web config file.</param>
            <param name="authenticationMode">The <see cref="T:System.Web.Configuration.AuthenticationMode"/> that is expected to be in the Authentication section.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Modules.AuthenticationVerifableHttpModule`1.ValidateAuthenticationSection(System.Web.Configuration.AuthenticationMode)">
            <summary>
            Validates the Authentication section within the web config.
            <remarks>
            <para>
            This method reads the web configuration file from the application root, loads the System.Web section and check if there is 
            an Authentication section containing the same <see cref="T:System.Web.Configuration.AuthenticationMode"/> passed as parameter.
            </para>
            </remarks>
            </summary>
            <param name="authenticationMode">The <see cref="T:System.Web.Configuration.AuthenticationMode"/> that is expected to be in the Authentication section.</param>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Extensions.ExceptionExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Extensions.ExceptionExtensions.IsAuthorizationException(System.Exception)">
            <summary>
            Determines if the exception object is the authorization related exception.
            </summary>
            <param name="exception">The exception to be examined.</param>
            <returns>True if the exception represents the unauthorized information.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Extensions.HttpApplicationExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Web.HttpApplication"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Extensions.HttpApplicationExtensions.HandleAuthorizationError(System.Web.HttpApplication,System.Action{System.Web.HttpApplication,System.Exception})">
            <summary>
            The function handles the authorization errors for web applications in a unified way.
            </summary>
            <remarks>
            <para>
            The function handles authorization related errors only. It means the <see cref="T:Volvo.NVS.Security.Exceptions.NotAuthorizedException"/> exceptions
            and the <see cref="T:System.Web.HttpException"/> exceptions where the status code is set to Unauthorized (401).
            </para>
            <para>
            When the authorization related error is detected all the caches are disabled and the current response is discarded.
            </para>
            <para>
            Ajax requests will receive the 401 (Unauthorized) status codes. No <paramref name="overwrite"/> action will be called
            for Ajax requests and the error will be marked as handled. Note that the 401 status code can still be altered by the
            authentication module and depending on the authentication type it can result in a challenge, redirection.
            </para>
            <para>
            For standard requests the <paramref name="overwrite"/> action will be called. It should always write a
            response with the information about the error and. The response depends on the type of the application and
            its requirements.
            </para>
            <example>
            <para>
            Handle the authorization related errors and redirect into the not authorized view. For other types of errors
            redirect into the generic error view:
            </para>
            <code>
            public class MvcApplication : HttpApplication
            {
            
                private void WriteNotAuthorized(HttpApplication application, Exception exception)
                {
                    // redirect into the not authorized view, page
                }
            
                private void WriteGenericError(HttpApplication application, Exception exception)
                {
                    // redirect into the error view, page
                }
            
                protected void Application_Error(object sender, EventArgs e)
                {
                    HttpApplication application = (HttpApplication)sender;
            
                    // Handle the authorization related error in the unified way
                    if (this.HandleAuthorizationError(WriteNotAuthorized))
                    {
                        // The not authorized case has been handled
                        return;
                    }
            
                    // Get information about the exception detected for the current request
                    var exception = Server.GetLastError();
                    
                    // Make sure the cache is disabled for the currently executing request
                    application.Context.DisableCache();
            
                    // Clear all the errors collected so far
                    application.Context.ClearError();
            
                    HttpResponse response = application.Response;
                    response.Clear();
                    response.StatusCode = (int)HttpStatusCode.InternalServerError;
            
                    if (!application.Request.IsAjaxRequest())
                    {
                         WriteGenericError(application, exception);
                    }
                }
            }
            </code>
            </example>
            </remarks>
            <param name="application">
            The current application which should be checked for authorization related errors.
            </param>
            <param name="overwrite">
            The action which contains the overwrite code into the NotAuthorized page/view for the current application.
            The action MUST overwrite and should never be an empty action. The action is called if and only if the
            current request is NOT an Ajax request.
            </param>
            <returns>
            True if the authorization error has been detected for the current request and no other error handling code should run.
            False if the authorization error has not been detected and the user's code should continue and handle the current error.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Extensions.HttpContextExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Web.HttpContext"/> and <see cref="T:System.Web.HttpContextBase"/> classes.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Extensions.HttpContextExtensions.ToHttpContextBase(System.Web.HttpContext)">
            <summary>
            Creates the <see cref="T:System.Web.HttpContextBase"/> from the <see cref="T:System.Web.HttpContext"/>.
            </summary>
            <param name="context">The context to be wrapped and provided as the base implementation.</param>
            <returns>The base http context implementation.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Extensions.HttpContextExtensions.DisableCache(System.Web.HttpContextBase)">
            <summary>
            Disable cache of the resulting page.
            </summary>
            <param name="context">The current http context.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Extensions.HttpContextExtensions.DisableCache(System.Web.HttpContext)">
            <summary>
            Disable cache of the resulting page.
            </summary>
            <param name="context">The current http context.</param>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Extensions.HttpRequestExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Web.HttpRequest"/> and <see cref="T:System.Web.HttpRequestBase"/> classes.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Extensions.HttpRequestExtensions.ToHttpRequestBase(System.Web.HttpRequest)">
            <summary>
            Convert the <see cref="T:System.Web.HttpRequest"/> into the <see cref="T:System.Web.HttpRequestBase"/>.
            </summary>
            <param name="request">The current request object.</param>
            <returns>A http request.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Extensions.HttpRequestExtensions.IsAjaxRequest(System.Web.HttpRequestBase)">
            <summary>
            Determines if the current request is the AjaxRequest.
            </summary>
            <param name="request">The request object to be examined.</param>
            <returns>True if request is recognized as Ajax request.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Extensions.HttpRequestExtensions.IsAjaxRequest(System.Web.HttpRequest)">
            <summary>
            Determines if the current request is the AjaxRequest.
            </summary>
            <param name="request">The request object to be examined.</param>
            <returns>True if request is recognized as Ajax request.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Handlers.AuthenticationHostContextWeb">
            <summary>
            The class abstracts an access into the <see cref="T:System.Web.HttpContext"/> for authentication data and authentication related operations.
            </summary>
            <remarks>
            <para>
            The base authentication handlers are host independent but they still need a way to inform the host about detected
            identities, principals and results from the authentication process. In order to achieve this they operate on the
            <see cref="T:Volvo.NVS.Security.Handlers.IAuthenticationHostContext"/> implementations abstracting access to host specific information.
            </para>
            <para>
            The <see cref="T:Volvo.NVS.Security.SystemWeb.Handlers.AuthenticationHostContextWeb"/> is the web related abstraction for the <see cref="T:System.Web.HttpContext"/>. It 
            means it is an abstraction for the System.Web based implementations.
            </para>
            <para>
            One should use already implemented authentication components, Http Modules, Owin components if possible. The host context
            classes are needed if your are about to implement your own authentication handler.
            </para>
            <para>
            Check also the base <see cref="T:Volvo.NVS.Security.Handlers.AuthenticationHandler"/> class for more information.
            </para>
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Security.SystemWeb.Handlers.AuthenticationHostContextWeb.context">
            <summary>
            The current Http context wrapped by this host abstracting implementation.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Handlers.AuthenticationHostContextWeb.#ctor(System.Web.HttpContextBase)">
            <summary>
            Create an instance (abstraction) of the authentication host wrapping the Http Context.
            </summary>
            <param name="context">The current Http context to be wrapped.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Handlers.AuthenticationHostContextWeb.Assign(System.Security.Principal.IIdentity)">
            <summary>
            Assign the current identity into the host context.
            </summary>
            <param name="identity">
            The identity which should be assigned into the current host context.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Handlers.AuthenticationHostContextWeb.Assign(System.Security.Principal.IPrincipal)">
            <summary>
            Assign the current principal into the host context.
            </summary>
            <param name="principal">
            The principal which should be assigned into the current host context.
            </param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Handlers.AuthenticationHostContextWeb.Resolve">
            <summary>
            Get the principal currently assigned into the host context.
            </summary>
            <returns>
            The principal which is currently assigned into the host context.
            </returns>
        </member>
        <member name="P:Volvo.NVS.Security.SystemWeb.Handlers.AuthenticationHostContextWeb.Timestamp">
            <summary>
            Returns the current timestamp for the context. 
            For web applications it is the current request timestamp (different for every request made).
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Claims.WebClaimsService">
            <summary>
            The Claims Service class managing the ClaimsPrincipal instances within the current Http Context and current thread.
            </summary>
            <remarks>
            <para>
            This ClaimsService class manages the principal object in the current HttpContext and on the current thread. It means it is mainly designed
            to be used in the ASP.NET applications for example: MVC applications where the host is the IIS (SystemWeb dependent host).
            </para>
            <para>
            You should always decide which type of the Claims Service should be used in your application. Once it is decided you must register the 
            <see cref="T:Volvo.NVS.Security.Claims.IClaimsService"/> implementation to be used. The registration, configuration can be done using the Security Library code-based, 
            fluent configuration (recommended) or by adding type mappings into the unity directly.
            </para>
            <para>
            Claim based identity, authentication enables to separate the maintenance of user authorizations and user sign-in out of the application. 
            Claims say what the subject is or is not. Claims are not what the subject can and cannot do and authorization logic still stays in the 
            application code itself.
            </para>
            </remarks>
            <example>
            <para>
            If you are using one of the Security Library authentication handlers (e.g. by referencing the Security.SystemWeb.Windows) the current 
            principal will be automatically assigned by the handler when the authentication succeeded. It will be assigned into the currently 
            registered and configured IClaimsService implementation.
            </para>
            <para>
            When the principal is registered, assigned we may use claims-based information via the Claims Service.
            </para>
            <code>
            IClaimsService service = Container.Resolve&lt;IClaimsService&gt;();
            var roles = service.Roles;
            // Do something with the roles
            </code>
            </example>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Claims.WebClaimsService.Assign(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Assigns the claims-based principal object and stores, manages it in the current thread.
            This object can later be retrieved using the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> property.
            </summary>
            <param name="principal">The claims principal to be assigned and managed by the service.</param>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Claims.WebClaimsService.Resolve">
            <summary>
            Resolves the currently assigned claims-based principal object from the service using the current thread.
            The method returns the object assigned by the <see cref="M:Volvo.NVS.Security.SystemWeb.Claims.WebClaimsService.Assign(System.Security.Claims.ClaimsPrincipal)"/>.
            </summary>
            <returns>The currently assigned claims-based principal object.</returns>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Resources.SecurityWebResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.SystemWeb.Resources.SecurityWebResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.SystemWeb.Resources.SecurityWebResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.SystemWeb.Resources.SecurityWebResources.ConfigurationErrorClaimsServiceRegistered">
            <summary>
              Looks up a localized string similar to Unable to configure the &apos;{0}&apos; claims service. The other claims service is already configured and registered. Check that the registration is preformed only once. Verify unity configuration (if any) as the registered mappings for the claims service may introduce registration of it..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.SystemWeb.Resources.SecurityWebResources.IncorrectAuthenticationMode">
            <summary>
              Looks up a localized string similar to The configured &apos;{0}&apos; authentication mode is incorrect. It should be &apos;{1}&apos;. Check you web.config file and the authentication node..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.SystemWeb.Resources.SecurityWebResources.NoAuthenticationConfigured">
            <summary>
              Looks up a localized string similar to Unable to read and check the authentication configuration section. Make sure authentication section is configured in your configuration file..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Security.SystemWeb.Resources.SecurityWebResources.NoSectionAccessed">
            <summary>
              Looks up a localized string similar to Unable to read and check configuration of {0}. Ensure the {0} section is defined..
            </summary>
        </member>
        <member name="T:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard">
            <summary>
            Guards an authentication ticket providing encoding, decoding and encryption, decryption under the web application.
            </summary>
            <remarks>
            <para>
            When an application is using any authentication tickets those tickets should often be protected
            (when for example stored and transferred on a cookie in a web application). The <see cref="T:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard"/>
            provides basic protection mechanism for authentication tickets.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data">Data to be encoded.</param>
            <returns>The encoded data.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard.Decode(System.String)">
            <summary>
            Decodes the specified data.
            </summary>
            <param name="data">Data to be decoded.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard.GetPurposes">
            <summary>
            Gets the list of purposes used by both the <see cref="M:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard.Protect(System.Byte[])"/> and <see cref="M:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard.Unprotect(System.Byte[])"/> method.
            </summary>
            <returns>A collection of purposes.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard.Protect(System.Byte[])">
            <summary>
            Protects the specified data by encrypting or signing it.
            </summary>
            <param name="data">Data to be protected.</param>
            <returns>Protected data.</returns>
        </member>
        <member name="M:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard.Unprotect(System.Byte[])">
            <summary>
            Unprotects the specified data which was previously protected by the <see cref="M:Volvo.NVS.Security.SystemWeb.Tickets.AuthenticationTicketGuard.Protect(System.Byte[])"/> method.
            </summary>
            <param name="data">Data to be unprotected.</param>
            <returns>Unprotected data.</returns>
        </member>
        <member name="T:Volvo.NVS.Core.Configuration.SecurityLibraryWebClaimServiceConfigurationBuilder">
            <summary>
            Provides extension methods for the fluent, web claims service security library configuration.
            </summary>
            <remarks>
            <para>
            This class is not used directly. Methods exposed by this class are used when you start configuration from the <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/>
            common library configuration interface and use one of the Security Library configuration related methods.
            </para>
            <para>
            See also the <see cref="T:Volvo.NVS.Core.Configuration.SecurityLibraryConfigurator"/> for fluent library configuration samples.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.SecurityLibraryWebClaimServiceConfigurationBuilder.UseWebClaimsService(Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder)">
            <summary>
            Configures the <see cref="T:Volvo.NVS.Security.SystemWeb.Claims.WebClaimsService"/> to be used by the security library. The principal is set and managed on the current http
            context as well as on the current thread.
            </summary>
            <remarks>
            <para>
            You should always use the claims service which is appropriate and specific for the type of your application, for the type of the host. Host or 
            application specific configuration methods are added into the <see cref="T:Volvo.NVS.Core.Configuration.ISecurityLibraryClaimServiceConfigurationBuilder"/> as extension 
            methods together with references to the specific security library assemblies.
            </para>
            <para>
            Always check that you have referenced the security library assembly specific for you application in order to see all configuration methods.
            Refer into the documentation of the Security Library for more information about claims services.
            </para>
            <para>
            Check also the <see cref="T:Volvo.NVS.Security.SystemWeb.Claims.WebClaimsService"/> for details about the claims service registered by this method.
            </para>
            </remarks>
            <param name="configurator">A current security library claims service configuration object which is extended by this method.</param>
            <returns>A current security library claims service configuration builder.</returns>
        </member>
    </members>
</doc>
