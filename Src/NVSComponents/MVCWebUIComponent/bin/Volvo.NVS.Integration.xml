<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Volvo.NVS.Integration</name>
    </assembly>
    <members>
        <member name="T:Volvo.NVS.Signing.NVSLibrarySigning">
            <summary>
            Providing information about the current NVS Library signing (e.g. signing public key).
            </summary>
        </member>
        <member name="F:Volvo.NVS.Signing.NVSLibrarySigning.PublickKey">
            <summary>
            The public key used by all the library assemblies.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Extensions.DictionarySelectorExtensions">
            <summary>
            Adds selector related extension methods into the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.DictionarySelectorExtensions.Trace``1(System.Collections.Generic.IDictionary{System.String,System.Object},``0,System.String)">
            <summary>
            Stores, traces the already read message header value by adding it into the dictionary (a dictionary with all the read message header properties).
            </summary>
            <typeparam name="T">A type of the read value.</typeparam>
            <param name="properties">A current dictionary holding information about all the read properties with their values.</param>
            <param name="value">A value of the read property.</param>
            <param name="key">A key under which we should store a property and which will be used by a message selector in the selector query.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.DictionarySelectorExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Changes a given dictionary into a dynamic object where all the keys are set as object properties.
            </summary>
            <param name="properties">A key/value dictionary which should become a dynamic object where keys are changed to object properties.</param>
            <returns>A dynamic object created according to the given dictionary.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.DictionarySelectorExtensions.AddPropertyToDynamic``1(System.String,``0,System.Object)">
            <summary>
            Adds a single property into a dynamic object. Inner properties are created if a property name contains any dot characters.
            </summary>
            <typeparam name="T">A type of the property value.</typeparam>
            <param name="name">A name of the property. It can be a path with dots.</param>
            <param name="value">A current value to be added.</param>
            <param name="current">A current dynamic object into which a property should be added.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Extensions.DictionaryExtensions">
            <summary>
            Dictionary extension class
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets value or default
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Gets value or default (given default value)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.DictionaryExtensions.GetOrDefaultNonNullable``2(System.Collections.Generic.Dictionary{``0,System.Nullable{``1}},``0)">
            <summary>
            Gets value or default
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.DictionaryExtensions.GetOrDefaultNonNullable``2(System.Collections.Generic.Dictionary{``0,System.Nullable{``1}},``0,``1)">
            <summary>
            Gets value or default (given default value)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Extensions.MessageWriterExtensions">
            <summary>
            Provides extension methods into the <see cref="T:Volvo.NVS.Integration.Utilities.IMessageStreamWriter"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.MessageWriterExtensions.WriteBlankCharacters(Volvo.NVS.Integration.Utilities.IMessageStreamWriter,System.Int32)">
            <summary>
            Writes given amount of blank characters.
            </summary>
            <param name="writer">A current writer used to add characters.</param>
            <param name="amount">A number of blank characters to write.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.MessageWriterExtensions.WriteStringUpTo(Volvo.NVS.Integration.Utilities.IMessageStreamWriter,System.String,System.Int32)">
            <summary>
            Writes a string which is always of a given length. Adds bank characters when needed. Trims the string is it is too long.
            </summary>
            <param name="writer">A current writer used to add characters.</param>
            <param name="value">A string to be written.</param>
            <param name="length">An expected length of the string.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.MessageWriterExtensions.WriteUpTo(Volvo.NVS.Integration.Utilities.IMessageStreamWriter,System.Byte[],System.Int32)">
            <summary>
            Writes a string which is always of a given length. Adds bank characters when needed. Trims the string is it is too long.
            </summary>
            <param name="writer">A current writer used to add characters.</param>
            <param name="value">A string to be written.</param>
            <param name="length">An expected length of the string.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.MessageWriterExtensions.WriteDateString(Volvo.NVS.Integration.Utilities.IMessageStreamWriter,System.DateTime)">
            <summary>
            Writes a string representing a date in the YYYYMMDD format.
            </summary>
            <param name="writer">A current writer used to add characters.</param>
            <param name="date">A date to be written.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.MessageWriterExtensions.WriteTimeString(Volvo.NVS.Integration.Utilities.IMessageStreamWriter,System.DateTime)">
            <summary>
            Writes a string representing a time in the HHMMSSTH format.
            </summary>
            <param name="writer">A current writer used to add characters.</param>
            <param name="date">A date to be written.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Extensions.UriExtensions">
            <summary>
            Provides extension methods into the <see cref="T:Volvo.NVS.Integration.IUri"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.UriExtensions.ToAbsolutePath(System.String)">
            <summary>
            Converts a queue name to an absolute path name.
            </summary>
            <param name="queue">A queue name or path.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.UriExtensions.ToJMSReplyToQueueDestinationFormat(Volvo.NVS.Integration.IUri)">
            <summary>
            Converts an NVS Integration configuration URI to a JMS compatible 'reply to queue' name, path.
            </summary>
            <param name="uri">An uri to be converted.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.UriExtensions.ToJMSQueueDestinationFormat(Volvo.NVS.Integration.IUri)">
            <summary>
            Converts a queue name to a JMS compatible destination name.
            </summary>
            <param name="uri">An uri from which a queue name should be taken.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.UriExtensions.ToJMSTopicDestinationFormat(Volvo.NVS.Integration.IUri)">
            <summary>
            Converts a topic name to a JMS compatible destination name.
            </summary>
            <param name="uri">An uri from which a topic name should be taken.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Extensions.AssemblyExtensions">
            <summary>
            Helper method for getting name from assembly
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.AssemblyExtensions.GetNormalizedName``1(``0)">
            <summary>
            Gets the normalized name of the assembly.
            </summary>
            <typeparam name="T">Type of the assembly.</typeparam>
            <param name="self">Assembly</param>
            <returns>Full path of the assembly</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.AssemblyExtensions.GetApplicationPath``1(``0)">
            <summary>
            Gets path to the assembly.
            </summary>
            <typeparam name="T">Type of the assembly.</typeparam>
            <param name="self">Assembly</param>
            <returns>Return path to the assembly.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Extensions.DateTimeExtension">
            <summary>
            Date time extensions
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.DateTimeExtension.GetTimeSpanDifference(System.DateTime,System.DateTime)">
            <summary>
            Get difference between two dates.
            </summary>
            <param name="endTime">End of the period.</param>
            <param name="startTime">Start of the period.</param>
            <returns><see cref="T:System.TimeSpan"/> of provided period.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.ObjectExtensions.GetAttribute``1(System.Object)">
            <summary>
            Gets an attribute on the specified object instance.
            </summary>
            <typeparam name="T">Type of attribute to get.</typeparam>
            <param name="value">Object instance to look for attribute on.</param>
            <returns>First instance of the specified attribute.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Extensions.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Parse <see cref="T:System.String"/> to <see cref="T:System.Enum"/>
            </summary>
            <param name="self">String representation of enumerable.</param>
            <typeparam name="T">Type of enumerable.</typeparam>
            <returns>Enumerable value represented by string.</returns>
            <exception cref="T:System.ArgumentNullException">Provided string is null.</exception>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Format provided arguments with format string.
            </summary>
            <param name="self">Format string.</param>
            <param name="args">Arguments</param>
            <exception cref="T:System.ArgumentNullException">Format string is null.</exception>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Format provided arguments with format string using specific <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="self">Format string.</param>
            <param name="provider">Format provider.</param>
            <param name="args">Arguments</param>
            <exception cref="T:System.ArgumentNullException">Format string is null.</exception>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.IsEqualIgnoreCase(System.String,System.String)">
            <summary>
            Checks strings are the same ignoring case.
            </summary>
            <param name="self">String to be compared.</param>
            <param name="ref2">String to compare with.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Does string contain substring
            </summary>
            <param name="self">String to be searched.</param>
            <param name="toCheck">String to be found.</param>
            <param name="comparison">Comparison options.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.AtLeast(System.String,System.Int32)">
            <summary>
            Get a string that has a minimum length. Padded with spaces if needed.
            </summary>
            <param name="self">String to be padded.</param>
            <param name="length">Required minimal length.</param>
            <returns>String padded to the left who have length not shorter than provided length.</returns>
            <exception cref="T:System.ArgumentNullException">Padded string is null.</exception>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.ReplaceEmpty(System.String,System.String)">
            <summary>
            Replace string if empty, otherwise remain the same
            </summary>
            <param name="self">String to be replaced.</param>
            <param name="replacement">Value to be returned if string is empty.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Is null or empty
            </summary>
            <param name="self">String to be checked.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Is null or contains only whitespace characters
            </summary>
            <param name="self">String to be checked.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.ToHexString(System.Byte[])">
            <summary>
            Converts byte array to string.
            </summary>
            <remarks>
            <para>
            That function allows to convert <see cref="P:Volvo.NVS.Integration.Messages.IMessage.MessageId"/> or <see cref="P:Volvo.NVS.Integration.Messages.IInputMessage.CorrelationObject"/> to <see cref="T:System.String"/> type.
            </para>
            <para>To convert back from that string to byte array use <see cref="M:Volvo.NVS.Integration.Extensions.StringExtensions.HexAsByteArray(System.String)"/> function.</para>
            </remarks>
            <param name="self">Byte array to be converted to string</param>
            <returns>String formatted as "0xAABBCC..." where AA, BB and CC is a hex representation of byte.</returns>
            <exception cref="T:System.ArgumentNullException">Provided byte array is null.</exception>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.HexAsByteArray(System.String)">
            <summary>
            Converts string obtained from <see cref="M:Volvo.NVS.Integration.Extensions.StringExtensions.ToHexString(System.Byte[])"/> back to byte array.
            </summary>
            <param name="selfHexString">String representation of byte array obtained from <see cref="M:Volvo.NVS.Integration.Extensions.StringExtensions.ToHexString(System.Byte[])"/> function.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.CompareWith(System.Byte[],System.Byte[])">
            <summary>
            Compare two byte arrays.
            </summary>
            <remarks>This function helps to compare <see cref="P:Volvo.NVS.Integration.Messages.IMessage.MessageId"/> and <see cref="P:Volvo.NVS.Integration.Messages.IInputMessage.CorrelationObject"/></remarks>
            <param name="self">Array to be compared.</param>
            <param name="ref2">Array to compare with.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.CompareWith(System.Byte[],System.String)">
            <summary>
            Compare byte array with string obtained from <see cref="M:Volvo.NVS.Integration.Extensions.StringExtensions.ToHexString(System.Byte[])"/>.
            </summary>
            <param name="self">Byte array to be compared.</param>
            <param name="ref2HexString">String to cmpare with.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Extensions.StringExtensions.ParseQueryString(System.String)">
            <summary>
            Parse as query string part of Uri
            </summary>
            <remarks>Provided query string can be formatted as required in Uri but also allows to use "?" character instead of "&amp;".</remarks>
            <param name="s">Query string</param>
            <returns><see cref="T:System.Collections.Specialized.NameValueCollection"/> containing all properties with their values.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Configuration.IIntegrationConfigurationBuilder">
            <summary>
            Fluent interface used to configure integration library channels unity registration
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.IIntegrationConfigurationBuilder.RegisterInputChannel(System.Type,System.String)">
            <summary>
            Register specific implementation of <see cref="T:Volvo.NVS.Integration.IInputChannel"/> interface.
            To use this specification channel uri protocol name have to be the same as provided alias.
            </summary>
            <remarks>This type will be registered only if implementation of <see cref="T:Volvo.NVS.Integration.IInputChannel"/> was not registered with that alias.</remarks>
            <param name="channelType">Type implements input channel</param>
            <param name="alias">Unity registration alias</param>
            <returns>Fluent interface that can be used to further configure channels registration</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.IIntegrationConfigurationBuilder.RegisterOutputChannel(System.Type,System.String)">
            <summary>
            Register specific implementation of <see cref="T:Volvo.NVS.Integration.IOutputChannel"/> interface.
            To use this specification channel uri protocol name have to be the same as provided alias.
            </summary>
            <remarks>This type will be registered only if implementation of <see cref="T:Volvo.NVS.Integration.IOutputChannel"/> was not registered with that alias.</remarks>
            <param name="channelType">Type implements output channel</param>
            <param name="alias">Unity registration alias</param>
            <returns>Fluent interface that can be used to further configure channels registration</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.IIntegrationConfigurationBuilder.RegisterReplyChannel(System.Type,System.String)">
            <summary>
            Register specific implementation of <see cref="T:Volvo.NVS.Integration.IReplyChannel"/> interface.
            To use this specification channel uri protocol name have to be the same as provided alias.
            </summary>
            <remarks>This type will be registered only if implementation of <see cref="T:Volvo.NVS.Integration.IReplyChannel"/> was not registered with that alias.</remarks>
            <param name="channelType">Type implements reply channel</param>
            <param name="alias">Unity registration alias</param>
            <returns>Fluent interface that can be used to further configure channels registration</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Configuration.IIntegrationBackendConfigurationBuilder">
            <summary>
            Fluent interface used to configure integration library channels unity registration
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.IIntegrationBackendConfigurationBuilder.RegisterChannels(System.String)">
            <summary>
            Register backend specific implementation of <see cref="T:Volvo.NVS.Integration.IInputChannel"/>, <see cref="T:Volvo.NVS.Integration.IOutputChannel"/> and <see cref="T:Volvo.NVS.Integration.IReplyChannel"/> interfaces with provided alias prefix.
            </summary>
            <remarks>
            <para>This method registers implementations with specific suffixes for each type of the channel:
            <list type="bullet">
            <item>
            <description><i>aliasPrefix</i><b>in</b> - for <see cref="T:Volvo.NVS.Integration.IInputChannel"/>.</description>
            </item>
            <item>
            <description><i>aliasPrefix</i><b>out</b> - for <see cref="T:Volvo.NVS.Integration.IOutputChannel"/>.</description>
            </item>
            <item>
            <description><i>aliasPrefix</i><b>rep</b> - for <see cref="T:Volvo.NVS.Integration.IReplyChannel"/>.</description>
            </item>
            </list>
            </para>
            <para>Each of the type will be registered only if implementation of the channel was not registered with specific alias.</para>
            </remarks>
            <param name="aliasPrefix">Alias prefix to be used for each type of channel.</param>
            <returns>Fluent interface that can be used to further configure channels registration</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.IIntegrationBackendConfigurationBuilder.RegisterChannels">
            <summary>
            Register backend specific implementation of <see cref="T:Volvo.NVS.Integration.IInputChannel"/>, <see cref="T:Volvo.NVS.Integration.IOutputChannel"/> and <see cref="T:Volvo.NVS.Integration.IReplyChannel"/> interfaces with standard prefix.
            </summary>
            <remarks>
            <para>This method registers implementations with standard alias prefixes for each type of the backend:
            <list type="bullet">
            <item>
            <description><b>file</b> - for Files backend.</description>
            </item>
            <item>
            <description><b>vcom</b> - for VCom backend.</description>
            </item>
            <item>
            <description><b>mq</b> - for WebsphereMQ backend.</description>
            </item>
            </list>
            </para>
            <para>This method registers channels implementation only for particular backend. Use proper backend configurator to register channels you want to use.</para>
            <para>Each of the type will be registered only if implementation of the channel was not registered with specific alias.</para>
            </remarks>
            <returns>Fluent interface that can be used to further configure channels registration</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Configuration.ChannelElement">
            <summary>
            Defines a channel
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.ChannelElement.Name">
            <summary>
            The channel name
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.ChannelElement.Uri">
            <summary>
            The channel URI
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Configuration.ChannelElementCollection">
            <summary>
            A collection of channels, configuration elements, of type <see cref="T:Volvo.NVS.Integration.Configuration.ChannelElement"/>.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ChannelElementCollection.CreateNewElement">
            <summary>
            Creates a new configuration element of type <see cref="T:Volvo.NVS.Integration.Configuration.ChannelElement"/>. 
            </summary>
            <returns>A new <see cref="T:Volvo.NVS.Integration.Configuration.ChannelElement"/>, which inherits from the <see cref="T:System.Configuration.ConfigurationElement"/> class</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ChannelElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the <see cref="T:System.Configuration.ConfigurationElement"/> key value, used as the unique key within the collection.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> instance to get the Key from. In this case it will be a 
            <see cref="T:Volvo.NVS.Integration.Configuration.ChannelElement"/> object.</param>
            <returns>An object representing the key value.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ChannelElementCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of <see cref="T:Volvo.NVS.Integration.Configuration.ChannelElement"/> objects.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1}"/> of <see cref="T:Volvo.NVS.Integration.Configuration.ChannelElement"/> objetcs.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Configuration.ConfigManager">
            <summary>
            Contains methods for managing the loading and saving of configuration settings for the Integration library.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ConfigManager.GetConfiguration">
            <summary>
            Gets the complete configuration for the current application.
            </summary>
            <returns>The <see cref="T:System.Configuration.Configuration"/> object representing the complete configuration for the current application.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ConfigManager.GetConfiguration(System.Reflection.Assembly)">
            <summary>
            Gets the complete configuration for a specific assembly.
            </summary>
            <param name="assembly">Assembly who has it's own configuration file</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ConfigManager.IsSectionDeclared``1">
            <summary>
            Determines whether there is a section of type T declared in the config file
            </summary>
            <typeparam name="T">Section type to look for</typeparam>
            <returns>True if there is a section of type T. True if not able to determine whether the section is declared. False otherwise.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ConfigManager.GetConfigurationSection``1">
            <summary>
            Gets the configuration section for a specific type.
            </summary>
            <remarks>
            <para>
            The type must inherit from the <see cref="T:System.Configuration.ConfigurationSection"/> class to be mapped to a 
            configuration section in the .config file.
            </para>
            </remarks>
            <typeparam name="T">The type representing a section in the configuration.</typeparam>
            <returns>The configuration section object, implemented by the type "T", representing the configuration from the app.config.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ConfigManager.SetEntryAssembly">
            <summary>
            Manually sets the caller assembly as the entry assembly for the current domain.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Configuration.ConfigManager.SetEntryAssembly(System.Reflection.Assembly)">
            <summary>
            Sets the entry assembly for the current domain.
            </summary>
            <remarks>
            Derived work from original code by Jamie Cansdale.
            </remarks>
            <param name="assembly">The assembly to be set as entry assembly.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Configuration.IntegrationSection">
            <summary>
            The NVS Integration configuration section
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.IntegrationSection.TempPath">
            <summary>
            The path where temp files will be placed
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.IntegrationSection.ChannelCollection">
            <summary>
            Contains the defined channels
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.IntegrationSection.PoolMaxAge">
            <summary>
            Maximum time period(in seconds) which will make WMQ Queue Manager connection active. Default value is 180 seconds.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.IntegrationSection.PublishRetryCount">
            <summary>
            Count by which publish will do retries on failure
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.IntegrationSection.ExtensiveLoggingPath">
            <summary>
            If set to a path, extensive logging will be enabled and logfiles are written to that path. Default value is "", disabling extensive logging
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.IntegrationSection.PoolMaxLife">
            <summary>
            If set to a path, extensive logging will be enabled and logfiles are written to that path. Default value is "", disabling extensive logging
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Configuration.IntegrationSection.ShareBlocked">
            <summary>
            If true then MQQueueManager will be created using MQC.MQCNO_HANDLE_SHARE_BLOCK
            If false (or not set in configuration) then will use MQC.MQCNO_HANDLE_SHARE_NO_BLOCK
            Default value is "false"
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.ContentConstants">
            <summary>
            Provides low-level message content constants.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Areas.Area">
            <summary>
            Acts like a base type for an integration message RFH2 header areas. 
            </summary>
            <remarks>
            Areas are used to add various properties on the RFH2 headers. They abstract creation of RFH2 header keys and values.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.Area.#ctor(System.String)">
            <summary>
            Protected constructor
            </summary>
            <param name="name">The name of the area</param>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.Area.Item(System.String)">
            <summary>
            Properties in the area
            </summary>
            <param name="key">The key of the property</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.Area.ContainsKey(System.String)">
            <summary>
            True if area contains property
            </summary>
            <param name="key">The key of the property</param>
            <returns>True if the area contains a given property</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.Area.HasValues">
            <summary>
            True if the area has any properties assigned.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.Area.ToString">
            <summary>
            Returns a string that represents the area
            </summary>
            <returns>A string that represents the area.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.Area.LengthWithAlignment">
            <summary>
            Gets the length with alignment
            </summary>
            <returns>Length of the area XML representation aligned to multiply of 4.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.Area.Name">
            <summary>
            The name of the area
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.Area.Properties">
            <summary>
            The properties of the area
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea">
            <summary>
            Represents transportation JMS header fields, and JMSX properties that cannot be fully expressed in the MQMD and are added into the RFH2 header areas.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.Destination">
            <summary>
            Gets/sets the Dst property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.Delivery">
            <summary>
            Gets/sets the Dlv property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.GroupId">
            <summary>
            Gets/sets the extended Gid property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.GroupSequence">
            <summary>
            Gets/sets the extended Seq property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.Expiration">
            <summary>
            Gets/sets the Exp property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.Correlation">
            <summary>
            Gets/sets the Cid property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.Priority">
            <summary>
            Gets/sets the Pri property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.ReplyTo">
            <summary>
            Gets/sets the Rto property.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea.Timestamp">
            <summary>
            Gets/sets the Tms property.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Areas.MessageContentDescriptionArea">
            <summary>
            Describes a shape or format of the message. Identifies the message as being Text, Bytes, Stream. Map, Object, or Null and 
            acts like an area in the RFH2 integration message header.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.MessageContentDescriptionArea.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.MessageContentDescriptionArea.Domain">
            <summary>
            Gets/sets the Msd property.
            This is the message service domain hinting about how to parse.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.MessageContentDescriptionArea.Set">
            <summary>
            Gets/sets the Set property.
            This is the name of the message set that contains the definition of the message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.MessageContentDescriptionArea.Type">
            <summary>
            Gets/sets the Type property.
            The name of the message type, in the specified message set, to which this message corresponds.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.MessageContentDescriptionArea.Format">
            <summary>
            Gets/sets the Fmt property.
            The name of a physical format in the specified message set.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Areas.PublishSubscribeCommandArea">
            <summary>
            Represents a publish/subscribe RFH2 header area.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.PublishSubscribeCommandArea.#ctor">
            <summary>
            Creates an instance of the publish/subscribe RFH2 header area.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Areas.PublishSubscribeCommandResponseArea">
            <summary>
            A publish/subscribe response RFH2 header area.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.PublishSubscribeCommandResponseArea.#ctor">
            <summary>
            Creates an instance of the publish/subscribe response RFH2 header area.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Areas.UserArea">
            <summary>
            Represents a user property area for the RFH2 header.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.UserArea.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Areas.UserArea.SetProperty(System.String,System.String)">
            <summary>
            Sets a property
            </summary>
            <param name="key">The key of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.UserArea.GimHeaderVersion">
            <summary>
            Gets/sets the GimHeaderVersion property. The version of Gim metadata model in format X.Y
            Part of the Gim standard.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.UserArea.GimSendTime">
            <summary>
            Gets/sets the GimSendTime property. The time when message was sent.
            Part of the Gim standard.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.UserArea.GimMsgSeq">
            <summary>
            Gets/sets the GimMsgSeq property. Is the message sequence dependent or not. If not exists, equals to false.
            Part of the Gim standard.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Areas.UserArea.GimMsgSeqNo">
            <summary>
            Gets/sets the GimMsgSeqNo property. 
            Part of the Gim standard.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.DeliveryMode">
            <summary>
            Describes a message delivery mode.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.DeliveryMode.NonPersistent">
            <summary>
            Non persistent delivery.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.DeliveryMode.Persistent">
            <summary>
            Persistent delivery.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.BinaryPayloadParser">
            <summary>
            Parses a message payload treating it as the binary content.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.BinaryPayloadParser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation)">
            <summary>
            Parses a message using provided stream and sets the target message data according to what is read.
            </summary>
            <param name="source">A source giving access into the message stream from which a header can be read.</param>
            <param name="target">A target message on which all the read properties should be set.</param>
            <param name="info">An information object describing the header to be parsed.</param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.BinaryPayloadParser.HandlesFormat">
            <summary>
            Describes which format is handled by the current parser.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.OnParsed">
            <summary>
            A method signature for a callback executed when parsing of a single message part is completed.
            </summary>
            <param name="current">Information about the just parsed part.</param>
            <param name="next">Information about the next part to be parsed or null when not more parts.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.IMessageParser">
            <summary>
            Defines a contract for the integration message parser.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.IMessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Parsers the input message and sets a parsing result on a given target. 
            </summary>
            <param name="info">An information object describing the current (initial) format to be used for parsing.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.IMessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.OnParsed)">
            <summary>
            Parsers the input message and sets a parsing result on a given target. 
            </summary>
            <param name="info">An information object describing the current (initial) format to be used for parsing.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
            <param name="onParsed">A method called when a parsing of a single message part is done.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.IMessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parsers the input message and sets a parsing result on a given target. 
            </summary>
            <param name="info">An information object describing the current (initial) format to be used for parsing.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are follow.ing it for all the channel types.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.IMessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.OnParsed,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parsers the input message and sets a parsing result on a given target. 
            </summary>
            <param name="info">An information object describing the current (initial) format to be used for parsing.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
            <param name="onParsed">A method called when a parsing of a single message part is done.</param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are follow.ing it for all the channel types.
            </param>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.IMessageParserProvider">
            <summary>
            Provides <see cref="T:Volvo.NVS.Integration.Content.Parsers.IMessageParser"/>s which are used during the integration message headers and content processing. 
            </summary>
            <remarks>
            You may implement the <see cref="T:Volvo.NVS.Integration.Content.Parsers.IMessageParserProvider"/> interface and register its implementation in the <see cref="T:Volvo.NVS.Core.Unity.Container"/>.
            Once it is done the custom, registered implementation will be used by the integration library and your custom parsers will be consumed
            as given by the <see cref="M:Volvo.NVS.Integration.Content.Parsers.IMessageParserProvider.Create(Volvo.NVS.Integration.IUri)"/> method.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.IMessageParserProvider.Create(Volvo.NVS.Integration.IUri)">
            <summary>
            Provides a message parser to be used by a channel.
            </summary>
            <param name="uri">An uri for which a parser should be provided.</param>
            <returns>A message parser used by the channel.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.IMessagePartParser">
            <summary>
            Defines a contract for integration message parsers.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.IMessagePartParser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation)">
            <summary>
            Parses a message using provided stream and sets all the parsed and recognized properties on the given target message object.
            </summary>
            <remarks>
            This method does not provide a way to use selectors on the parsed header values as the selector properties dictionary is not used with this method.
            See the <see cref="M:Volvo.NVS.Integration.Content.Parsers.IMessagePartParser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,System.Collections.Generic.IDictionary{System.String,System.Object})"/> for a selector supported version.
            </remarks>
            <param name="source">
            A source giving access into the message stream from which a header can be read.
            </param>
            <param name="target">
            A target message on which all the read properties should be set.
            </param>
            <param name="info">
            An information object describing the header to be parsed.
            </param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.IMessagePartParser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parses a message using provided stream and sets all the parsed and recognized properties on the given target message object and on the given target selector dictionary.
            </summary>
            <param name="source">
            A source giving access into the message stream from which a header can be read.
            </param>
            <param name="target">
            A target message on which all the read properties should be set.
            </param>
            <param name="info">
            An information object describing the header to be parsed.
            </param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are follow.ing it for all the channel types.
            </param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.IMessagePartParser.HandlesFormat">
            <summary>
            Describes which format is handled by the current parser.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.MessageParser">
            <summary>
            A base and abstract implementation of a message parser which manages a collection of individual <see cref="T:Volvo.NVS.Integration.Content.Parsers.IMessagePartParser"/>s.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Parsers.MessageParser.parsers">
            <summary>
            A collection of individual parsers to be used for the message parsing.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MessageParser.Register(Volvo.NVS.Integration.Content.Parsers.IMessagePartParser)">
            <summary>
            Registers a new parser to be used in the message parsing process.
            </summary>
            <param name="parser">A parser to be use in the parsing process.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MessageParser.ResolveParser(System.String)">
            <summary>
            Resolves a parser from the collection of registered parsers.
            </summary>
            <param name="format">A format for which a parser should be resolved.</param>
            <returns>A parser or null when no parser is found for a given format.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.IMessagePartParser,System.Int32,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parses the current message part using a given parser.
            </summary>
            <param name="parser">A parser which is detected and intended to be used for parsing.</param>
            <param name="part">A message part number. E.g. for headers it will be the number of header being currently parsed.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
            <param name="info">An information object describing the current part to be parsed.</param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are follow.ing it for all the channel types.
            </param>
            <returns>Information about a next parser to be used for the message consumption.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Parsers the input message and sets a parsing result on a given target. 
            </summary>
            <param name="info">An information object describing the current (initial) format to be used for parsing.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parsers the input message and sets a parsing result on a given target. 
            </summary>
            <param name="info">An information object describing the current (initial) format to be used for parsing.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are follow.ing it for all the channel types.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.OnParsed)">
            <summary>
            Parsers the input message and sets a parsing result on a given target. 
            </summary>
            <param name="info">An information object describing the current (initial) format to be used for parsing.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
            <param name="onParsed">A method called when a parsing of a single message part is done.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MessageParser.Parse(Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.OnParsed,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parsers the input message and sets a parsing result on a given target. 
            </summary>
            <param name="info">An information object describing the current (initial) format to be used for parsing.</param>
            <param name="input">A reader into the input message which should be parsed.</param>
            <param name="target">A target message on which a parsing result should be set.</param>
            <param name="onParsed">A method called when a parsing of a single message part is done.</param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are follow.ing it for all the channel types.
            </param>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.MessagePartInformation">
            <summary>
            Represents information about a part of the message to be parsed.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.MessagePartInformation.Format">
            <summary>
            A name of the format of the message part to be parsed.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.MessagePartInformation.Encoding">
            <summary>
            An encoding used when parsing the message part.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.MessagePartInformation.NumericEncoding">
            <summary>
            Numeric encoding of message data.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.MessagePartInformation.CodedCharSetId">
            <summary>
            Character set identifier of message data (ccsid).
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.MqMdParser">
            <summary>
            Parses the MQMD (message descriptor) header. Both: version 1 and version 2 of MQMD structure is supported.
            </summary>
            <remarks>
            See the https://www.ibm.com/support/knowledgecenter/SSFKSJ_8.0.0/com.ibm.mq.ref.dev.doc/q097410_.htm.
            </remarks>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Parsers.MqMdParser.SelectorPrefix">
            <summary>
            A path under which all the properties of MQMD headers should be available when used from selectors.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MqMdParser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation)">
            <summary>
            Parses the MQMD header from the current message stream and sets all the properties on the target message object.
            </summary>
            <param name="source">A source giving access into the message stream from which a header can be read.</param>
            <param name="target">A target message on which all the read properties should be set.</param>
            <param name="info">An information object describing the header to be parsed.</param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MqMdParser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parses the MQMD header from the current message stream and sets all the properties on the target message object and on the selector properties dictionary.
            </summary>
            <param name="source">
            A source giving access into the message stream from which a header can be read.
            </param>
            <param name="target">
            A target message on which all the read properties should be set.
            </param>
            <param name="info">
            An information object describing the header to be parsed.
            </param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are following this syntax for all the channel types.
            </param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.MqMdParser.HandlesFormat">
            <summary>
            Describes which format is handled by the current parser.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.MqRfh2Parser">
            <summary>
            Parses the MQRFH2 headers.
            </summary>
            <remarks>
            <para>
            The MQRFH2 header is used to pass messages to and from a message broker that belongs to IBM Integration Bus. In a message, the MQRFH2 header follows the 
            WebSphere MQ message descriptor (MQMD) and precedes the message body, if present. A message can have more than one MQRFH2 header (e.g. when an application
            forwards a message).
            </para>
            <para>
            See the https://www.ibm.com/support/knowledgecenter/SSMKHH_9.0.0/com.ibm.etools.mft.doc/aq06930_.htm.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MqRfh2Parser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation)">
            <summary>
            Parses a message RFH2 headed and sets all the parsed and recognized properties on the given target message object.
            </summary>
            <param name="source">A source giving access into the message stream from which a header can be read.</param>
            <param name="target">A target message on which all the read properties should be set.</param>
            <param name="info">An information object describing the header to be parsed.</param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MqRfh2Parser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parses a message RFH2 headed and sets all the parsed and recognized properties on the given target message object and on the selector properties dictionary.
            </summary>
            <param name="source">A source giving access into the message stream from which a header can be read.</param>
            <param name="target">A target message on which all the read properties should be set.</param>
            <param name="info">An information object describing the header to be parsed.</param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are following this syntax for all the channel types.
            </param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MqRfh2Parser.ParseAreas(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,System.Int32,System.Text.Encoding,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parses name/value pairs included in the header.
            </summary>
            <param name="source">A source giving access into the message stream from which a header can be read.</param>
            <param name="target">A target message on which all the read properties should be set.</param>
            <param name="headerLength">A total header length.</param>
            <param name="areaEncoding">A character set identifier of name/value pairs section.</param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are following this syntax for all the channel types.
            </param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MqRfh2Parser.CreateXmlReader(System.String)">
            <summary>
            Creates an Xml reader processing the area section.
            </summary>
            <param name="area">An are content to be read.</param>
            <returns></returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.MqRfh2Parser.HandlesFormat">
            <summary>
            Describes which format is handled by the current parser.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.MqStrPayloadParser">
            <summary>
            Parses the message payload treating it as the string content.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.MqStrPayloadParser.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation)">
            <summary>
            Parses a message using provided stream and sets the target message data according to what is read.
            </summary>
            <param name="source">A source giving access into the message stream from which a header can be read.</param>
            <param name="target">A target message on which all the read properties should be set.</param>
            <param name="info">An information object describing the header to be parsed.</param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.MqStrPayloadParser.HandlesFormat">
            <summary>
            Describes which format is handled by the current parser.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Parsers.PayloadBase">
            <summary>
            Acts like a base type for message payload parsers.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.PayloadBase.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Parses a message using provided stream and sets all the parsed and recognized properties on the given target message object and on the given target selector dictionary.
            </summary>
            <param name="source">
            A source giving access into the message stream from which a header can be read.
            </param>
            <param name="target">
            A target message on which all the read properties should be set.
            </param>
            <param name="info">
            An information object describing the header to be parsed.
            </param>
            <param name="selector">
            An optional dictionary which should hold information about all the parsed and read properties. Those properties are used
            during the selector evaluation process if selectors are specified (e.g. for message receive methods). For more details 
            about the selector concept see the WMQ message selector syntax as we are follow.ing it for all the channel types.
            </param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Parsers.PayloadBase.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation)">
            <summary>
            Parses a message using provided stream and sets all the parsed and recognized properties on the given target message object.
            </summary>
            <remarks>
            This method does not provide a way to use selectors on the parsed header values as the selector properties dictionary is not used with this method.
            See the <see cref="M:Volvo.NVS.Integration.Content.Parsers.PayloadBase.Parse(Volvo.NVS.Integration.Utilities.IMessageStreamReader,Volvo.NVS.Integration.Messages.Message,Volvo.NVS.Integration.Content.Parsers.MessagePartInformation,System.Collections.Generic.IDictionary{System.String,System.Object})"/> for a selector supported version.
            </remarks>
            <param name="source">
            A source giving access into the message stream from which a header can be read.
            </param>
            <param name="target">
            A target message on which all the read properties should be set.
            </param>
            <param name="info">
            An information object describing the header to be parsed.
            </param>
            <returns>An information object describing a next message content to be parsed or null when no more content.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Parsers.PayloadBase.HandlesFormat">
            <summary>
            Describes which format is handled by the current parser.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Properties.Gim">
            <summary>
            Provides keys for Global Integration Method (GIM) header properties.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.Gim.#ctor(System.String)">
            <summary>
            Prefix for GIM header property keys
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.Gim.Lookup(System.String)">
            <summary>
            Looks for a predefined key instance for Gim or user area with the specified local key.
            </summary>
            <param name="localKey">The unique key within the Gim are to lookup the predefined instance for.</param>
            <returns>The predefined instance matching local key if found. Otherwise a new instance of Gim or UserProperty depending on if local key starts with GIM or not.</returns>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.SenderId">
            <summary>
            Key for GIM header property SenderId
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.MsgType">
            <summary>
            Key for GIM header property MsgType
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.MsgTypeVersion">
            <summary>
            Key for GIM header property MsgTypeVersion
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.ServiceId">
            <summary>
            Key for GIM header property ServiceId 
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.ContractId">
            <summary>
            Key for GIM header property ContractId
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.ImplementationId">
            <summary>
            Key for GIM header property ImplementationId
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.MessageExchangePattern">
            <summary>
            Key for GIM header property MessageExchangePattern
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.HeaderVersion">
            <summary>
            Key for GIM header property HeaderVersion
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.SendTime">
            <summary>
            Key for GIM header property SendTime
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.MsgSeq">
            <summary>
            Key for GIM header property MsgSeq
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.MsgSeqNo">
            <summary>
            Key for GIM header property MsgSeqNo
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.MsgTimestamp">
            <summary>
            Key for GIM header property MsgTimestamp
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.ServiceName">
            <summary>
            Key for GIM header property ServiceName
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.TrackingId">
            <summary>
            Key for GIM header property TrackingId
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Gim.DestinationId">
            <summary>
            Key for GIM header property DestinationId
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Properties.Jms">
            <summary>
            Provides keys for Java Messaging Service (JMS) header properties.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.Area">
            <summary>
            Area for JMS header property keys
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.Jms.Lookup(System.String)">
            <summary>
            Looks for a predefined key instance for Jms area with the specified local key.
            </summary>
            <param name="localKey">The unique key within the Jms are to lookup the predefined instance for.</param>
            <returns>The predefined instance matching local key if found. Otherwise a new instance of Jms.</returns>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.CorrelationId">
            <summary>
            Key for JMS header property CorrelationId
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.Delivery">
            <summary>
            Key for JMS header property Delivery
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.Destination">
            <summary>
            Key for JMS header property Destination
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.Expiration">
            <summary>
            Key for JMS header property Expiration
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.GroupId">
            <summary>
            Key for JMS header property GroupId
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.GroupSequence">
            <summary>
            Key for JMS header property GroupSequence
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.Priority">
            <summary>
            Key for JMS header property Priority
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.ReplyTo">
            <summary>
            Key for JMS header property ReplyTo
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Jms.Timestamp">
            <summary>
            Key for JMS header property Timestamp
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Properties.Mcd">
            <summary>
            Provides keys for Message Content Descriptor (MCD) header properties.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Mcd.Area">
            <summary>
            Area prefix for MCD header property keys
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.Mcd.Lookup(System.String)">
            <summary>
            Looks for a predefined key instance for Mcd area with the specified local key.
            </summary>
            <param name="localKey">The unique key within the Mcd are to lookup the predefined instance for.</param>
            <returns>The predefined instance matching local key if found. Otherwise a new instance of Mcd.</returns>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Mcd.Domain">
            <summary>
            Key for MCD header property Domain
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Mcd.Set">
            <summary>
            Key for MCD header property Set
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Mcd.Type">
            <summary>
            Key for MCD header property Type
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.Mcd.Format">
            <summary>
            Key for MCD header property Format
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Properties.PropertyBase">
            <summary>
            Acts like a base class for header property keys.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.PropertyBase.#ctor(System.String,System.String)">
            <summary>
            Constructs a property key for implementors area.
            </summary>
            <param name="area">Key that identifies the area.</param>
            <param name="localKey">Key unique within the area.</param>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Properties.PropertyBase.LocalKey">
            <summary>
            Key that identifies the property within the header area.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Properties.PropertyBase.Key">
            <summary>
            Key that uniquely identifies the property.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.PropertyBase.ToString">
            <summary>
            Returns the Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.PropertyBase.ToPropertyKey(System.String)">
            <summary>
            
            </summary>
            <param name="rawKey"></param>
            <returns>The property key instance corresponding to the raw key.
            null is returned if the key is not valid</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Properties.Unknown">
            <summary>
            Represents a header property key for header areas that does not have an implementation in NVS Integration Library.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.Unknown.#ctor(System.String,System.String)">
            <summary>
            Constructs a header property key for an area that does 
            not have a custom implementation in NVS Integration Library.
            </summary>
            <param name="area">The key of the area.</param>
            <param name="localKey">The local key unique within the area.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Properties.UserProperty">
            <summary>
            Provides keys for Message Content Descriptor (MCD) header properties.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Properties.UserProperty.Area">
            <summary>
            Area prefix for User header property keys
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.UserProperty.#ctor(System.String)">
            <summary>
            Constructs a key object for a User code property. 
            key parameter must not contain the "usr." prefix.
            </summary>
            <param name="key">The key of the property, must not contain the "usr." prefix.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Properties.UserProperty.Lookup(System.String)">
            <summary>
            Returns a property key for the user area with the specified local key.
            </summary>
            <param name="localKey">The local key unique within the user area.</param>
            <returns>Always returns a new instance of for the specified key.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.IMessageWriter">
            <summary>
            Defines a contract for an integration message writer.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.IMessageWriter.Write(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message,System.Byte[],Volvo.NVS.Integration.Content.Writers.MessagePartWriterType)">
            <summary>
            Writes message headers and content using the configured message writers.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A message writer into which the headers and content should be written.</param>
            <param name="source">A message source which should be used in order to get properties which should be written.</param>
            <param name="sourceContent">A current source message content which should be added into the target.</param>
            <param name="type">A type of message part writes which should be run.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.IMessageWriterProvider">
            <summary>
            Provides <see cref="T:Volvo.NVS.Integration.Content.Writers.IMessageWriter"/>s which are used during the integration message headers and content processing. 
            </summary>
            <remarks>
            You may implement the <see cref="T:Volvo.NVS.Integration.Content.Writers.IMessageWriterProvider"/> interface and register its implementation in the <see cref="T:Volvo.NVS.Core.Unity.Container"/>.
            Once it is done the custom, registered implementation will be used by the integration library and your custom writers will be consumed
            as given by the <see cref="M:Volvo.NVS.Integration.Content.Writers.IMessageWriterProvider.Create(Volvo.NVS.Integration.IUri)"/> method.
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.IMessageWriterProvider.Create(Volvo.NVS.Integration.IUri)">
            <summary>
            Provides a message writer to be used by a channel.
            </summary>
            <param name="uri">An uri for which a writer should be provided.</param>
            <returns>A message writer used by the channel.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.MessagePartWriterType">
            <summary>
            Describes a type of the <see cref="T:Volvo.NVS.Integration.Content.Writers.IMessagePartWriter"/>.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Writers.MessagePartWriterType.Header">
            <summary>
            Writes a message header.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Writers.MessagePartWriterType.Content">
            <summary>
            Writes a message content.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.MqContentWriter">
            <summary>
            Writes message content (binary or string message content).
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqContentWriter.GetFormatInfo(Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Provides information about a format supported by the writer.
            </summary>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns>An object describing a format of the message being supported by the writer.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Writers.MqContentWriter.WriterType">
            <summary>
            Determines a type of the message writer.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqContentWriter.Write(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message,System.Byte[],Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo)">
            <summary>
            Writes a message header or content.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <param name="sourceContent">A current source message content which should be added into the target.</param>
            <param name="nextFormat">A name of the format supported by a writer being next in the queue (a next writer format).</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.IMessagePartWriter">
            <summary>
            Defines a contract for an integration message writer.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.IMessagePartWriter.Write(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message,System.Byte[],Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo)">
            <summary>
            Writes a message header or content.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <param name="sourceContent">A current source message content which should be added into the target.</param>
            <param name="nextFormat">A name of the format supported by a writer being next in the queue (a next writer format).</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.IMessagePartWriter.GetFormatInfo(Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Provides information about a format supported by the writer.
            </summary>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns>An object describing a format of the message being supported by the writer.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Writers.IMessagePartWriter.WriterType">
            <summary>
            Determines a type of the message writer.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.MessageWriter">
            <summary>
            A base and abstract implementation of a message writer which manages a collection of individual <see cref="T:Volvo.NVS.Integration.Content.Writers.IMessagePartWriter"/>s.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Content.Writers.MessageWriter.writers">
            <summary>
            A collection of writers which should be involved in the construction of the message.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MessageWriter.Register(Volvo.NVS.Integration.Content.Writers.IMessagePartWriter)">
            <summary>
            Registers a new writer to be used in the message creation process.
            </summary>
            <param name="writer">A single writer writing information into the target message.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MessageWriter.Write(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message,System.Byte[],Volvo.NVS.Integration.Content.Writers.MessagePartWriterType)">
            <summary>
            Writes message headers and content using the configured message writers.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A message writer into which the headers and content should be written.</param>
            <param name="source">A message source which should be used in order to get properties which should be written.</param>
            <param name="sourceContent">A current source message content which should be added into the target.</param>
            <param name="type">A type of message part writes which should be run.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo">
            <summary>
            Provides information about a format supported by a specific <see cref="T:Volvo.NVS.Integration.Content.Writers.MessageWriter"/>.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo.Format">
            <summary>
            A name of the format.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo.CodedCharSetId">
            <summary>
            Character set identifier of message data (ccsid).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo.Encoding">
            <summary>
            Numeric encoding of message data.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the message writer format information.
            </summary>
            <param name="format">A name of the format.</param>
            <param name="codedCharSetId">Character set identifier of message data (ccsid).</param>
            <param name="encoding">Numeric encoding of message data.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.MqMdWriter">
            <summary>
            Writes MQMD integration message headers.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqMdWriter.Write(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message,System.Byte[],Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo)">
            <summary>
            Writes a message header (MQMD).
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <param name="sourceContent">A current source message content which should be added into the target.</param>
            <param name="nextFormat">A name of the format supported by a writer being next in the queue (a next writer format).</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqMdWriter.GetFormatInfo(Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Provides information about a format supported by the writer.
            </summary>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns>An object describing a format of the message being supported by the writer.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Writers.MqMdWriter.WriterType">
            <summary>
            Determines a type of the message writer.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer">
            <summary>
            Writes RFH2 headers putting common information in those headers (e.g. putting GimR required data and custom user properties).
            </summary>
            <remarks>
            <para>
            By default the <see cref="T:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer"/> writes the RFH2 headers and puts the <see cref="T:Volvo.NVS.Integration.Content.Areas.MessageContentDescriptionArea"/>, <see cref="T:Volvo.NVS.Integration.Content.Areas.PublishSubscribeCommandArea"/>
            <see cref="T:Volvo.NVS.Integration.Content.Areas.PublishSubscribeCommandResponseArea"/>, <see cref="T:Volvo.NVS.Integration.Content.Areas.UserArea"/> and the <see cref="T:Volvo.NVS.Integration.Content.Areas.JavaMessagingServiceArea"/> areas in the header. Creation of those areas
            can be overridden in derived types.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.GetFormatInfo(Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Provides information about a format supported by the writer.
            </summary>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns>An object describing a format of the message being supported by the writer.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.WriterType">
            <summary>
            Determines a type of the message writer.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.CreateContentDescriptionArea(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Creates a message content description area to be included in the header.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.CreatePublishSubscribeCommandArea(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Creates a publish/subscribe command area to be included in the header.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.CreatePublishSubscribeCommandResponseArea(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Creates a publish/subscribe command response area to be included in the header.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.CreateUserArea(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Creates a user area to be included in the header.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.CreateJavaMessagingServiceArea(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Creates a java messaging service area to be included in the header.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.CreateAreas(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message)">
            <summary>
            Returns a collection of areas to be included on the RFH2 header.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <returns>An array of areas to be included on the message header.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.Write(Volvo.NVS.Integration.IUri,Volvo.NVS.Integration.Utilities.IMessageStreamWriter,Volvo.NVS.Integration.Messages.Message,System.Byte[],Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo)">
            <summary>
            Writes a message header or content.
            </summary>
            <param name="uri">A current uri for which the write operation is performed.</param>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="source">A source message from which we should take properties and write them.</param>
            <param name="sourceContent">A current source message content which should be added into the target.</param>
            <param name="nextFormat">A name of the format supported by a writer being next in the queue (a next writer format).</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.WriteRFH2HeaderStruct(Volvo.NVS.Integration.Utilities.IMessageStreamWriter,System.Int32,System.Int32,Volvo.NVS.Integration.Content.Writers.MessageWriterFormatInfo)">
            <summary>
            Writes the RFH2 header structure.
            </summary>
            <remarks>
            Check the following documentation for the details header information:
            http://www-01.ibm.com/support/knowledgecenter/SSMKHH_9.0.0/com.ibm.etools.mft.doc/aq06930_.htm
            </remarks>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="areasLength">The areas length</param>
            <param name="areasCount">Number of areas to be included in the header.</param>
            <param name="nextFormat">A name of the format supported by a writer being next in the queue (a next writer format).</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Content.Writers.MqRfh2Writer.WriteAreas(Volvo.NVS.Integration.Utilities.IMessageStreamWriter,System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Writes all the areas into the destination message.
            </summary>
            <param name="target">A target giving access into the message stream into which we should write.</param>
            <param name="utf8EncodedAreas">A binary representation of the areas to be written.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.IChannelPropertyKey">
            <summary>
            Interface for providing a channel property key
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IChannelPropertyKey.Key">
            <summary>
            Provides the key of the channel property
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.IPropertyKey">
            <summary>
            Interface for providing a property key
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IPropertyKey.Key">
            <summary>
            Provides the key of the property
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.IUri">
            <summary>
            Defines a base contract for an integration library channel uri.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.Name">
            <summary>
            A unique integration uri name. For example: it can be wmq, files, vcom or any other custom name.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.Queue">
            <summary>
            A queue into which messages should be send or from which messages should be read.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.UsesQueue">
            <summary>
            A flag telling if queues should be used. Should be false if and only if topics are supported and a topic should be used instead.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.Topic">
            <summary>
            A topic into which messages should be send or from which messages should be read. May throw if <see cref="P:Volvo.NVS.Integration.IUri.UsesTopic"/> is false.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.UsesTopic">
            <summary>
            A flag telling if topics should be used and if topics are supported.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.ExecutingHost">
            <summary>
            A host on which a given queue or topic is expected to be hosted.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.UseRecords">
            <summary>
            A flag telling if message records should be used.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.TempFiles">
            <summary>
            A flag telling if files stored on disc should be used in order to process the message stream.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.Compress">
            <summary>
            A flag telling if a message should be compressed when sending.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUri.UseHeaders">
            <summary>
            A flag telling if headers are supported for the messages and if headers should be written or read.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.IUriReply">
            <summary>
            Defines a contract for an integration library channel which contains "reply to" parameters.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IUriReply.ReplyToQueue">
            <summary>
            A queue into which a reply should be send.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.IReplyChannel">
            <summary>
            Defines the contract of a channel used to send replies.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.IReplyChannel.CreateReply(Volvo.NVS.Integration.Messages.IInputMessage)">
            <summary>
            Creates a reply message for the given request message
            </summary>
            <returns>The created <see cref="T:Volvo.NVS.Integration.Messages.IOutputMessage"/> message</returns>public static  
        </member>
        <member name="M:Volvo.NVS.Integration.IReplyChannel.CreateReply(System.Byte[],System.String,System.String)">
            <summary>
            Creates a reply message with a correlation id.
            </summary>
            <param name="correlationId">The correlation id to set on the reply message</param>
            <param name="replyToQueue">The queue that the reply shall be sent to</param>
            <param name="replyToQueueManager">The queue manager that hosts the replyTo queue</param>
            <returns>The created <see cref="T:Volvo.NVS.Integration.Messages.IReplyMessage"/> message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IReplyChannel.CreateReply(System.Byte[],System.String,System.String,System.Int32)">
            <summary>
            Creates a reply message with a correlation id.
            </summary>
            <param name="correlationId">The correlation id to set on the reply message</param>
            <param name="replyToQueue">The queue that the reply shall be sent to</param>
            <param name="replyToQueueManager">The queue manager that hosts the replyTo queue</param>
            <param name="expiry">Time in seconds before the reply expires.</param>
            <returns>The created <see cref="T:Volvo.NVS.Integration.Messages.IReplyMessage"/> message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IReplyChannel.Send(Volvo.NVS.Integration.Messages.IReplyMessage)">
            <summary>
            Sends the reply
            </summary>
            <param name="reply">The reply message to be sent.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Messages.IInputMessage">
            <summary>
            Defines the contract for inbound messages. Used when receiving messages.
            </summary>
            <remarks>
            <para>Note that objects implementing IInputMessage should be disposed.</para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.Priority">
            <summary>
            WMQ only: The priority of the message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.Retries">
            <summary>
            The number of retries done on this message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.IsBinary">
            <summary>
            WMQ only: If true, the message will be sent as a binary message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.Compress">
            <summary>
            WMQ only: If true, the message will be compressed before sending.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.UserId">
            <summary>
            WMQ only: The user identifier
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.ApplicationId">
            <summary>
            WMQ only: The application identity
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.Expiry">
            <summary>
            WMQ only: The expiry time of the message in seconds.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.CorrelationObject">
            <summary>
            WMQ only: The correlation id
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.ReplyTo">
            <summary>
            WMQ only: The reply to queue
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.ReplyToQMgr">
            <summary>
            WMQ only: The reply to queue manager
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.RequiresReply">
            <summary>
            Indicates if this message requires a reply.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IInputMessage.TransactionBehavior">
            <summary>
            The transaction behavior of this message
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IInputMessage.GetCurrentExpiry">
            <summary>
            WMQ only: Get expiry for a message including processing time
            </summary>
            <returns></returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Messages.IOutputMessage">
            <summary>
            Defines the contract for outbound messages. Used when sending messages.
            </summary>
            <remarks>
            <para>Note that objects implementing IOutputMessage should be disposed.</para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IOutputMessage.Priority">
            <summary>
            WMQ only: The priority of the message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IOutputMessage.IsBinary">
            <summary>
            WMQ only: If true, the message will be sent as a binary message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IOutputMessage.Compress">
            <summary>
            WMQ only: If true, the message will be compressed before sending.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IOutputMessage.Expiry">
            <summary>
            WMQ only: The expiry time of the message in seconds.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AppendData(System.Byte[])">
            <summary>
            Appends data to this message, not creating a new record.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AppendData(System.String)">
            <summary>
            Appends data to this message, not creating a new record.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AppendData(System.String,System.Text.Encoding)">
            <summary>
            Appends data to this message, not creating a new record.
            </summary>
            <param name="data">Data to be added</param>
            <param name="encoding">The encoding of the string</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AppendData(System.IO.Stream)">
            <summary>
            Appends data to this message, not creating a new record.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AddRecord(System.Byte[])">
            <summary>
            Adds a new record of data to the message.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AddRecord(System.String)">
            <summary>
            Adds a new record of data to the message.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AddRecord(System.String,System.Text.Encoding)">
            <summary>
            Adds a new record of data to the message.
            </summary>
            <param name="data">Data to be added</param>
            <param name="encoding">The encoding of the string</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AddRecord(System.IO.Stream)">
            <summary>
            Adds a new record of data to the message.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AddRecords(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Adds several records of data to the message
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AddRecords(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds several records of data to the message
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.AddRecords(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Adds several records of data to the message
            </summary>
            <param name="data">Data to be added</param>
            <param name="encoding">The encoding of the string</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IOutputMessage.SetProperty(Volvo.NVS.Integration.IPropertyKey,System.String)">
            <summary>
            Set a property of the message
            </summary>
            <param name="key">The property key</param>
            <param name="value">The property value</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Messages.Message">
            <summary>
            Implementation of the IMessage interface
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Text.Encoding,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="targetClient">WMQ only: If true, no header information is added to the message</param>
            <param name="priority">The priority of the message</param>
            <param name="retries">The number of retries done on this message</param>
            <param name="timeout">The time out used when handling this message. (Currently unused)</param>
            <param name="messageId">The message id</param>
            <param name="correlationObject">WMQ only: The correlation id</param>
            <param name="header">WMQ only: The headears to be added to tbe message</param>
            <param name="replyTo">WMQ only: The queue to reply to</param>
            <param name="replyToQMgr">WMQ only: The reply to queue manager</param>
            <param name="requiresReply">Indicates if this message requires a reply</param>
            <param name="useRecords">True if records are used in this message.</param>
            <param name="tempFiles">True if message should be stored in temporary files</param>
            <param name="compress">WMQ only: If true, the message will be compressed before sending.</param>
            <param name="binary">WMQ only: If true, the message will be sent as a binary message.</param>
            <param name="encoding">The encoding used when sending the message.</param>
            <param name="expiry">WMQ only: The expiry time of the message in seconds.</param>
            <param name="applicationId">WMQ only: The application identity</param>
            <param name="userId">WMQ only: The user identifier</param>
            <param name="splitNewLineRecord">If Enabled, splits records based on new line(\t or \n) while sending or receiving messages from both WMQ and VCOM.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.#ctor(System.Int32,System.Boolean,System.Byte[],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="retries">The number of retries done on this message</param>
            <param name="requiresReply">Indicates if this message requires a reply</param>
            <param name="correlationId">WMQ only: The correlation id</param>
            <param name="useRecords">True if records are used in this message.</param>
            <param name="tempFiles">True if message should be stored in temporary files</param>
            <param name="compress">WMQ only: If true, the message will be compressed before sending.</param>
            <param name="binary">WMQ only: If true, the message will be sent as a binary message.</param>
            <param name="expiry">WMQ only: The expiry time of the message in seconds.</param>
            <param name="splitNewLineRecord">If Enabled, splits records based on new line(\t or \n) while sending or receiving messages from both WMQ and VCOM.</param>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.TargetClient">
            <summary>
            WMQ only: If true, no header information is added to the message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Priority">
            <summary>
            WMQ only: The priority of the message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Retries">
            <summary>
            The number of retries done on this message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Timeout">
            <summary>
            The time out used when handling this message. (Currently unused)
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.MessageId">
            <summary>
            WMQ only: The message id
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.CorrelationObject">
            <summary>
            WMQ only: The correlation id
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Expiry">
            <summary>
            WMQ only: The expiry time of the message in seconds.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Properties">
            <summary>
            WMQ only: The properties set on the message
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.ReplyTo">
            <summary>
            WMQ only: The reply to queue
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.ReplyToQMgr">
            <summary>
            WMQ only: The reply to queue manager
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.RequiresReply">
            <summary>
            Indicates if this message requires a reply.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.TempFiles">
            <summary>
            True if message should be stored in temporary files
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Binary">
            <summary>
            WMQ only: If true, the message will be sent as a binary message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.IsBinary">
            <summary>
            WMQ only: If true, the message will be sent as a binary message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Compress">
            <summary>
            WMQ only: If true, the message will be compressed before sending.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Encoding">
            <summary>
            The encoding used when sending the message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.ApplicationId">
            <summary>
            WMQ only: The application identity
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.UserId">
            <summary>
            WMQ only: The user identifier
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.SplitNewLineRecord">
            <summary>
            If Enabled, splits records based on new line(\t or \n) while sending or receiving messages from both WMQ and VCOM.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.SeqNo">
            <summary>
            Message sequence number
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.TransactionBehavior">
            <summary>
            The transaction behavior of this message
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.TransactionBehaviorChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.UseRecords">
            <summary>
            True if records are used in this message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.IsEmpty">
            <summary>
            True if this message is empty.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AppendData(System.Byte[])">
            <summary>
            Appends data to this message, not creating a new record.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AppendData(System.String)">
            <summary>
            Appends data to this message, not creating a new record.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AppendData(System.String,System.Text.Encoding)">
            <summary>
            Appends data to this message, not creating a new record.
            </summary>
            <param name="data">Data to be added</param>
            <param name="encoding">The encoding of the string</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AppendData(System.IO.Stream)">
            <summary>
            Appends data to this message, not creating a new record.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AddRecord(System.Byte[])">
            <summary>
            Adds a new record of data to the message.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AddRecord(System.String)">
            <summary>
            Adds a new record of data to the message.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AddRecord(System.String,System.Text.Encoding)">
            <summary>
            Adds a new record of data to the message.
            </summary>
            <param name="data">Data to be added</param>
            <param name="encoding">The encoding of the string</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AddRecord(System.IO.Stream)">
            <summary>
            Adds a new record of data to the message.
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AddRecords(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Adds several records of data to the message
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AddRecords(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds several records of data to the message
            </summary>
            <param name="data">Data to be added</param>
            <returns>this</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.AddRecords(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Adds several records of data to the message
            </summary>
            <param name="data">Data to be added</param>
            <param name="encoding">The encoding of the string</param>
            <returns>this</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.RecordCount">
            <summary>
            The number of records in the message
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Value">
            <summary>
            The string value of the first record of the message
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.Message.Raw">
            <summary>
            The raw representation of the first record of the message.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.GetCurrentExpiry">
            <summary>
            WMQ only: Get expiry for a message including processing time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.GetValue(System.Int32)">
            <summary>
            Gets the string value of the given record
            </summary>
            <param name="idx">The index of the record to get the value from.</param>
            <returns>The value of the record as string.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.GetRaw(System.Int32)">
            <summary>
            Gets the raw representation of the given record
            </summary>
            <param name="idx">The index of the record to get the raw representation from.</param>
            <returns>The array of bytes representing the raw record.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.GetStream(System.Int32)">
            <summary>
            Gets the stream containing the given record. The stream should be disposed after usage.
            </summary>
            <param name="idx">The index of the record to get the stream from.</param>
            <returns>The stream containing the record.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.ToString(System.Text.Encoding)">
            <summary>
            Gets the string representation of the message with the given encoding
            </summary>
            <param name="encoding">The encoding to be used.</param>
            <returns>The string representation of the message, using the given encoding.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.ToString">
            <summary>
            Gets the string representation of the message
            </summary>
            <returns>The string representation of the message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.SetProperty(System.String,System.String)">
            <summary>
            Set a property of the message
            </summary>
            <param name="key">The property key</param>
            <param name="value">The property value</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.SetProperty(Volvo.NVS.Integration.IPropertyKey,System.String)">
            <summary>
            Set a property of the message
            </summary>
            <param name="key">The property key</param>
            <param name="value">The property value</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.GetProperty(System.String)">
            <summary>
            Gets the property value of the message by its key.
            </summary>
            <param name="key">The property key</param>
            <returns>The property value, given its key</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.GetProperty(Volvo.NVS.Integration.IPropertyKey)">
            <summary>
            Gets the property value of the message by its key.
            </summary>
            <param name="key">The property key</param>
            <returns>The property value, given its key</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.GetPropertyKeys">
            <summary>
            Gets a list of all property keys for all properties on the message.
            </summary>
            <returns>The keys to all properties set on the message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.Clone">
            <summary>
            Clones the message.
            </summary>
            <returns>A new cloned instance of this <see cref="T:Volvo.NVS.Integration.Messages.IInputMessage"/> object.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.Dispose">
            <summary>
            Disposes the Message object
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.Dispose(System.Boolean)">
            <summary>
            Disposes the Message object
            </summary>
            <param name="disposing">Pass true only if calling this method from the <see cref="M:System.IDisposable.Dispose"/> method.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.Finalize">
            <summary>
            Destructor of the Message object
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.StartReading">
            <summary>
            Initialize for reading using GetNextPart
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.GetNextPart(System.Int32,System.Byte[]@)">
            <summary>
            Read the next part of the message
            </summary>
            <param name="messageMaxLength">The max size of the part</param>
            <param name="buffer">The buffer to place the data. May be reused.</param>
            <returns>Same content as stored in <b>buffer</b> param.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.IsLastPart">
            <summary>
            Return true if this is the last part of the message
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.IsMultiPart(System.Int32)">
            <summary>
            Return true if message is a multi part message.
            </summary>
            <param name="messageMaxLength">Max length of one individual message.</param>
        </member>
        <member name="F:Volvo.NVS.Integration.Messages.Message.BinaryCompressionHeader">
            <summary>
            The header added to compressed records sent in binary form
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Messages.Message.StringCompressionHeader">
            <summary>
            The header added to compressed records sent in BASE64 encoding
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.StartWriting">
            <summary>
            Internal method used to start writing data to the message from the backend
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.WritePart(System.Byte[])">
            <summary>
            Internal method used to write data to the message from the backend
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.Message.EndWriting">
            <summary>
            Internal methof used to end writing data to the message from the backend
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Messages.IMessage">
            <summary>
            The interface defining the contract for messages. Used when sending and receiving messages.
            </summary>
            <remarks>
            <para>Note that objects implementing IMessage should be disposed.</para>
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IMessage.Encoding">
            <summary>
            The encoding used when sending the message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IMessage.MessageId">
            <summary>
            WMQ only: The message id
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IMessage.UseRecords">
            <summary>
            True if records are used in this message.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IMessage.IsEmpty">
            <summary>
            True if this message is empty.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IMessage.RecordCount">
            <summary>
            The number of records in the message
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IMessage.Value">
            <summary>
            The string value of the first record of the message
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IMessage.Raw">
            <summary>
            The raw representation of the first record of the message.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IMessage.GetValue(System.Int32)">
            <summary>
            Gets the string value of the given record
            </summary>
            <param name="idx">The index of the record to get the value from.</param>
            <returns>The value of the record as string.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IMessage.GetRaw(System.Int32)">
            <summary>
            Gets the raw representation of the given record
            </summary>
            <param name="idx">The index of the record to get the raw representation from.</param>
            <returns>The array of bytes representing the raw record.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IMessage.GetStream(System.Int32)">
            <summary>
            Gets the stream containing the given record. The stream should be disposed after usage.
            </summary>
            <param name="idx">The index of the record to get the stream from.</param>
            <returns>The stream containing the record.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IMessage.ToString">
            <summary>
            Gets the string representation of the message
            </summary>
            <returns>The string representation of the message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IMessage.ToString(System.Text.Encoding)">
            <summary>
            Gets the string representation of the message with the given encoding
            </summary>
            <param name="encoding">The encoding to be used.</param>
            <returns>The string representation of the message, using the given encoding.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IMessage.GetProperty(Volvo.NVS.Integration.IPropertyKey)">
            <summary>
            Gets the property value of the message by its key.
            </summary>
            <param name="key">The property key</param>
            <returns>The property value, given its key</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IMessage.GetPropertyKeys">
            <summary>
            Gets a list of all property keys for all properties on the message.
            </summary>
            <returns>The keys to all properties set on the message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Messages.IMessage.Clone">
            <summary>
            Clones the message.
            </summary>
            <returns>A new cloned instance of this <see cref="T:Volvo.NVS.Integration.Messages.IInputMessage"/> object.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IMessage.SplitNewLineRecord">
            <summary>
            If Enabled, splits records based on new line(\t or \n) while sending or receiving messages from both WMQ and VCOM.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Messages.IReplyMessage">
            <summary>
            Message to be sent in reply to a request.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IReplyMessage.CorrelationObject">
            <summary>
            WMQ only: The correlation id
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IReplyMessage.ReplyTo">
            <summary>
            WMQ only: The reply to queue
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Messages.IReplyMessage.ReplyToQMgr">
            <summary>
            WMQ only: The reply to queue manager
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Properties.CommonAssemblyInfoConstants">
            <summary>
            Public constants related into the assembly information and assembly signing.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Properties.CommonAssemblyInfoConstants.PublickKeyAttribute">
            <summary>
            The Utility library public key attribute string which can be applied directly on the InternalsVisibleTo.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.BaseIntegration">
            <summary>
            Gives access into the integration configuration section. It is used as base class for specialized factory classes.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.BaseIntegration.Config">
            <summary>
            Configuration section of volvo.nvs.integration
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.BaseIntegration.#cctor">
            <summary>
            Initializes the <see cref="T:Volvo.NVS.Integration.BaseIntegration"/> class.
            </summary>
            <remarks>That constructor reads integration configuration section from configuration file and sets temporary file stream folder if specified in configuration.</remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.BaseIntegration.#ctor">
            <summary>
            Protects class to be abstract
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.ChannelFactory">
             <summary>
             Factory responsible for creating channel instances.
             </summary>
             <remarks>
             <para>Each time when an input channel is needed use either <see cref="M:Volvo.NVS.Integration.ChannelFactory.CreateInputChannel(System.Uri)"/> or <see cref="M:Volvo.NVS.Integration.ChannelFactory.CreateInputChannel(System.String)"/> static methods.
             For output channels, use either <see cref="M:Volvo.NVS.Integration.ChannelFactory.CreateOutputChannel(System.Uri)"/> or <see cref="M:Volvo.NVS.Integration.ChannelFactory.CreateOutputChannel(System.String)"/> 
             and for reply channels, use either <see cref="M:Volvo.NVS.Integration.ChannelFactory.CreateReplyChannel(System.Uri)"/> or <see cref="M:Volvo.NVS.Integration.ChannelFactory.CreateReplyChannel(System.String)"/> 
             </para>
             <para>Before using the channel implementation must be registered in unity. That can be done either in configuration file or by code.
             </para>
             <para>
             Registration by configuration file:
             <code language="xml">
             <![CDATA[
             <configSections>
                ...
                <!-- Register unity configuration section -->
                <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
                ...
             </configSections>
            
             <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
              <container>
                <!-- Register WMQ channel implementations -->
                <register name = "mqin"
                          type="Volvo.NVS.Integration.IInputChannel, Volvo.NVS.Integration"
                          mapTo="Volvo.NVS.Integration.WebsphereMQ.InputChannel, Volvo.NVS.Integration.WebsphereMQ"/>
                <register name = "mqout"
                          type="Volvo.NVS.Integration.IOutputChannel, Volvo.NVS.Integration"
                          mapTo="Volvo.NVS.Integration.WebsphereMQ.OutputChannel, Volvo.NVS.Integration.WebsphereMQ"/>
                <register name = "mqrep"
                          type="Volvo.NVS.Integration.IReplyChannel, Volvo.NVS.Integration"
                          mapTo="Volvo.NVS.Integration.WebsphereMQ.ReplyChannel, Volvo.NVS.Integration.WebsphereMQ"/>
             
                <!-- Register VCOM channel implementations -->
                <register name ="vcomin"
                          type="Volvo.NVS.Integration.IInputChannel, Volvo.NVS.Integration"
                          mapTo="Volvo.NVS.Integration.VCom.VComChannel, Volvo.NVS.Integration.VCom"/>
                <register name ="vcomout"
                          type="Volvo.NVS.Integration.IOutputChannel, Volvo.NVS.Integration"
                          mapTo="Volvo.NVS.Integration.VCom.VComChannel, Volvo.NVS.Integration.VCom"/>
                <register name ="vcomrep"
                          type="Volvo.NVS.Integration.IReplyChannel, Volvo.NVS.Integration"
                          mapTo="Volvo.NVS.Integration.VCom.VComChannel, Volvo.NVS.Integration.VCom"/>
            
                <!-- Register Files channel implementations -->
                <register name = "fileout"
                          type="Volvo.NVS.Integration.IOutputChannel, Volvo.NVS.Integration"  
                          mapTo="Volvo.NVS.Integration.Files.FilesOutputChannel, Volvo.NVS.Integration.Files"/>
                <register name = "filein"
                          type="Volvo.NVS.Integration.IInputChannel, Volvo.NVS.Integration"
                          mapTo="Volvo.NVS.Integration.Files.FilesInputChannel, Volvo.NVS.Integration.Files"/>
                <register name = "filerep"
                          type="Volvo.NVS.Integration.IReplyChannel, Volvo.NVS.Integration"
                          mapTo="Volvo.NVS.Integration.Files.FilesReplyChannel, Volvo.NVS.Integration.Files"/>
              </container>
             </unity>
             ]]>
             </code>
             </para>
             <para>Registration by code:
             <code language="C#">
             <![CDATA[
             using Volvo.NVS.Core.Unity;
             using Volvo.NVS.Core.Unity.Configuration;
             using Volvo.NVS.Integration;
             
             static void RegisterComponentsInUnity ()
             {
                LibraryConfigurator.Current.ConfigureContainer(builder => builder.FromApplicationConfigurationFile())
                   .ConfigureIntegrationMQChannels(builder => builder.RegisterChannels())
                   .ConfigureIntegrationVComChannels(builder => builder.RegisterChannels())
                   .ConfigureIntegrationFilesChannels(builder => builder.RegisterChannels());
             }
             ]]>
             </code>
             </para>
             </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.ChannelFactory.CreateInputChannel(System.Uri)">
            <summary>
            Create a an instance of IInputChannel implementation from uri.
            </summary>
            <param name="uri">The Uri defining the channel to be created</param>
            <returns>The created channel</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.ChannelFactory.CreateOutputChannel(System.Uri)">
            <summary>
            Create a an instance of IOutputChannel implementation from uri.
            </summary>
            <param name="uri">The Uri defining the channel to be created</param>
            <returns>The created channel</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.ChannelFactory.CreateReplyChannel(System.Uri)">
            <summary>
            Create a an instance of CreateReplyChannel implementation from uri.
            </summary>
            <param name="uri">The Uri defining the channel to be created</param>
            <returns>The created channel</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.ChannelFactory.CreateInputChannel(System.String)">
            <summary>
            Create instance of IInputChannel implementation from channel name in application configuration.
            </summary>
            <param name="channelElementName">The name of the config element describing the channel.</param>
            <returns>The created channel</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.ChannelFactory.CreateOutputChannel(System.String)">
            <summary>
            Create instance of IOutputChannel implementation from channel name in application configuration.
            </summary>
            <param name="channelElementName">The name of the config element describing the channel.</param>
            <returns>The created channel</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.ChannelFactory.CreateReplyChannel(System.String)">
            <summary>
            Create instance of IReplyChannel implementation from channel name in application configuration.
            </summary>
            <param name="channelElementName">The name of the config element describing the channel.</param>
            <returns>The created channel</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Events.CommunicationEventArgs`1">
            <summary>
            Argument for communication error event.
            </summary>
            <typeparam name="T">Type of event value.</typeparam>
        </member>
        <member name="M:Volvo.NVS.Integration.Events.CommunicationEventArgs`1.#ctor(`0)">
            <summary>
            Constructs event argument with value.
            </summary>
            <param name="value">Value of event argument.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Events.CommunicationEventArgs`1.#ctor(`0,System.Exception,System.Boolean,System.Int32)">
            <summary>
            Constructs event argument with all data.
            </summary>
            <param name="value">Value of event argument.</param>
            <param name="exception">Exception thrown during channel communication.</param>
            <param name="recommendedForStop">Will channel stop his operations.</param>
            <param name="retryCount">Number of retries without success.</param>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.CommunicationEventArgs`1.RecommendedForStop">
            <summary>
            True if NVS Integration recommends stopping the channel due to unrecoverable error.
            </summary>
            <remarks>That field can be set by the handler to stop channel operations.</remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.CommunicationEventArgs`1.RetryCount">
            <summary>
            The number of times NVS Integration has retried last operation.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.CommunicationEventArgs`1.Exception">
            <summary>
            The exception causing this event.
            Can be null, always check Value property.
            </summary>
            <remarks>
            There are errors that are not a result of an exception but 
            </remarks>
        </member>
        <member name="T:Volvo.NVS.Integration.Events.CommunicationStatus">
            <summary>
            Describes the status of the listener thread while subscribing.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Events.CommunicationStatus.Offline">
            <summary>
            The listener is offline. In this state, the listener will not recieve any more messages.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Events.CommunicationStatus.Connecting">
            <summary>
            The listener is connecting to the infrastructure
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Events.CommunicationStatus.Connected">
            <summary>
            The listener is connected to the insfrastructure.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Events.CommunicationStatus.Disconnected">
            <summary>
            The listener is disconnected from the infrastructure
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Events.CommunicationStatusChanged">
            <summary>
            Event argument for communication status changes
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Events.CommunicationStatusChanged.#ctor(Volvo.NVS.Integration.IInputChannel,Volvo.NVS.Integration.Events.CommunicationStatus)">
            <summary>
            Constructor
            </summary>
            <param name="sender">Channel who send event.</param>
            <param name="value">Current <see cref="T:Volvo.NVS.Integration.Events.CommunicationStatus"/> of channel.</param>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.CommunicationStatusChanged.Channel">
            <summary>
            The channel this event concerns.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.CommunicationStatusChanged.Value">
            <summary>
            The new status of the channel
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Events.EventArgs`1">
            <summary>
            Strongly typed event argument
            </summary>
            <typeparam name="T">Type for Value</typeparam>
        </member>
        <member name="M:Volvo.NVS.Integration.Events.EventArgs`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value of argument</param>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.EventArgs`1.Value">
            <summary>
            The value provided by event argument
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs">
            <summary>
            Event args for post process event
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.#ctor(Volvo.NVS.Integration.Messages.IInputMessage,System.TimeSpan,Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.TransactionOutcomeEnum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.Message">
            <summary>
            The message that has been handled
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.ElapsedTime">
            <summary>
            The time elapsed while processing the message
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.TransactionOutcome">
            <summary>
            The outcome of the transaction while processing the message
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.TransactionOutcomeEnum">
            <summary>
            Enum defining possible transaction outcomes
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.TransactionOutcomeEnum.Commit">
            <summary>
            Transaction committed
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.TransactionOutcomeEnum.Rollback">
            <summary>
            Transaction rolled back
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Events.PostProcessMessageEventArgs.TransactionOutcomeEnum.Exception">
            <summary>
            Transaction rolled back due to exception
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Exceptions.InfrastructureException">
            <summary>
            Problems with VCom infrastructure
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.InfrastructureException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.InfrastructureException.#ctor(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception description.</param>
            <param name="uri">Uri used by channel.</param>
            <param name="reasonCode">Reason code returned by VCom client.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.InfrastructureException.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception description.</param>
            <param name="uri">Uri used by channel.</param>
            <param name="reasonCode">Reason code returned by VCom client.</param>
            <param name="innerException">Inner exception caused that exception.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Exceptions.InvalidConfigurationException">
            <summary>
            Problems in integration library configuration
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.InvalidConfigurationException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.InvalidConfigurationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Description of the configuration problem.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.InvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Description of the configuration problem.</param>
            <param name="innerException">Inner exception caused that exception.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Exceptions.IntegrationException">
            <summary>
            Integration library specific exception
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Exceptions.IntegrationException.Uri">
            <summary>
            The URI controlling the channel throwing the exception
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Exceptions.IntegrationException.ReasonCode">
            <summary>
            The reason code from the backend
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.IntegrationException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.IntegrationException.#ctor(System.String)">
            <summary>
            Creates a new integration exception.
            </summary>
            <param name="message">A message of the exception.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.IntegrationException.#ctor(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception description.</param>
            <param name="uri">Uri used by channel.</param>
            <param name="reasonCode">The reason code from the backend.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Exceptions.IntegrationException.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception description.</param>
            <param name="uri">Uri used by channel.</param>
            <param name="reasonCode">The reason code from the backend.</param>
            <param name="innerException">Inner exception caused that exception.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.IChannelProperty">
            <summary>
            Defines the parts of the IChannel interface handling properties.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.IChannelProperty.SetProperty(Volvo.NVS.Integration.IPropertyKey,System.Int32)">
            <summary>
            Sets a channel property.
            </summary>
            <param name="key">The key of the property to set</param>
            <param name="value">The new value of the property as <see cref="T:System.Int32"/></param>
        </member>
        <member name="M:Volvo.NVS.Integration.IChannelProperty.SetProperty(Volvo.NVS.Integration.IPropertyKey,System.String)">
            <summary>
            Sets a channel property.
            </summary>
            <param name="key">The key of the property to set</param>
            <param name="value">The new value of the property as <see cref="T:System.String"/></param>
        </member>
        <member name="M:Volvo.NVS.Integration.IChannelProperty.SetProperty(Volvo.NVS.Integration.IPropertyKey,System.Boolean)">
            <summary>
            Sets a channel property.
            </summary>
            <param name="key">The key of the property to set</param>
            <param name="value">The new value of the property as <see cref="T:System.Boolean"/></param>
        </member>
        <member name="T:Volvo.NVS.Integration.IInputChannel">
            <summary>
            Defines the parts of the IChannel interface handling reception of messages.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IInputChannel.DestinationName">
            <summary>
            The name of the destination (regardless of queue/topic/expediter/partner)
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.Receive">
            <summary>
            Reads the first message if available
            </summary>
            <returns><b>null</b> if no message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.Receive(System.Action{Volvo.NVS.Integration.Messages.IInputMessage})">
            <summary>
            Read the first message. If available, call action and return true. If not available return false.
            </summary>
            <param name="action">The method to be called if message is available</param>
            <returns><b>true</b> if message is available</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.ReceiveWithSelector(System.String)">
            <summary>
            Reads the first message available matching the selector
            </summary>
            <param name="selector">Defines selection pattern that message has to meet</param>
            <returns><b>null</b> if no message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.ReceiveWithSelector(System.Action{Volvo.NVS.Integration.Messages.IInputMessage},System.String)">
            <summary>
            Read the first message matching the selector. If available, call action and return true. If not available return false.
            </summary>
            <param name="action">The method to be called if message is available</param>
            <param name="selector">Defines selection pattern that message has to meet</param>
            <returns><b>true</b> if message is available</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.Subscribe(System.Action{Volvo.NVS.Integration.Messages.IInputMessage},System.EventHandler{Volvo.NVS.Integration.Events.CommunicationEventArgs{System.String}},System.Transactions.IsolationLevel)">
            <summary>
            Subscribe with no filtering.
            </summary>
            <param name="action">The method to be called when message arrives</param>
            <param name="errorHandler">Error event handler</param>
            <param name="isolationLevel">The Isolation Level to use in the transaction started when the message is received</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.Subscribe(System.Action{Volvo.NVS.Integration.Messages.IInputMessage},System.EventHandler{Volvo.NVS.Integration.Events.CommunicationEventArgs{System.String}})">
            <summary>
            Subscribe on channel using background thread 
            </summary>
            <param name="action">The method to be called when message arrives</param>
            <param name="errorHandler">Error event handler</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.Subscribe(System.Action{Volvo.NVS.Integration.Messages.IInputMessage},System.Transactions.IsolationLevel)">
            <summary>
            Subscribe on channel using background thread 
            </summary>
            <param name="action">The method to be called when message arrives</param>
            <param name="isolationLevel">Transaction isolation level to be used for handler transaction.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.Subscribe(System.Action{Volvo.NVS.Integration.Messages.IInputMessage})">
            <summary>
            Subscribe on channel using background thread 
            </summary>
            <param name="action">The method to be called when message arrives</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.SubscribeWithSelector(System.Action{Volvo.NVS.Integration.Messages.IInputMessage},System.EventHandler{Volvo.NVS.Integration.Events.CommunicationEventArgs{System.String}},System.Transactions.IsolationLevel,System.String)">
            <summary>
            Subscribe on channel using the selector.
            </summary>
            <param name="action">The method to be called when message arrives</param>
            <param name="errorHandler">Error event handler</param>
            <param name="isolationLevel">The Isolation Level to use in the transaction started when the message is received</param>
            <param name="selector">Defines selection pattern that message has to meet</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.SubscribeWithSelector(System.Action{Volvo.NVS.Integration.Messages.IInputMessage},System.EventHandler{Volvo.NVS.Integration.Events.CommunicationEventArgs{System.String}},System.String)">
            <summary>
            Subscribe on channel using the selector
            </summary>
            <param name="action">The method to be called when message arrives</param>
            <param name="errorHandler">Error event handler</param>
            <param name="selector">Defines selection pattern that message has to meet</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.SubscribeWithSelector(System.Action{Volvo.NVS.Integration.Messages.IInputMessage},System.Transactions.IsolationLevel,System.String)">
            <summary>
            Subscribe on channel using the selector 
            </summary>
            <param name="action">The method to be called when message arrives</param>
            <param name="isolationLevel">Transaction isolation level to be used for handler transaction.</param>
            <param name="selector">Defines selection pattern that message has to meet</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.SubscribeWithSelector(System.Action{Volvo.NVS.Integration.Messages.IInputMessage},System.String)">
            <summary>
            Subscribe on channel using the selector 
            </summary>
            <param name="action">The method to be called when message arrives</param>
            <param name="selector">Defines selection pattern that message has to meet</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.PeekSubscribe(System.Action)">
            <summary>
            Subscribe for notifications whenever there is a message on the queue.
            </summary>
            <remarks>
            <para>
            In case when application needs to be informed about incoming messages without "touching" them 
            or custom message handling is needed use PeekSubscribe method instead of Subscribe. 
            </para>
            <para>
            PeekSubscribe starts new thread and call registered callback (action) each time when new message arrive. 
            Callback action is called when there is a message on the queue. 
            </para>
            </remarks>
            <param name="action">The method to be called when message arrives</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.AsynchReceiveForRequestReply(System.Action{Volvo.NVS.Integration.Messages.IInputMessage})">
            <summary>
            Receive messages for Request Reply asynchronously for WMQ Only
            </summary>
            <param name="action">The method to be called when message arrives</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.CanPeek">
            <summary>
            Is peek supported?
            </summary>
            <returns><b>true</b> if supported</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IInputChannel.Peek">
            <summary>
            Read the first message if available without consuming.
            </summary>
            <returns>The next message on the queue. <b>null</b> if queue is empty.</returns>
        </member>
        <member name="E:Volvo.NVS.Integration.IInputChannel.StatusChanged">
            <summary>
            A communication status change event handler.
            </summary>
        </member>
        <member name="E:Volvo.NVS.Integration.IInputChannel.ErrorOccurred">
            <summary>
            An error event handler.
            </summary>
        </member>
        <member name="E:Volvo.NVS.Integration.IInputChannel.PostProcessMessageHandler">
            <summary>
            An event handler for post processing.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IInputChannel.TransactionTimeout">
            <summary>
            The transaction timeout to use when subscribing to messages (in seconds).
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IInputChannel.IsolationLevel">
            <summary>
            The isolation level to use in transactions when subscribing to messages.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.IOutputChannel">
            <summary>
            Defines the contract of a channel used to send messages.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.IOutputChannel.DestinationName">
            <summary>
            The name of the destination (regardless of queue/topic/expediter/partner)
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.CreateMessage">
            <summary>
            Creates a message for usage with the channel
            </summary>
            <returns>The created <see cref="T:Volvo.NVS.Integration.Messages.IOutputMessage"/> message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.CreateMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new message for usage with the channel filled with GimR informations. 
            </summary>
            <remarks>GimR works only with Websphere MQ and that method is not implemented for VCom channel</remarks>
            <param name="gimSenderId">GimR sender identification.</param>
            <param name="gimMessageVersion">GimR message version.</param>
            <param name="gimMessageType">GimR message type.</param>
            <param name="gimMessageExchangePattern">GimR message exchange pattern.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Publish(System.String,System.String)">
            <summary>
            Publish message using channel with UTF8 encoding
            </summary>
            <param name="message">Message content as string</param>
            <param name="topic">Overrides the topic specified in URI</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Publish(System.String)">
            <summary>
            Publish message using channel with UTF8 encoding
            </summary>
            <param name="message">Message content as string</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Publish(Volvo.NVS.Integration.Messages.IOutputMessage,System.String)">
            <summary>
            Publish a message on the given topic
            </summary>
            <param name="message">Message to be send.</param>
            <param name="topic">Overrides the topic specified in URI</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Publish(Volvo.NVS.Integration.Messages.IOutputMessage)">
            <summary>
            Publish a message
            </summary>
            <param name="message">Message to be send.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Send(System.String)">
            <summary>
            Send a message. The message will be UTF8 encoded.
            </summary>
            <param name="message">Message content as string.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Send(Volvo.NVS.Integration.Messages.IOutputMessage)">
            <summary>
            Send a message
            </summary>
            <param name="message">Message to be sent.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Request(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Sends a request and waits for a reply
            </summary>
            <param name="message">The request content as string to be sent.</param>
            <param name="timeout">Override the default time out.</param>
            <returns>The reply message. <b>null</b> on time out.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Request(System.String)">
            <summary>
            Sends a request and waits for a reply
            </summary>
            <param name="message">The request content as string to be sent.</param>
            <returns>The reply message. <b>null</b> on time out.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Request(Volvo.NVS.Integration.Messages.IOutputMessage,System.Nullable{System.TimeSpan})">
            <summary>
            Sends a request and waits for a reply
            </summary>
            <param name="message">The request message to be sent.</param>
            <param name="timeout">Override the default time out.</param>
            <returns>The reply message. <b>null</b> on time out.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.Request(Volvo.NVS.Integration.Messages.IOutputMessage)">
            <summary>
            Sends a request and waits for a reply
            </summary>
            <param name="message">The request message to be sent.</param>
            <returns>The reply message. <b>null</b> on time out.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.AsyncRequest(System.String)">
            <summary>
            Asynchronous request (WMQ Only)
            </summary>
            <param name="message">The request content as string to be sent.</param>
            <returns>The <see cref="P:Volvo.NVS.Integration.Messages.IMessage.MessageId"/> of request message. Reply will have <see cref="P:Volvo.NVS.Integration.Messages.IInputMessage.CorrelationObject"/> set to the same value.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.IOutputChannel.AsyncRequest(Volvo.NVS.Integration.Messages.IOutputMessage)">
            <summary>
            Asynchronous request (WMQ Only)
            </summary>
            <param name="message">The request message to be sent.</param>
            <returns>The <see cref="P:Volvo.NVS.Integration.Messages.IMessage.MessageId"/> of request message. Reply will have <see cref="P:Volvo.NVS.Integration.Messages.IInputMessage.CorrelationObject"/> set to the same value.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.Resources.IntegrationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Resources.IntegrationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Resources.IntegrationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Resources.IntegrationResources.MqMdNoFormatInformation">
            <summary>
              Looks up a localized string similar to MQMD writers does not provide format information as they must be in the character set and encoding of the local queue manager. Make sure MQMD is the first writer and it correctly used..
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Resources.IntegrationResources.UnsupportedVersionOfMqmdHeader">
            <summary>
              Looks up a localized string similar to The version {2} of the MQMD header is not supported.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.StreamImplementation.MemoryTributary">
            <summary>
            MemoryTributary is a re-implementation of MemoryStream that uses a dynamic list of byte arrays as a backing store, instead of a single byte array, the allocation
            of which will fail for relatively small streams as it requires contiguous memory.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="source">Initial content of the stream.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="length">Initial length of the stream.</param>
            <remarks>That constructor creates all memory blocks needed to store content with provided length.</remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.Block">
            <summary>
            The block of memory currently addressed by Position
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.BlockId">
            <summary>
            The id of the block currently addressed by Position
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.BlockOffset">
            <summary>
            The offset of the byte currently addressed by Position, into the block that contains it
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are 
            not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the 
            values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the 
            bytes read from the current source. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> 
            at which to begin storing the data read from the current stream. </param><param name="count">The maximum number of bytes 
            to be read from the current stream. </param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param><param name="origin">A value 
            of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the 
            current stream. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying 
            bytes to the current stream. </param><param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream. </param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.Dispose(System.Boolean)">
            <summary>
            Disposes the current instance of MemoryTributary
            </summary>
            <param name="disposing">Pass true only if calling this method from the <see cref="M:System.IDisposable.Dispose"/> method.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.ToArray">
            <summary>
            Returns the entire content of the stream as a byte array. This is not safe because the call to new byte[] may 
            fail if the stream is large enough. Where possible use methods which operate on streams directly instead.
            </summary>
            <returns>A byte[] containing the current data in the stream</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.ReadFrom(System.IO.Stream,System.Int64)">
            <summary>
            Reads length bytes from source into the this instance at the current position.
            </summary>
            <param name="source">The stream containing the data to copy</param>
            <param name="length">The number of bytes to copy</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.WriteTo(System.IO.Stream)">
            <summary>
            Writes the entire stream into destination, regardless of Position, which remains unchanged.
            </summary>
            <param name="destination">The stream to write the content of this stream to</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.MemoryTributary.ReadNextBytes(System.Int32)">
            <summary>
            Reads the contents of the stream into a byte array.
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            </summary>
            <returns>A byte array containing the contents of the stream.</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.StreamImplementation.NoCloseStreamReader">
            <summary>
            Encapsulates a stream writer which does not close the underlying stream.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.NoCloseStreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new stream writer object.
            </summary>
            <param name="stream">The underlying stream to write to.</param>
            <param name="encoding">The encoding for the stream.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.NoCloseStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new stream writer object using default encoding.
            </summary>
            <param name="stream">The underlying stream to write to.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.NoCloseStreamReader.Dispose(System.Boolean)">
            <summary>
            Disposes of the stream writer.
            </summary>
            <param name="disposeManaged">True to dispose managed objects.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.StreamImplementation.SubStream">
            <summary>
            SubStream class implements read only stream who represents part of provided parent stream where original data is stored
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.SubStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Constructor with minimal data needed for SubStream
            </summary>
            <param name="parent">Stream where original data is stored. Stream must implement reading and seeking.</param>
            <param name="offset">Starting point of sub stream inside the parent stream</param>
            <param name="length">Length of the parent stream</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.SubStream.Dispose(System.Boolean)">
            <summary>
            Disposes the SubStream object
            </summary>
            <param name="disposing">Pass true only if calling this method from the <see cref="M:System.IDisposable.Dispose"/> method.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.SubStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.SubStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.SubStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.SubStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.SubStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values 
            between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from 
            the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the 
            current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are 
            not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.SubStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the 
            current stream. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying 
            bytes to the current stream. </param><param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.SubStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.SubStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns> true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.SubStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.SubStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.SubStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
        </member>
        <member name="T:Volvo.NVS.Integration.StreamImplementation.TemporaryFileStream">
            <summary>
            Implementation of temporary file streams. File created when stream created. File deleted when stream disposed. File name is automatically created.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.TemporaryFileStream.SetDirectory(System.String)">
            <summary>
            Set the directory where the temporary files should be created.
            </summary>
            <param name="dir">Patch to the folder.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.TemporaryFileStream.Create">
            <summary>
            Factory method creating a new temporary file stream.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.StreamImplementation.TemporaryFileStream.Directory">
            <summary>
            The directory where temporary files are created.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.TemporaryFileStream.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.TemporaryFileStream.#ctor(System.IO.FileAccess)">
            <summary>
            Constructor
            </summary>
            <param name="access">Access type to the temporary file.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.TemporaryFileStream.#ctor(System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Constructor
            </summary>
            <param name="access">Access type to the temporary file.</param>
            <param name="share">Type of temporary file sharing.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.StreamImplementation.TemporaryFileStream.#ctor(System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="access">Access type to the temporary file.</param>
            <param name="share">Type of temporary file sharing.</param>
            <param name="bufferSize">Size of the buffer</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Utilities.IMessageStreamReader">
            <summary>
            Defines a contract for an integration message reader.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamReader.Seek(System.Int32)">
            <summary>
            Moves current position by provided offset in the stream.
            </summary>
            <param name="offset">Number of bytes to skip.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamReader.SkipBytes(System.Int32)">
            <summary>
            Moves current position by provided number of bytes from current position.
            </summary>
            <param name="n">Number of bytes to skip.</param>
            <returns>Number of bytes skipped.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamReader.ReadInt">
            <summary>
            Reads integer value from the message (4 bytes).
            </summary>
            <remarks>Order of bytes depends on message encoding and sometimes need to be reversed.</remarks>
            <returns>Integer value from the message.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamReader.ReadString(System.Int32)">
            <summary>
            Reads string with particular length.
            </summary>
            <remarks>ReadString should perform encoding from message CCSID to 1200. 
            For files we will accept only CCSID mapped to .Net encodings.</remarks>
            <param name="length">Number of characters to be read.</param>
            <returns>String encoded to Unicode.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamReader.ReadBytes(System.Int32)">
            <summary>
            Reads specific number of bytes from the message.
            </summary>
            <param name="count">Number of bytes to be read.</param>
            <returns>Bytes from message</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamReader.ReadFully(System.Byte[]@)">
            <summary>
            Reads all remaining bytes from the message.
            </summary>
            <param name="b">Buffer to store message content.</param>
        </member>
        <member name="P:Volvo.NVS.Integration.Utilities.IMessageStreamReader.MessageLength">
            <summary>
            Gets Length of the message
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Utilities.IMessageStreamWriter">
            <summary>
            Defines a contract for an integration message writer.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamWriter.Seek(System.Int32)">
            <summary>
            Sets a position within the current stream.
            </summary>
            <param name="offset">A position to be set in reference to the start of the stream.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamWriter.WriteInt4(System.Int32)">
            <summary>
            Writes an integer value into the message (4 bytes).
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamWriter.WriteString(System.String)">
            <summary>
            Writes a string using a current encoding given on the info object.
            </summary>
            <param name="value">A value to be written.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.IMessageStreamWriter.Write(System.Byte[])">
            <summary>
            Writes specified bytes.
            </summary>
            <param name="bytes">A collection of bytes to be written.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Utilities.IMessageStreamWriterServices">
            <summary>
            Defines a contract for a message writer providing additional, extended message stream related services.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Utilities.IMessageStreamWriterServices.Format">
            <summary>
            A message format.
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Utilities.IMessageStreamWriterServices.CharacterSet">
            <summary>
            A message character set id.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Utilities.Timing">
            <summary>
            Helper class to provide timing information.
            Currently disabled.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Utilities.Timing.BeginLogHeader">
            <summary>
            The header text to be written in the beginning of the log.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Utilities.Timing.EndLogHeader">
            <summary>
            The header text to be written in the end of the log.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Utilities.Timing.NvsIntegrationWmq">
            <summary>
            Text to be displayed as a label to NvsIntegration.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Utilities.Timing.Application">
            <summary>
            Text to be displayed as a label to Application.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.Utilities.Timing.DateTimeFormat">
            <summary>
            The date-time format used when writing logs
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Utilities.Timing.IsExtensiveLoggingEnabled">
            <summary>
            Returns true if extensive logging is enabled, false otherwise.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.Timing.Log(System.String)">
            <summary>
            Logs a line to the timing log.
            </summary>
            <param name="msg">The message to be logged</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.Timing.StartTimer(System.String)">
            <summary>
            Starts a timer with the given name with logging.
            </summary>
            <param name="name">The timer name.</param>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.Timing.EndTimer(System.String)">
            <summary>
            Ends a timer with the given name, logging the elapsed time.
            </summary>
            <param name="name">The timer name.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Utilities.Threading.ThreadEx">
            <summary>
            Support methods for threading
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.Threading.ThreadEx.GetNextWaitDuration(System.Int32)">
            <summary>
            Get the time to wait for this retry
            </summary>
            <param name="retry">Retry number.</param>
        </member>
        <member name="T:Volvo.NVS.Integration.Utilities.TimingLogScope">
            <summary>
            Logs start timer and end timer 
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.TimingLogScope.#ctor(System.String)">
            <summary>
            Logs Timing.Start and assigns activity id if it is not already assigned.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.TimingLogScope.Dispose">
            <summary>
            Logs EndTimer and clears activity id if it was assigned by this scope.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Utilities.TransactionUtilities">
            <summary>
            Support methods for handling transactions
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Utilities.TransactionUtilities.IsInsideTransactionScope">
            <summary>
            Returns true if we currently are in a transaction scope.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Utilities.Translators.CodePageTranslator">
            <summary>
            Code page conversion to/from WMQ code pages.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.Translators.CodePageTranslator.ToEncoding(System.Int32)">
            <summary>
            Returns Encoding mapped to the given CCSID
            </summary>
            <param name="ccsid">WMQ CCSID</param>
            <returns>Encoding class</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Utilities.Translators.CodePageTranslator.ToCcsid(System.Text.Encoding)">
            <summary>
            Returns WMQ CCSID mapped to the given encoding
            </summary>
            <param name="encoding">Encoding</param>
            <returns>CCSID value</returns>
        </member>
        <member name="T:Volvo.NVS.Integration.TransactionBehavior">
            <summary>
            Defines transaction behavior when reading a message from queue.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.TransactionBehavior.Auto">
            <summary>
            Current transaction behavior of the library will be set.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.TransactionBehavior.Commit">
            <summary>
            Commit the message in MQ/VCOM.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.TransactionBehavior.Rollback">
            <summary>
            Rollback the message in MQ/VCOM.
            </summary>
            <remarks>That behavior increase backout count and move the message to the backout queue if reach backout threshold value</remarks>
        </member>
        <member name="F:Volvo.NVS.Integration.TransactionBehavior.MarkAsPoison">
            <summary>
            Move the message to the backout queue in MQ/VCOM without regarding backout count value.
            </summary>
        </member>
        <member name="F:Volvo.NVS.Integration.TransactionBehavior.Leave">
            <summary>
            Rollback the message to the original queue without checking backout count.
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Validation.IValidator">
            <summary>
            Validator interface
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Validation.IValidator.Validate">
            <summary>
            Do validation
            </summary>
            <returns>Result of validation.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Validation.IValidator.Valid">
            <summary>
            Is valid
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Validation.IValidator.ValidationResults">
            <summary>
            Validation results
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Validation.ValidationBase">
            <summary>
            Implementation of validation
            </summary>
        </member>
        <member name="P:Volvo.NVS.Integration.Validation.ValidationBase.ValidationResults">
            <summary>
            Gets the validation results.
            </summary>
            <value>
            The validation results.
            </value>
        </member>
        <member name="P:Volvo.NVS.Integration.Validation.ValidationBase.Valid">
            <summary>
            Gets the indication of whether the validation was successful.
            
            </summary>
            
            <remarks>
            An unsuccessful validation will be represented by a <see cref="P:Volvo.NVS.Integration.Validation.ValidationBase.ValidationResults"/> instance with
                        <see cref="T:System.String"/> elements.
            
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Integration.Validation.ValidationBase.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns>Validation results represented by set of validation messages</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Validation.ValidationBase.SelfValidation">
            <summary>
            Perform validation logic. All validation problems need to be added to <see cref="P:Volvo.NVS.Integration.Validation.ValidationBase.ValidationResults"/> property. 
            </summary>
        </member>
        <member name="T:Volvo.NVS.Integration.Validation.ValidationResults">
            <summary>
            Represents the result of validating an object, in the form of a collection of <see cref="T:System.String"/> elements.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Validation.ValidationResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Volvo.NVS.Integration.Validation.ValidationResults"/> class.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Validation.ValidationResults.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of validation results.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> of strings representing the validation results.</returns>
        </member>
        <member name="M:Volvo.NVS.Integration.Validation.ValidationResults.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of validation results.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> representing the validation results.</returns>
        </member>
        <member name="P:Volvo.NVS.Integration.Validation.ValidationResults.IsValid">
            <summary>
            Gets the indication of whether the validation was successful.
            </summary> 
            <remarks>
            An unsuccessful validation will be represented by a <see cref="T:Volvo.NVS.Integration.Validation.ValidationResults"/> instance with
            more than one <see cref="T:System.String"/> element. 
            </remarks>
        </member>
        <member name="P:Volvo.NVS.Integration.Validation.ValidationResults.Count">
            <summary>
            Gets the count of validation results.
            </summary>
        </member>
        <member name="M:Volvo.NVS.Integration.Validation.ValidationResults.AddResult(System.String)">
            <summary>
            Adds a <see cref="T:System.String"/> representing a validation problem.
            </summary>
            <param name="validationResult">The validation result to be added.</param>
        </member>
        <member name="T:Volvo.NVS.Core.Configuration.IntegrationLibraryConfigurator">
            <summary>
            Extends the common <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/> configuration interface with the NVS Integration library
            configuration methods.
            </summary>
            <remarks>
            <para>
            You never use this type directly. You use extensions methods provided by this class via types implementing the <see cref="T:Volvo.NVS.Core.Configuration.ILibraryConfigurator"/>
            which is extended by the <see cref="T:Volvo.NVS.Core.Configuration.IntegrationLibraryConfigurator"/>.
            </para>
            <para>
            Check the <see cref="T:Volvo.NVS.Core.Configuration.LibraryConfigurator"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Volvo.NVS.Core.Configuration.IntegrationLibraryConfigurator.ConfigureIntegrationChannels(Volvo.NVS.Core.Configuration.ILibraryConfigurator,System.Action{Volvo.NVS.Integration.Configuration.IIntegrationConfigurationBuilder})">
            <summary>
            Applies settings to integration configuration (general).
            </summary>
            <param name="configurator">The configurator</param>
            <param name="builder">The builder that will apply settings to the Configuration.</param>
            <returns>The fluent interface enabling further configuration of other libraries.</returns>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IsTrue">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IsFalse">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IsNull">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IsNotNull">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type[])">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseTypes">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Instantiated">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
    </members>
</doc>
